{"version":3,"file":"VaConfig.js","sources":["../../src/components/va-config/VaConfig.ts"],"sourcesContent":["import { inject, provide, computed, toRefs, defineComponent, ComputedRef } from 'vue'\r\n\r\nimport { ComponentConfig } from '../../services/component-config/component-config'\r\n\r\n/**\r\n * We need another key to provide injected value.\r\n */\r\nexport const LocalConfigKey = Symbol('LocalConfigKey')\r\n\r\nexport const CONFIGS_DEFAULT = computed(() => [])\r\n\r\nexport function useLocalConfig (): ComputedRef<ComponentConfig[]> {\r\n  return inject(LocalConfigKey, CONFIGS_DEFAULT)\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaConfig',\r\n  props: {\r\n    components: { type: Object, default: () => ({}) },\r\n  },\r\n  setup (props) {\r\n    const { components } = toRefs(props)\r\n    const prevChain = useLocalConfig()\r\n    const nextChain = computed(() => [...prevChain.value, components.value])\r\n\r\n    provide(LocalConfigKey, nextChain)\r\n\r\n    return {}\r\n  },\r\n  render () {\r\n    return this.$slots.default ? this.$slots.default() : null\r\n  },\r\n})\r\n"],"names":["LocalConfigKey","Symbol","CONFIGS_DEFAULT","computed","useLocalConfig","inject","defineComponent","name","props","components","type","Object","default","setup","toRefs","prevChain","nextChain","value","provide","render","this","$slots"],"mappings":"yFAOO,MAAMA,EAAiBC,OAAO,kBAExBC,EAAkBC,GAAS,IAAM,cAE9BC,iBACd,OAAOC,EAAOL,EAAgBE,GAGhC,MAAeI,EAAgB,CAC7BC,KAAM,WACNC,MAAO,CACLC,WAAY,CAAEC,KAAMC,OAAQC,QAAS,WAEvCC,MAAOL,GACL,MAAMC,WAAEA,GAAeK,EAAON,GACxBO,EAAYX,iBACZY,EAAYb,GAAS,IAAM,IAAIY,EAAUE,MAAOR,EAAWQ,SAIjE,OAFAC,EAAQlB,EAAgBgB,GAEjB,IAETG,SACE,OAAOC,KAAKC,OAAOT,QAAUQ,KAAKC,OAAOT,UAAY"}