{"version":3,"file":"index42.js","sources":["../../src/components/va-sidebar/VaSidebar.vue","../../src/components/va-sidebar/VaSidebar.vue?vue&type=template&id=2d72e2e8&lang.js","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItem.vue","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItem.vue?vue&type=template&id=28c8df18&lang.js","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItemContent.vue?vue&type=template&id=653c85d6&lang.js","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItemTitle.vue?vue&type=template&id=357b7474&lang.js","../../src/components/va-sidebar/VaSidebarItem/index.ts","../../src/components/va-sidebar/index.ts"],"sourcesContent":["<template>\r\n  <aside\r\n    :class=\"computedClass\"\r\n    :style=\"computedStyle\"\r\n    @mouseenter=\"updateHoverState(true)\"\r\n    @mouseleave=\"updateHoverState(false)\"\r\n  >\r\n    <div class=\"va-sidebar__menu\">\r\n      <slot />\r\n    </div>\r\n  </aside>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nimport { getGradientBackground } from '../../services/color-config/color-functions'\r\nimport { useColors } from '../../services/color-config/color-config'\r\n\r\nclass SidebarProps {\r\n  color = prop<string>({ type: String, default: 'background' })\r\n  textColor = prop<string>({ type: String, default: undefined })\r\n  gradient = prop<boolean>({ type: Boolean, default: false })\r\n  minimized = prop<boolean>({ type: Boolean, default: false })\r\n  hoverable = prop<boolean>({ type: Boolean, default: false })\r\n  position = prop<string>({ type: String, default: 'left' })\r\n  width = prop<string>({ type: String, default: '16rem' })\r\n  minimizedWidth = prop<string>({ type: String, default: '2.5rem' })\r\n  modelValue = prop<boolean>({ type: Boolean, default: true })\r\n}\r\n\r\nconst SidebarPropsMixin = Vue.with(SidebarProps)\r\n\r\n@Options({ name: 'VaSidebar' })\r\nexport default class VaSidebar extends SidebarPropsMixin {\r\n  isHovered = false\r\n\r\n  get isMinimized () {\r\n    return this.$props.minimized || (this.$props.hoverable && !this.isHovered)\r\n  }\r\n\r\n  get computedStyle () {\r\n    const { getColor, getTextColor } = useColors()\r\n\r\n    const backgroundColor = getColor(this.color)\r\n    const background = this.gradient ? getGradientBackground(backgroundColor) : backgroundColor\r\n\r\n    const color = this.$props.textColor ? getColor(this.textColor) : getTextColor(backgroundColor)\r\n\r\n    return {\r\n      color,\r\n      background,\r\n      width: this.computedWidth,\r\n    }\r\n  }\r\n\r\n  get computedWidth () {\r\n    if (!this.$props.modelValue) {\r\n      return 0\r\n    }\r\n    return this.isMinimized ? this.$props.minimizedWidth : this.$props.width\r\n  }\r\n\r\n  get computedClass () {\r\n    return {\r\n      'va-sidebar': true,\r\n      'va-sidebar--minimized': this.isMinimized,\r\n      'va-sidebar--hidden': !this.modelValue,\r\n      'va-sidebar--right': this.$props.position === 'right',\r\n    }\r\n  }\r\n\r\n  updateHoverState (isHovered: boolean) {\r\n    this.isHovered = this.$props.hoverable ? isHovered : false\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-sidebar {\r\n  min-height: var(--va-sidebar-min-height);\r\n  height: var(--va-sidebar-height);\r\n  position: var(--va-sidebar-position);\r\n  top: var(--va-sidebar-top);\r\n  left: var(--va-sidebar-left);\r\n  transition: var(--va-sidebar-transition);\r\n  z-index: var(--va-sidebar-z-index);\r\n\r\n  &__menu {\r\n    max-height: var(--va-sidebar-menu-max-height);\r\n    margin-bottom: var(--va-sidebar-menu-margin-bottom);\r\n    list-style: var(--va-sidebar-menu-list-style);\r\n    padding-left: var(--va-sidebar-menu-padding-left);\r\n    overflow-y: var(--va-sidebar-menu-overflow-y);\r\n    overflow-x: var(--va-sidebar-menu-overflow-x);\r\n  }\r\n\r\n  &--minimized {\r\n    left: 0;\r\n\r\n    .va-sidebar-link-group {\r\n      .va-sidebar-link__content {\r\n        padding-right: 0;\r\n      }\r\n    }\r\n\r\n    & + .content-wrap {\r\n      margin-left: $sidebar-width--hidden !important;\r\n    }\r\n  }\r\n\r\n  &--right {\r\n    left: auto;\r\n    right: 0;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <aside\r\n    :class=\"computedClass\"\r\n    :style=\"computedStyle\"\r\n    @mouseenter=\"updateHoverState(true)\"\r\n    @mouseleave=\"updateHoverState(false)\"\r\n  >\r\n    <div class=\"va-sidebar__menu\">\r\n      <slot />\r\n    </div>\r\n  </aside>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nimport { getGradientBackground } from '../../services/color-config/color-functions'\r\nimport { useColors } from '../../services/color-config/color-config'\r\n\r\nclass SidebarProps {\r\n  color = prop<string>({ type: String, default: 'background' })\r\n  textColor = prop<string>({ type: String, default: undefined })\r\n  gradient = prop<boolean>({ type: Boolean, default: false })\r\n  minimized = prop<boolean>({ type: Boolean, default: false })\r\n  hoverable = prop<boolean>({ type: Boolean, default: false })\r\n  position = prop<string>({ type: String, default: 'left' })\r\n  width = prop<string>({ type: String, default: '16rem' })\r\n  minimizedWidth = prop<string>({ type: String, default: '2.5rem' })\r\n  modelValue = prop<boolean>({ type: Boolean, default: true })\r\n}\r\n\r\nconst SidebarPropsMixin = Vue.with(SidebarProps)\r\n\r\n@Options({ name: 'VaSidebar' })\r\nexport default class VaSidebar extends SidebarPropsMixin {\r\n  isHovered = false\r\n\r\n  get isMinimized () {\r\n    return this.$props.minimized || (this.$props.hoverable && !this.isHovered)\r\n  }\r\n\r\n  get computedStyle () {\r\n    const { getColor, getTextColor } = useColors()\r\n\r\n    const backgroundColor = getColor(this.color)\r\n    const background = this.gradient ? getGradientBackground(backgroundColor) : backgroundColor\r\n\r\n    const color = this.$props.textColor ? getColor(this.textColor) : getTextColor(backgroundColor)\r\n\r\n    return {\r\n      color,\r\n      background,\r\n      width: this.computedWidth,\r\n    }\r\n  }\r\n\r\n  get computedWidth () {\r\n    if (!this.$props.modelValue) {\r\n      return 0\r\n    }\r\n    return this.isMinimized ? this.$props.minimizedWidth : this.$props.width\r\n  }\r\n\r\n  get computedClass () {\r\n    return {\r\n      'va-sidebar': true,\r\n      'va-sidebar--minimized': this.isMinimized,\r\n      'va-sidebar--hidden': !this.modelValue,\r\n      'va-sidebar--right': this.$props.position === 'right',\r\n    }\r\n  }\r\n\r\n  updateHoverState (isHovered: boolean) {\r\n    this.isHovered = this.$props.hoverable ? isHovered : false\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-sidebar {\r\n  min-height: var(--va-sidebar-min-height);\r\n  height: var(--va-sidebar-height);\r\n  position: var(--va-sidebar-position);\r\n  top: var(--va-sidebar-top);\r\n  left: var(--va-sidebar-left);\r\n  transition: var(--va-sidebar-transition);\r\n  z-index: var(--va-sidebar-z-index);\r\n\r\n  &__menu {\r\n    max-height: var(--va-sidebar-menu-max-height);\r\n    margin-bottom: var(--va-sidebar-menu-margin-bottom);\r\n    list-style: var(--va-sidebar-menu-list-style);\r\n    padding-left: var(--va-sidebar-menu-padding-left);\r\n    overflow-y: var(--va-sidebar-menu-overflow-y);\r\n    overflow-x: var(--va-sidebar-menu-overflow-x);\r\n  }\r\n\r\n  &--minimized {\r\n    left: 0;\r\n\r\n    .va-sidebar-link-group {\r\n      .va-sidebar-link__content {\r\n        padding-right: 0;\r\n      }\r\n    }\r\n\r\n    & + .content-wrap {\r\n      margin-left: $sidebar-width--hidden !important;\r\n    }\r\n  }\r\n\r\n  &--right {\r\n    left: auto;\r\n    right: 0;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <router-link custom :to=\"to\" v-slot=\"{ href, navigate }\">\r\n    <a\r\n      v-bind=\"$attrs\"\r\n      class=\"va-sidebar__item va-sidebar-item\"\r\n      :style=\"computedStyle\"\r\n      :href=\"href\"\r\n      @click=\"navigate\"\r\n      @mouseenter=\"onMouseEnter\"\r\n      @mouseleave=\"onMouseLeave\"\r\n      v-on=\"keyboardFocusListeners\"\r\n    >\r\n      <slot />\r\n    </a>\r\n  </router-link>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType, ref, computed } from 'vue'\r\nimport { useColors } from '../../../services/color-config/color-config'\r\nimport useKeyboardOnlyFocus from '../../../composables/useKeyboardOnlyFocus'\r\n\r\nconst useHover = () => {\r\n  const isHovered = ref(false)\r\n  const onMouseEnter = () => { isHovered.value = true }\r\n  const onMouseLeave = () => { isHovered.value = false }\r\n\r\n  return { isHovered, onMouseEnter, onMouseLeave }\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaSidebarItem',\r\n  props: {\r\n    to: {\r\n      type: [String, Object] as PropType<string | Record<string, any>>,\r\n      default: () => ({}),\r\n    },\r\n    active: { type: Boolean, default: false },\r\n    textColor: { type: String, default: undefined },\r\n    activeColor: { type: String, default: 'primary' },\r\n    hoverColor: { type: String, default: undefined },\r\n    borderColor: { type: String, default: undefined },\r\n  },\r\n  setup (props) {\r\n    const { isHovered, onMouseEnter, onMouseLeave } = useHover()\r\n    const { getColor, getHoverColor, getTextColor, getFocusColor } = useColors()\r\n\r\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\r\n\r\n    const computedStyle = computed(() => {\r\n      const style: Record<string, string> = {}\r\n\r\n      style.color = getColor(props.textColor, 'inherit')\r\n\r\n      if (isHovered.value) {\r\n        style['background-color'] = getHoverColor(getColor(props.hoverColor || props.activeColor))\r\n      }\r\n\r\n      if (props.active) {\r\n        const border = props.borderColor === undefined ? props.activeColor : props.borderColor\r\n\r\n        style['border-color'] = getColor(border)\r\n        style['background-color'] = getColor(props.activeColor)\r\n        style.color = getTextColor(style['background-color'], getColor('dark'), '#ffffff')\r\n      }\r\n\r\n      if (hasKeyboardFocus.value) {\r\n        style['background-color'] = getFocusColor(getColor(props.hoverColor || props.activeColor))\r\n      }\r\n\r\n      // Override default link color from VaContent\r\n      style.color = `${style.color} !important`\r\n\r\n      return style\r\n    })\r\n\r\n    return { isHovered, onMouseEnter, onMouseLeave, computedStyle, keyboardFocusListeners }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  @import '../variables';\r\n\r\n  .va-sidebar__item {\r\n    border-left: var(--va-sidebar-item-active-border-size) solid transparent;\r\n    padding-right: var(--va-sidebar-item-active-border-size);\r\n    display: inline-block;\r\n    width: 100%;\r\n    color: inherit !important;\r\n  }\r\n</style>\r\n","<template>\r\n  <router-link custom :to=\"to\" v-slot=\"{ href, navigate }\">\r\n    <a\r\n      v-bind=\"$attrs\"\r\n      class=\"va-sidebar__item va-sidebar-item\"\r\n      :style=\"computedStyle\"\r\n      :href=\"href\"\r\n      @click=\"navigate\"\r\n      @mouseenter=\"onMouseEnter\"\r\n      @mouseleave=\"onMouseLeave\"\r\n      v-on=\"keyboardFocusListeners\"\r\n    >\r\n      <slot />\r\n    </a>\r\n  </router-link>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType, ref, computed } from 'vue'\r\nimport { useColors } from '../../../services/color-config/color-config'\r\nimport useKeyboardOnlyFocus from '../../../composables/useKeyboardOnlyFocus'\r\n\r\nconst useHover = () => {\r\n  const isHovered = ref(false)\r\n  const onMouseEnter = () => { isHovered.value = true }\r\n  const onMouseLeave = () => { isHovered.value = false }\r\n\r\n  return { isHovered, onMouseEnter, onMouseLeave }\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaSidebarItem',\r\n  props: {\r\n    to: {\r\n      type: [String, Object] as PropType<string | Record<string, any>>,\r\n      default: () => ({}),\r\n    },\r\n    active: { type: Boolean, default: false },\r\n    textColor: { type: String, default: undefined },\r\n    activeColor: { type: String, default: 'primary' },\r\n    hoverColor: { type: String, default: undefined },\r\n    borderColor: { type: String, default: undefined },\r\n  },\r\n  setup (props) {\r\n    const { isHovered, onMouseEnter, onMouseLeave } = useHover()\r\n    const { getColor, getHoverColor, getTextColor, getFocusColor } = useColors()\r\n\r\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\r\n\r\n    const computedStyle = computed(() => {\r\n      const style: Record<string, string> = {}\r\n\r\n      style.color = getColor(props.textColor, 'inherit')\r\n\r\n      if (isHovered.value) {\r\n        style['background-color'] = getHoverColor(getColor(props.hoverColor || props.activeColor))\r\n      }\r\n\r\n      if (props.active) {\r\n        const border = props.borderColor === undefined ? props.activeColor : props.borderColor\r\n\r\n        style['border-color'] = getColor(border)\r\n        style['background-color'] = getColor(props.activeColor)\r\n        style.color = getTextColor(style['background-color'], getColor('dark'), '#ffffff')\r\n      }\r\n\r\n      if (hasKeyboardFocus.value) {\r\n        style['background-color'] = getFocusColor(getColor(props.hoverColor || props.activeColor))\r\n      }\r\n\r\n      // Override default link color from VaContent\r\n      style.color = `${style.color} !important`\r\n\r\n      return style\r\n    })\r\n\r\n    return { isHovered, onMouseEnter, onMouseLeave, computedStyle, keyboardFocusListeners }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  @import '../variables';\r\n\r\n  .va-sidebar__item {\r\n    border-left: var(--va-sidebar-item-active-border-size) solid transparent;\r\n    padding-right: var(--va-sidebar-item-active-border-size);\r\n    display: inline-block;\r\n    width: 100%;\r\n    color: inherit !important;\r\n  }\r\n</style>\r\n","<template>\r\n  <div class=\"va-sidebar__item__content va-sidebar-item-content\">\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\">\r\n  @import '../variables';\r\n\r\n  .va-sidebar__item__content {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: var(--va-sidebar-item-content-padding);\r\n\r\n    & > * {\r\n      margin-right: var(--va-sidebar-item-content-gap);\r\n\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n","<template>\r\n  <div class=\"va-sidebar__title va-sidebar-item-title\">\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n  @import '../_variables';\r\n\r\n  .va-sidebar__title {\r\n    flex-grow: 1;\r\n    white-space: var(--va-sidebar-item-title-white-space);\r\n  }\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaSidebarItem from './VaSidebarItem.vue'\r\nimport VaSidebarItemContentComponent from './VaSidebarItemContent.vue'\r\nimport VaSidebarItemTitleComponent from './VaSidebarItemTitle.vue'\r\n\r\nexport const VaSidebarItemContent = withConfigTransport(VaSidebarItemContentComponent)\r\nexport const VaSidebarItemTitle = withConfigTransport(VaSidebarItemTitleComponent)\r\n\r\nexport default withConfigTransport(VaSidebarItem)\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaSidebar from './VaSidebar.vue'\r\nexport { default as VaSidebarItem, VaSidebarItemContent, VaSidebarItemTitle } from './VaSidebarItem'\r\n\r\nexport default withConfigTransport(VaSidebar)\r\n"],"names":["SidebarPropsMixin","Vue","with","SidebarProps","constructor","this","prop","type","String","default","undefined","Boolean","VaSidebar","isMinimized","$props","minimized","hoverable","isHovered","computedStyle","getColor","getTextColor","useColors","backgroundColor","color","background","gradient","getGradientBackground","textColor","width","computedWidth","modelValue","minimizedWidth","computedClass","position","updateHoverState","Options","name","class","_createElementBlock","_ctx","style","onMouseenter","onMouseleave","_createElementVNode","_hoisted_1","_renderSlot","defineComponent","props","to","Object","active","activeColor","hoverColor","borderColor","setup","onMouseEnter","onMouseLeave","ref","value","useHover","getHoverColor","getFocusColor","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","computed","border","_createBlock","custom","href","navigate","_mergeProps","onClick","_toHandlers","VaSidebarItemContent","withConfigTransport","VaSidebarItemContentComponent","VaSidebarItemTitle","VaSidebarItemTitleComponent","VaSidebarItem"],"mappings":"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"}