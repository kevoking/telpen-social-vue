{"version":3,"file":"index22.js","sources":["../../src/components/va-date-input/hooks/range-model-value-guard.ts","../../src/components/va-date-input/VaDateInput.vue","../../src/components/va-date-picker/hooks/sync-prop.ts","../../src/components/va-date-input/VaDateInput.vue?vue&type=template&id=139365e2&lang.js","../../src/components/va-date-input/index.ts"],"sourcesContent":["import { computed, ref, Ref, watch } from 'vue'\r\nimport { isRange } from '../../va-date-picker/hooks/model-value-helper'\r\nimport { VaDatePickerModelValue } from '../../va-date-picker/types/types'\r\n\r\n/**\r\n * This guard is used to prevent updating modelValue if range end is not specified.\r\n * This guard provides reset method, that allow us to reset VaDateInput value if dropdown is closed.\r\n */\r\nexport const useRangeModelValueGuard = (\r\n  modelValue: Ref<VaDatePickerModelValue | undefined>,\r\n  disabled: Ref<boolean>,\r\n) => {\r\n  const bufferValue = ref<VaDatePickerModelValue | undefined>(modelValue.value)\r\n\r\n  const valueComputed = computed<VaDatePickerModelValue | undefined>({\r\n    get: () => bufferValue.value,\r\n    set: (value) => {\r\n      if (disabled.value) {\r\n        bufferValue.value = value\r\n        modelValue.value = value\r\n      }\r\n\r\n      if (!value) {\r\n        modelValue.value = value\r\n        bufferValue.value = value\r\n        return\r\n      }\r\n\r\n      if (isRange(value)) {\r\n        if (value.end !== null) {\r\n          modelValue.value = value\r\n        }\r\n      } else {\r\n        modelValue.value = value\r\n      }\r\n\r\n      bufferValue.value = value\r\n    },\r\n  })\r\n\r\n  watch(modelValue, (newValue) => {\r\n    if (newValue) { bufferValue.value = newValue }\r\n  })\r\n\r\n  const reset = () => {\r\n    if (bufferValue.value && isRange(bufferValue.value)) {\r\n      bufferValue.value = modelValue.value\r\n    }\r\n  }\r\n\r\n  return {\r\n    valueComputed,\r\n    reset,\r\n  }\r\n}\r\n","<template>\r\n  <div class=\"va-date-input\">\r\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\">\r\n      <template #anchor>\r\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\r\n          <va-input\r\n            v-model=\"valueText\"\r\n            v-bind=\"inputProps\"\r\n            class=\"va-date-input__input\"\r\n            @cleared=\"onClear\"\r\n          >\r\n            <template #appendInner=\"slotScope\">\r\n              <slot name=\"appendInner\" v-bind=\"slotScope\">\r\n                <va-icon\r\n                  name=\"calendar_today\"\r\n                  class=\"va-date-picker__icon\"\r\n                  size=\"small\"\r\n                  :color=\"color\"\r\n                />\r\n              </slot>\r\n            </template>\r\n\r\n            <template\r\n              v-for=\"(_, name) in $slots\"\r\n              :key=\"name\"\r\n              v-slot:[name]=\"slotScope\"\r\n            >\r\n              <slot :name=\"name\" v-bind=\"slotScope\" />\r\n            </template>\r\n          </va-input>\r\n        </slot>\r\n      </template>\r\n\r\n      <va-dropdown-content>\r\n        <va-date-picker v-bind=\"datePickerProps\" v-model=\"valueComputed\">\r\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n            <slot :name=\"name\" v-bind=\"bind\" />\r\n          </template>\r\n        </va-date-picker>\r\n      </va-dropdown-content>\r\n    </va-dropdown>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\r\nimport { useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\r\n\r\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\r\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\r\nimport { filterComponentProps, extractComponentProps } from '../va-date-picker/utils/child-props'\r\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\r\n\r\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\r\nimport vaDropdown, { VaDropdownContent } from '../va-dropdown'\r\nimport VaInput from '../va-input'\r\nimport VaIcon from '../va-icon'\r\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\r\n\r\nconst VaInputProps = {\r\n  label: { type: String, required: false },\r\n  color: { type: String, default: 'primary' },\r\n  placeholder: { type: String, default: '' },\r\n  clearable: { type: Boolean, default: false },\r\n  tabindex: { type: Number, default: 0 },\r\n  outline: { Boolean, default: false },\r\n  bordered: { Boolean, default: false },\r\n  readonly: { Boolean, default: true },\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaDateInput',\r\n\r\n  components: {\r\n    vaDropdown,\r\n    VaDropdownContent,\r\n    VaDatePicker,\r\n    VaInput,\r\n    VaIcon,\r\n  },\r\n\r\n  props: {\r\n    ...extractComponentProps(VaDatePicker),\r\n    ...VaInputProps,\r\n    resetOnClose: { type: Boolean, default: true },\r\n    isOpen: { type: Boolean },\r\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\r\n  },\r\n\r\n  emits: [\r\n    'update:modelValue',\r\n    'hover:day', 'hover:month',\r\n    'update:year', 'update:month', 'update:view',\r\n    'click:month', 'click:day',\r\n    'update:is-open',\r\n    'update:text',\r\n  ],\r\n\r\n  setup (props, { emit }) {\r\n    const { isOpen, resetOnClose } = toRefs(props)\r\n    const { valueComputed: statefulValue } = useStateful(props, emit)\r\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\r\n\r\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\r\n    const { valueComputed, reset } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\r\n    watch(isOpenSync, (isOpened) => { if (!isOpened && !isRangeModelValueGuardDisabled.value) { reset() } })\r\n\r\n    const dateOrNothing = (date: Date | undefined | null) => {\r\n      if (!date) { return '...' }\r\n      return date.toDateString()\r\n    }\r\n\r\n    const valueText = computed({\r\n      get: () => {\r\n        if (props.format) {\r\n          return props.format(valueComputed.value)\r\n        }\r\n\r\n        if (!valueComputed.value) { return '' }\r\n\r\n        if (isDates(valueComputed.value)) {\r\n          return valueComputed.value.map((d) => d.toDateString()).join(', ')\r\n        }\r\n        if (isSingleDate(valueComputed.value)) {\r\n          return valueComputed.value.toDateString()\r\n        }\r\n        if (isRange(valueComputed.value)) {\r\n          return dateOrNothing(valueComputed.value.start) + ' ~ ' + dateOrNothing(valueComputed.value.end)\r\n        }\r\n\r\n        throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\r\n      },\r\n      set (value: string) {\r\n        // TODO: Parse value from input\r\n      },\r\n    })\r\n\r\n    watch(valueText, (text) => emit('update:text', text))\r\n\r\n    const onClear = () => { valueComputed.value = undefined }\r\n\r\n    return {\r\n      valueText,\r\n      valueComputed,\r\n      isOpenSync,\r\n      onClear,\r\n\r\n      inputProps: filterComponentProps(props, VaInputProps),\r\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .va-date-input {\r\n    display: flex;\r\n\r\n    &__icon {\r\n      cursor: pointer;\r\n    }\r\n\r\n    &__input {\r\n      cursor: pointer;\r\n    }\r\n\r\n    --va-date-picker-cell-size: 28px;\r\n  }\r\n</style>\r\n","import { ref, computed, Ref, UnwrapRef } from 'vue'\r\n\r\nexport function useSyncProp<T, PropName extends string> (propRef: Ref<T> | undefined, propName: PropName, emit: (event: any, newValue: T) => any, defaultValue?: T) {\r\n  if (defaultValue === undefined) {\r\n    return {\r\n      syncProp: computed({\r\n        set (value: T) {\r\n          emit(`update:${propName}`, value)\r\n        },\r\n        get (): T {\r\n          return propRef!.value\r\n        },\r\n      }),\r\n    }\r\n  }\r\n\r\n  const statefulValue = ref<T>(defaultValue)\r\n\r\n  return {\r\n    syncProp: computed<NonNullable<T>>({\r\n      set (value: NonNullable<T>) {\r\n        statefulValue.value = value as UnwrapRef<NonNullable<T>>\r\n        emit(`update:${propName}`, value)\r\n      },\r\n      get (): NonNullable<T> {\r\n        return (propRef?.value === undefined ? (statefulValue.value) : propRef.value) as NonNullable<T>\r\n      },\r\n    }),\r\n  }\r\n}\r\n","<template>\r\n  <div class=\"va-date-input\">\r\n    <va-dropdown v-model=\"isOpenSync\" :offset=\"[0, 10]\" :close-on-content-click=\"false\">\r\n      <template #anchor>\r\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, color }\">\r\n          <va-input\r\n            v-model=\"valueText\"\r\n            v-bind=\"inputProps\"\r\n            class=\"va-date-input__input\"\r\n            @cleared=\"onClear\"\r\n          >\r\n            <template #appendInner=\"slotScope\">\r\n              <slot name=\"appendInner\" v-bind=\"slotScope\">\r\n                <va-icon\r\n                  name=\"calendar_today\"\r\n                  class=\"va-date-picker__icon\"\r\n                  size=\"small\"\r\n                  :color=\"color\"\r\n                />\r\n              </slot>\r\n            </template>\r\n\r\n            <template\r\n              v-for=\"(_, name) in $slots\"\r\n              :key=\"name\"\r\n              v-slot:[name]=\"slotScope\"\r\n            >\r\n              <slot :name=\"name\" v-bind=\"slotScope\" />\r\n            </template>\r\n          </va-input>\r\n        </slot>\r\n      </template>\r\n\r\n      <va-dropdown-content>\r\n        <va-date-picker v-bind=\"datePickerProps\" v-model=\"valueComputed\">\r\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n            <slot :name=\"name\" v-bind=\"bind\" />\r\n          </template>\r\n        </va-date-picker>\r\n      </va-dropdown-content>\r\n    </va-dropdown>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\r\nimport { useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\r\n\r\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/hooks/model-value-helper'\r\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\r\nimport { filterComponentProps, extractComponentProps } from '../va-date-picker/utils/child-props'\r\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\r\n\r\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\r\nimport vaDropdown, { VaDropdownContent } from '../va-dropdown'\r\nimport VaInput from '../va-input'\r\nimport VaIcon from '../va-icon'\r\nimport { VaDatePickerModelValue } from '../va-date-picker/types/types'\r\n\r\nconst VaInputProps = {\r\n  label: { type: String, required: false },\r\n  color: { type: String, default: 'primary' },\r\n  placeholder: { type: String, default: '' },\r\n  clearable: { type: Boolean, default: false },\r\n  tabindex: { type: Number, default: 0 },\r\n  outline: { Boolean, default: false },\r\n  bordered: { Boolean, default: false },\r\n  readonly: { Boolean, default: true },\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaDateInput',\r\n\r\n  components: {\r\n    vaDropdown,\r\n    VaDropdownContent,\r\n    VaDatePicker,\r\n    VaInput,\r\n    VaIcon,\r\n  },\r\n\r\n  props: {\r\n    ...extractComponentProps(VaDatePicker),\r\n    ...VaInputProps,\r\n    resetOnClose: { type: Boolean, default: true },\r\n    isOpen: { type: Boolean },\r\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\r\n  },\r\n\r\n  emits: [\r\n    'update:modelValue',\r\n    'hover:day', 'hover:month',\r\n    'update:year', 'update:month', 'update:view',\r\n    'click:month', 'click:day',\r\n    'update:is-open',\r\n    'update:text',\r\n  ],\r\n\r\n  setup (props, { emit }) {\r\n    const { isOpen, resetOnClose } = toRefs(props)\r\n    const { valueComputed: statefulValue } = useStateful(props, emit)\r\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\r\n\r\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\r\n    const { valueComputed, reset } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled)\r\n    watch(isOpenSync, (isOpened) => { if (!isOpened && !isRangeModelValueGuardDisabled.value) { reset() } })\r\n\r\n    const dateOrNothing = (date: Date | undefined | null) => {\r\n      if (!date) { return '...' }\r\n      return date.toDateString()\r\n    }\r\n\r\n    const valueText = computed({\r\n      get: () => {\r\n        if (props.format) {\r\n          return props.format(valueComputed.value)\r\n        }\r\n\r\n        if (!valueComputed.value) { return '' }\r\n\r\n        if (isDates(valueComputed.value)) {\r\n          return valueComputed.value.map((d) => d.toDateString()).join(', ')\r\n        }\r\n        if (isSingleDate(valueComputed.value)) {\r\n          return valueComputed.value.toDateString()\r\n        }\r\n        if (isRange(valueComputed.value)) {\r\n          return dateOrNothing(valueComputed.value.start) + ' ~ ' + dateOrNothing(valueComputed.value.end)\r\n        }\r\n\r\n        throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\r\n      },\r\n      set (value: string) {\r\n        // TODO: Parse value from input\r\n      },\r\n    })\r\n\r\n    watch(valueText, (text) => emit('update:text', text))\r\n\r\n    const onClear = () => { valueComputed.value = undefined }\r\n\r\n    return {\r\n      valueText,\r\n      valueComputed,\r\n      isOpenSync,\r\n      onClear,\r\n\r\n      inputProps: filterComponentProps(props, VaInputProps),\r\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .va-date-input {\r\n    display: flex;\r\n\r\n    &__icon {\r\n      cursor: pointer;\r\n    }\r\n\r\n    &__input {\r\n      cursor: pointer;\r\n    }\r\n\r\n    --va-date-picker-cell-size: 28px;\r\n  }\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaDateInputComponent from '../va-date-input/VaDateInput.vue'\r\n\r\nexport const VaDateInput = withConfigTransport(VaDateInputComponent)\r\n"],"names":["VaInputProps","label","type","String","required","color","default","placeholder","clearable","Boolean","tabindex","Number","outline","bordered","readonly","defineComponent","name","components","vaDropdown","VaDropdownContent","VaDatePicker","VaInput","VaIcon","props","extractComponentProps","resetOnClose","isOpen","format","Function","emits","setup","emit","toRefs","valueComputed","statefulValue","useStateful","syncProp","isOpenSync","useSyncProp","propRef","propName","defaultValue","undefined","computed","set","value","get","ref","isRangeModelValueGuardDisabled","reset","modelValue","disabled","bufferValue","isRange","end","watch","newValue","useRangeModelValueGuard","isOpened","dateOrNothing","date","toDateString","valueText","isDates","map","d","join","isSingleDate","start","Error","text","onClear","inputProps","filterComponentProps","datePickerProps","class","_createElementBlock","_hoisted_1","_createVNode","_ctx","offset","anchor","_renderSlot","_mergeProps","onCleared","appendInner","slotScope","size","_","bind","VaDateInput","withConfigTransport","VaDateInputComponent"],"mappings":"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"}