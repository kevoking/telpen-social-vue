{"version":3,"file":"index16.js","sources":["../../src/components/va-collapse/VaCollapse.vue","../../src/components/va-collapse/VaCollapse.vue?vue&type=template&id=10b321b0&lang.js","../../src/components/va-collapse/index.ts"],"sourcesContent":["<template>\r\n  <div class=\"va-collapse\" :class=\"computedClasses\">\r\n    <div\r\n      class=\"va-collapse__header\"\r\n      v-on=\"SetupContext.keyboardFocusListeners\"\r\n      @click=\"changeValue()\"\r\n      @focus=\"$emit('focus')\"\r\n      @keydown.enter=\"changeValue()\"\r\n      @keydown.space=\"changeValue()\"\r\n      :tabindex=\"collapseIndexComputed\"\r\n    >\r\n      <slot name=\"header\" v-bind=\"{ value: valueProxy, hasKeyboardFocus: SetupContext.hasKeyboardFocus }\">\r\n        <div\r\n          class=\"va-collapse__header__content\"\r\n          :style=\"contentStyle\"\r\n        >\r\n          <va-icon\r\n            v-if=\"icon\"\r\n            class=\"va-collapse__header__icon\"\r\n            :name=\"icon\"\r\n            :color=\"textColor\"\r\n          />\r\n          <div class=\"va-collapse__header__text\">\r\n            {{ header }}\r\n          </div>\r\n          <va-icon\r\n            class=\"va-collapse__header__icon\"\r\n            :name=\"valueProxy ? 'expand_less' : 'expand_more'\"\r\n            :color=\"textColor\"\r\n          />\r\n        </div>\r\n      </slot>\r\n    </div>\r\n    <div class=\"va-collapse__body\" ref=\"body\" :style=\"stylesComputed\">\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { inject } from 'vue'\r\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\r\nimport VaIcon from '../va-icon'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport { getHoverColor } from '../../services/color-config/color-functions'\r\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\r\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\r\nimport { Accordion, AccordionServiceKey } from '../va-accordion/VaAccordion.vue'\r\n\r\nclass Props {\r\n  value = prop<boolean>({ type: Boolean, default: false })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  header = prop<string>({ type: String, default: '' })\r\n  icon = prop<string>({ type: String, default: '' })\r\n  solid = prop<boolean>({ type: Boolean, default: false })\r\n  color = prop<string>({ type: String, default: '' })\r\n  textColor = prop<string>({ type: String, default: '' })\r\n  colorAll = prop<boolean>({ type: Boolean, default: false })\r\n}\r\n\r\nconst PropsMixin = Vue.with(Props)\r\n\r\nconst TEXT_NODE_TYPE = 3\r\n\r\n@Options({\r\n  name: 'VaCollapse',\r\n  components: { VaIcon },\r\n  emits: ['focus'],\r\n})\r\nexport default class VaCollapse extends mixins(\r\n  StatefulMixin,\r\n  ColorMixin,\r\n  PropsMixin,\r\n) {\r\n  height = 0\r\n  transitionDuration = this.getTransitionDuration()\r\n  mutationObserver: any = null\r\n  valueCollapse = {\r\n    value: undefined,\r\n  }\r\n\r\n  accordion: Accordion = setup(() => {\r\n    return inject(\r\n      AccordionServiceKey,\r\n      {\r\n        isInsideAccordion: false,\r\n        getProps: () => undefined,\r\n        getState: () => undefined,\r\n        onChildChange: (ctx: any) => undefined,\r\n        onChildMounted: (ctx: any) => undefined,\r\n        onChildUnmounted: (ctx: any) => undefined,\r\n      })\r\n  })\r\n\r\n  SetupContext = setup(() => {\r\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\r\n\r\n    return {\r\n      hasKeyboardFocus,\r\n      keyboardFocusListeners,\r\n    }\r\n  })\r\n\r\n  get body (): HTMLElement {\r\n    return this.$refs?.body as HTMLElement\r\n  }\r\n\r\n  get valueProxy () {\r\n    if (this.accordion.isInsideAccordion) {\r\n      return this.valueCollapse.value\r\n    }\r\n\r\n    return this.valueComputed\r\n  }\r\n\r\n  set valueProxy (value) {\r\n    if (this.accordion.isInsideAccordion) {\r\n      this.valueCollapse.value = value\r\n    }\r\n\r\n    this.valueComputed = value\r\n    this.setCollapseParams()\r\n  }\r\n\r\n  get computedClasses () {\r\n    const accordionProps = this.accordion.getProps()\r\n\r\n    return {\r\n      'va-collapse--disabled': this.disabled,\r\n      'va-collapse--solid': this.solid,\r\n      'va-collapse--active': this.solid && this.valueProxy,\r\n      'va-collapse--popout': accordionProps?.popout && this.valueProxy,\r\n      'va-collapse--inset': accordionProps?.inset && this.valueProxy,\r\n    }\r\n  }\r\n\r\n  get contentStyle () {\r\n    return {\r\n      paddingLeft: this.icon && 0,\r\n      color: this.textColor ? this.theme.getColor(this.textColor) : '',\r\n      backgroundColor: this.color ? this.colorComputed : '',\r\n      boxShadow: this.SetupContext.hasKeyboardFocus ? '0 0 0.5rem 0 rgba(0, 0, 0, 0.3)' : '',\r\n    }\r\n  }\r\n\r\n  get stylesComputed () {\r\n    if (this.valueProxy && (this as any).$slots.default()?.[0]) {\r\n      return {\r\n        visibility: 'visible', // allows for better a11y and works well with height-transitions (compared to v-show (display: none in general)\r\n        height: this.height + 'px',\r\n        transitionDuration: this.transitionDuration + 's',\r\n        background:\r\n          this.color && this.colorAll\r\n            ? getHoverColor(this.colorComputed)\r\n            : '',\r\n      }\r\n    }\r\n    return {\r\n      visibility: 'hidden',\r\n      height: this.height + 'px',\r\n      transitionDuration: this.transitionDuration + 's',\r\n    }\r\n  }\r\n\r\n  get collapseIndexComputed () {\r\n    return this.disabled ? -1 : 0\r\n  }\r\n\r\n  changeValue () {\r\n    if (!this.disabled) {\r\n      this.valueProxy = !this.valueProxy\r\n      this.accordion.onChildChange(this)\r\n    }\r\n  }\r\n\r\n  getHeight () {\r\n    if (!this.valueProxy) {\r\n      return 0\r\n    }\r\n\r\n    // @ts-ignore\r\n    const nodes = [...(this.body?.childNodes || [])] as HTMLElement[]\r\n    return nodes.reduce((result: number, node: HTMLElement) => {\r\n      result += node.nodeType === TEXT_NODE_TYPE ? this.getTextNodeHeight(node) : node.clientHeight\r\n      return result\r\n    }, 0)\r\n  }\r\n\r\n  getTransitionDuration () {\r\n    const duration = this.height / 1000 * 0.2\r\n    return duration > 0.2 ? duration : 0.2\r\n  }\r\n\r\n  getTextNodeHeight (textNode: Node) {\r\n    const range = document.createRange()\r\n    range.selectNodeContents(textNode)\r\n    const rect = range.getBoundingClientRect()\r\n\r\n    return rect.bottom - rect.top\r\n  }\r\n\r\n  setCollapseParams () {\r\n    this.height = this.getHeight()\r\n    this.transitionDuration = this.getTransitionDuration()\r\n  }\r\n\r\n  mounted () {\r\n    this.getHeight()\r\n\r\n    this.mutationObserver = new MutationObserver(() => {\r\n      this.setCollapseParams()\r\n    })\r\n    this.mutationObserver.observe(this.body, {\r\n      attributes: true,\r\n      childList: true,\r\n      subtree: true,\r\n    })\r\n    if (this.accordion.isInsideAccordion) {\r\n      this.accordion.onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  beforeUnmount () {\r\n    if (this.mutationObserver) {\r\n      this.mutationObserver.disconnect()\r\n    }\r\n    if (this.accordion.isInsideAccordion) {\r\n      this.accordion.onChildUnmounted(this)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../styles/resources/resources\";\r\n@import \"variables\";\r\n\r\n.va-collapse {\r\n  transition: var(--va-collapse-transition, var(--va-swing-transition));\r\n\r\n  &__body {\r\n    transition: var(--va-collapse-body-transition);\r\n    overflow: var(--va-collapse-body-overflow);\r\n    margin-top: var(--va-collapse-body-margin-top);\r\n  }\r\n\r\n  &__header {\r\n    &__content {\r\n      display: var(--va-collapse-header-content-display);\r\n      justify-content: var(--va-collapse-header-content-justify-content);\r\n      cursor: var(--va-collapse-header-content-cursor);\r\n      background-color: var(--va-collapse-header-content-background-color);\r\n      box-shadow: var(--va-collapse-header-content-box-shadow, var(--va-block-box-shadow));\r\n      border-radius: var(--va-collapse-header-content-border-radius, var(--va-block-border-radius));\r\n      align-items: var(--va-collapse-header-content-align-items);\r\n      padding-top: var(--va-collapse-header-content-padding-top);\r\n      padding-bottom: var(--va-collapse-header-content-padding-bottom);\r\n      padding-left: var(--va-collapse-header-content-padding-left);\r\n    }\r\n\r\n    &__text {\r\n      width: var(--va-collapse-header-content-text-width);\r\n    }\r\n\r\n    &__icon {\r\n      @include flex-center();\r\n\r\n      min-width: var(--va-collapse-header-content-icon-min-width);\r\n      margin-left: var(--va-collapse-header-content-icon-margin-left);\r\n      margin-right: var(--va-collapse-header-content-icon-margin-right);\r\n      color: var(--va-collapse-header-content-icon-color);\r\n    }\r\n  }\r\n\r\n  &--solid {\r\n    box-shadow: var(--va-collapse-solid-box-shadow);\r\n    border-radius: var(--va-collapse-solid-border-radius);\r\n\r\n    .va-collapse {\r\n      &__header {\r\n        &__content {\r\n          border-radius: var(--va-collapse-solid-header-content-border-radius, var(--va-block-border-radius));\r\n          transition: var(--va-collapse-solid-header-content-transition);\r\n          box-shadow: var(--va-collapse-solid-header-content-box-shadow, var(--va-block-box-shadow));\r\n          background-color: var(--va-collapse-solid-header-content-background-color);\r\n        }\r\n      }\r\n\r\n      &__body {\r\n        border-radius: var(--va-collapse-solid-body-border-radius);\r\n        margin-top: var(--va-collapse-solid-body-margin-top);\r\n      }\r\n    }\r\n  }\r\n\r\n  &--popout {\r\n    margin: var(--va-collapse-popout-margin);\r\n  }\r\n\r\n  &--inset {\r\n    margin: var(--va-collapse-inset-margin);\r\n  }\r\n\r\n  &--disabled {\r\n    @include va-disabled();\r\n\r\n    pointer-events: none;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-collapse\" :class=\"computedClasses\">\r\n    <div\r\n      class=\"va-collapse__header\"\r\n      v-on=\"SetupContext.keyboardFocusListeners\"\r\n      @click=\"changeValue()\"\r\n      @focus=\"$emit('focus')\"\r\n      @keydown.enter=\"changeValue()\"\r\n      @keydown.space=\"changeValue()\"\r\n      :tabindex=\"collapseIndexComputed\"\r\n    >\r\n      <slot name=\"header\" v-bind=\"{ value: valueProxy, hasKeyboardFocus: SetupContext.hasKeyboardFocus }\">\r\n        <div\r\n          class=\"va-collapse__header__content\"\r\n          :style=\"contentStyle\"\r\n        >\r\n          <va-icon\r\n            v-if=\"icon\"\r\n            class=\"va-collapse__header__icon\"\r\n            :name=\"icon\"\r\n            :color=\"textColor\"\r\n          />\r\n          <div class=\"va-collapse__header__text\">\r\n            {{ header }}\r\n          </div>\r\n          <va-icon\r\n            class=\"va-collapse__header__icon\"\r\n            :name=\"valueProxy ? 'expand_less' : 'expand_more'\"\r\n            :color=\"textColor\"\r\n          />\r\n        </div>\r\n      </slot>\r\n    </div>\r\n    <div class=\"va-collapse__body\" ref=\"body\" :style=\"stylesComputed\">\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { inject } from 'vue'\r\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\r\nimport VaIcon from '../va-icon'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport { getHoverColor } from '../../services/color-config/color-functions'\r\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\r\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\r\nimport { Accordion, AccordionServiceKey } from '../va-accordion/VaAccordion.vue'\r\n\r\nclass Props {\r\n  value = prop<boolean>({ type: Boolean, default: false })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  header = prop<string>({ type: String, default: '' })\r\n  icon = prop<string>({ type: String, default: '' })\r\n  solid = prop<boolean>({ type: Boolean, default: false })\r\n  color = prop<string>({ type: String, default: '' })\r\n  textColor = prop<string>({ type: String, default: '' })\r\n  colorAll = prop<boolean>({ type: Boolean, default: false })\r\n}\r\n\r\nconst PropsMixin = Vue.with(Props)\r\n\r\nconst TEXT_NODE_TYPE = 3\r\n\r\n@Options({\r\n  name: 'VaCollapse',\r\n  components: { VaIcon },\r\n  emits: ['focus'],\r\n})\r\nexport default class VaCollapse extends mixins(\r\n  StatefulMixin,\r\n  ColorMixin,\r\n  PropsMixin,\r\n) {\r\n  height = 0\r\n  transitionDuration = this.getTransitionDuration()\r\n  mutationObserver: any = null\r\n  valueCollapse = {\r\n    value: undefined,\r\n  }\r\n\r\n  accordion: Accordion = setup(() => {\r\n    return inject(\r\n      AccordionServiceKey,\r\n      {\r\n        isInsideAccordion: false,\r\n        getProps: () => undefined,\r\n        getState: () => undefined,\r\n        onChildChange: (ctx: any) => undefined,\r\n        onChildMounted: (ctx: any) => undefined,\r\n        onChildUnmounted: (ctx: any) => undefined,\r\n      })\r\n  })\r\n\r\n  SetupContext = setup(() => {\r\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\r\n\r\n    return {\r\n      hasKeyboardFocus,\r\n      keyboardFocusListeners,\r\n    }\r\n  })\r\n\r\n  get body (): HTMLElement {\r\n    return this.$refs?.body as HTMLElement\r\n  }\r\n\r\n  get valueProxy () {\r\n    if (this.accordion.isInsideAccordion) {\r\n      return this.valueCollapse.value\r\n    }\r\n\r\n    return this.valueComputed\r\n  }\r\n\r\n  set valueProxy (value) {\r\n    if (this.accordion.isInsideAccordion) {\r\n      this.valueCollapse.value = value\r\n    }\r\n\r\n    this.valueComputed = value\r\n    this.setCollapseParams()\r\n  }\r\n\r\n  get computedClasses () {\r\n    const accordionProps = this.accordion.getProps()\r\n\r\n    return {\r\n      'va-collapse--disabled': this.disabled,\r\n      'va-collapse--solid': this.solid,\r\n      'va-collapse--active': this.solid && this.valueProxy,\r\n      'va-collapse--popout': accordionProps?.popout && this.valueProxy,\r\n      'va-collapse--inset': accordionProps?.inset && this.valueProxy,\r\n    }\r\n  }\r\n\r\n  get contentStyle () {\r\n    return {\r\n      paddingLeft: this.icon && 0,\r\n      color: this.textColor ? this.theme.getColor(this.textColor) : '',\r\n      backgroundColor: this.color ? this.colorComputed : '',\r\n      boxShadow: this.SetupContext.hasKeyboardFocus ? '0 0 0.5rem 0 rgba(0, 0, 0, 0.3)' : '',\r\n    }\r\n  }\r\n\r\n  get stylesComputed () {\r\n    if (this.valueProxy && (this as any).$slots.default()?.[0]) {\r\n      return {\r\n        visibility: 'visible', // allows for better a11y and works well with height-transitions (compared to v-show (display: none in general)\r\n        height: this.height + 'px',\r\n        transitionDuration: this.transitionDuration + 's',\r\n        background:\r\n          this.color && this.colorAll\r\n            ? getHoverColor(this.colorComputed)\r\n            : '',\r\n      }\r\n    }\r\n    return {\r\n      visibility: 'hidden',\r\n      height: this.height + 'px',\r\n      transitionDuration: this.transitionDuration + 's',\r\n    }\r\n  }\r\n\r\n  get collapseIndexComputed () {\r\n    return this.disabled ? -1 : 0\r\n  }\r\n\r\n  changeValue () {\r\n    if (!this.disabled) {\r\n      this.valueProxy = !this.valueProxy\r\n      this.accordion.onChildChange(this)\r\n    }\r\n  }\r\n\r\n  getHeight () {\r\n    if (!this.valueProxy) {\r\n      return 0\r\n    }\r\n\r\n    // @ts-ignore\r\n    const nodes = [...(this.body?.childNodes || [])] as HTMLElement[]\r\n    return nodes.reduce((result: number, node: HTMLElement) => {\r\n      result += node.nodeType === TEXT_NODE_TYPE ? this.getTextNodeHeight(node) : node.clientHeight\r\n      return result\r\n    }, 0)\r\n  }\r\n\r\n  getTransitionDuration () {\r\n    const duration = this.height / 1000 * 0.2\r\n    return duration > 0.2 ? duration : 0.2\r\n  }\r\n\r\n  getTextNodeHeight (textNode: Node) {\r\n    const range = document.createRange()\r\n    range.selectNodeContents(textNode)\r\n    const rect = range.getBoundingClientRect()\r\n\r\n    return rect.bottom - rect.top\r\n  }\r\n\r\n  setCollapseParams () {\r\n    this.height = this.getHeight()\r\n    this.transitionDuration = this.getTransitionDuration()\r\n  }\r\n\r\n  mounted () {\r\n    this.getHeight()\r\n\r\n    this.mutationObserver = new MutationObserver(() => {\r\n      this.setCollapseParams()\r\n    })\r\n    this.mutationObserver.observe(this.body, {\r\n      attributes: true,\r\n      childList: true,\r\n      subtree: true,\r\n    })\r\n    if (this.accordion.isInsideAccordion) {\r\n      this.accordion.onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  beforeUnmount () {\r\n    if (this.mutationObserver) {\r\n      this.mutationObserver.disconnect()\r\n    }\r\n    if (this.accordion.isInsideAccordion) {\r\n      this.accordion.onChildUnmounted(this)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../styles/resources/resources\";\r\n@import \"variables\";\r\n\r\n.va-collapse {\r\n  transition: var(--va-collapse-transition, var(--va-swing-transition));\r\n\r\n  &__body {\r\n    transition: var(--va-collapse-body-transition);\r\n    overflow: var(--va-collapse-body-overflow);\r\n    margin-top: var(--va-collapse-body-margin-top);\r\n  }\r\n\r\n  &__header {\r\n    &__content {\r\n      display: var(--va-collapse-header-content-display);\r\n      justify-content: var(--va-collapse-header-content-justify-content);\r\n      cursor: var(--va-collapse-header-content-cursor);\r\n      background-color: var(--va-collapse-header-content-background-color);\r\n      box-shadow: var(--va-collapse-header-content-box-shadow, var(--va-block-box-shadow));\r\n      border-radius: var(--va-collapse-header-content-border-radius, var(--va-block-border-radius));\r\n      align-items: var(--va-collapse-header-content-align-items);\r\n      padding-top: var(--va-collapse-header-content-padding-top);\r\n      padding-bottom: var(--va-collapse-header-content-padding-bottom);\r\n      padding-left: var(--va-collapse-header-content-padding-left);\r\n    }\r\n\r\n    &__text {\r\n      width: var(--va-collapse-header-content-text-width);\r\n    }\r\n\r\n    &__icon {\r\n      @include flex-center();\r\n\r\n      min-width: var(--va-collapse-header-content-icon-min-width);\r\n      margin-left: var(--va-collapse-header-content-icon-margin-left);\r\n      margin-right: var(--va-collapse-header-content-icon-margin-right);\r\n      color: var(--va-collapse-header-content-icon-color);\r\n    }\r\n  }\r\n\r\n  &--solid {\r\n    box-shadow: var(--va-collapse-solid-box-shadow);\r\n    border-radius: var(--va-collapse-solid-border-radius);\r\n\r\n    .va-collapse {\r\n      &__header {\r\n        &__content {\r\n          border-radius: var(--va-collapse-solid-header-content-border-radius, var(--va-block-border-radius));\r\n          transition: var(--va-collapse-solid-header-content-transition);\r\n          box-shadow: var(--va-collapse-solid-header-content-box-shadow, var(--va-block-box-shadow));\r\n          background-color: var(--va-collapse-solid-header-content-background-color);\r\n        }\r\n      }\r\n\r\n      &__body {\r\n        border-radius: var(--va-collapse-solid-body-border-radius);\r\n        margin-top: var(--va-collapse-solid-body-margin-top);\r\n      }\r\n    }\r\n  }\r\n\r\n  &--popout {\r\n    margin: var(--va-collapse-popout-margin);\r\n  }\r\n\r\n  &--inset {\r\n    margin: var(--va-collapse-inset-margin);\r\n  }\r\n\r\n  &--disabled {\r\n    @include va-disabled();\r\n\r\n    pointer-events: none;\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaCollapse from './VaCollapse.vue'\r\n\r\nexport default withConfigTransport(VaCollapse)\r\n"],"names":["PropsMixin","Vue","with","Props","constructor","this","prop","type","Boolean","default","String","VaCollapse","mixins","StatefulMixin","ColorMixin","getTransitionDuration","value","undefined","setup","inject","AccordionServiceKey","isInsideAccordion","getProps","getState","onChildChange","ctx","onChildMounted","onChildUnmounted","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","body","$refs","valueProxy","accordion","valueCollapse","valueComputed","setCollapseParams","computedClasses","accordionProps","disabled","solid","popout","inset","contentStyle","paddingLeft","icon","color","textColor","theme","getColor","backgroundColor","colorComputed","boxShadow","SetupContext","stylesComputed","$slots","visibility","height","transitionDuration","background","colorAll","getHoverColor","collapseIndexComputed","changeValue","getHeight","childNodes","reduce","result","node","nodeType","getTextNodeHeight","clientHeight","duration","textNode","range","document","createRange","selectNodeContents","rect","getBoundingClientRect","bottom","top","mounted","mutationObserver","MutationObserver","observe","attributes","childList","subtree","beforeUnmount","disconnect","Options","name","components","VaIcon","emits","class","_createElementBlock","_ctx","_createElementVNode","_mergeProps","_toHandlers","onClick","onFocus","onKeydown","tabindex","_renderSlot","style","_createBlock","_hoisted_2","_createVNode","ref","withConfigTransport"],"mappings":"45BA4DA,MAAMA,EAAaC,EAAIC,KAXvB,MAAMC,MAANC,cACEC,WAAQC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IAChDJ,cAAWC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IACnDJ,YAASC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,KAC/CJ,UAAOC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,KAC7CJ,WAAQC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IAChDJ,WAAQC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,KAC9CJ,eAAYC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,KAClDJ,cAAWC,EAAc,CAAEC,KAAMC,QAASC,SAAS,OAYrD,IAAqBE,EAArB,MAAqBA,mBAAmBC,EACtCC,EACAC,EACAd,IAHFI,kCAKEC,YAAS,EACTA,wBAAqBA,KAAKU,wBAC1BV,sBAAwB,KACxBA,mBAAgB,CACdW,WAAOC,GAGTZ,eAAuBa,GAAM,IACpBC,EACLC,EACA,CACEC,mBAAmB,EACnBC,SAAU,OACVC,SAAU,OACVC,cAAgBC,MAChBC,eAAiBD,MACjBE,iBAAmBF,UAIzBpB,kBAAea,GAAM,KACnB,MAAMU,iBAAEA,EAAgBC,uBAAEA,GAA2BC,IAErD,MAAO,CACLF,iBAAAA,EACAC,uBAAAA,MAIJE,iBACE,iBAAO1B,KAAK2B,4BAAOD,KAGrBE,iBACE,OAAI5B,KAAK6B,UAAUb,kBACVhB,KAAK8B,cAAcnB,MAGrBX,KAAK+B,cAGdH,eAAgBjB,GACVX,KAAK6B,UAAUb,oBACjBhB,KAAK8B,cAAcnB,MAAQA,GAG7BX,KAAK+B,cAAgBpB,EACrBX,KAAKgC,oBAGPC,sBACE,MAAMC,EAAiBlC,KAAK6B,UAAUZ,WAEtC,MAAO,CACL,wBAAyBjB,KAAKmC,SAC9B,qBAAsBnC,KAAKoC,MAC3B,sBAAuBpC,KAAKoC,OAASpC,KAAK4B,WAC1C,uBAAuBM,MAAAA,SAAAA,EAAgBG,SAAUrC,KAAK4B,WACtD,sBAAsBM,MAAAA,SAAAA,EAAgBI,QAAStC,KAAK4B,YAIxDW,mBACE,MAAO,CACLC,YAAaxC,KAAKyC,MAAQ,EAC1BC,MAAO1C,KAAK2C,UAAY3C,KAAK4C,MAAMC,SAAS7C,KAAK2C,WAAa,GAC9DG,gBAAiB9C,KAAK0C,MAAQ1C,KAAK+C,cAAgB,GACnDC,UAAWhD,KAAKiD,aAAa1B,iBAAmB,kCAAoC,IAIxF2B,2BACE,OAAIlD,KAAK4B,uBAAe5B,KAAamD,OAAO/C,gCAAY,IAC/C,CACLgD,WAAY,UACZC,OAAQrD,KAAKqD,OAAS,KACtBC,mBAAoBtD,KAAKsD,mBAAqB,IAC9CC,WACEvD,KAAK0C,OAAS1C,KAAKwD,SACfC,EAAczD,KAAK+C,eACnB,IAGH,CACLK,WAAY,SACZC,OAAQrD,KAAKqD,OAAS,KACtBC,mBAAoBtD,KAAKsD,mBAAqB,KAIlDI,4BACE,OAAO1D,KAAKmC,UAAY,EAAI,EAG9BwB,cACO3D,KAAKmC,WACRnC,KAAK4B,YAAc5B,KAAK4B,WACxB5B,KAAK6B,UAAUV,cAAcnB,OAIjC4D,kBACE,IAAK5D,KAAK4B,WACR,OAAO,EAKT,MADc,eAAK5B,KAAK0B,2BAAMmC,aAAc,IAC/BC,QAAO,CAACC,EAAgBC,IACnCD,GAzHiB,IAyHPC,EAAKC,SAA8BjE,KAAKkE,kBAAkBF,GAAQA,EAAKG,cAEhF,GAGLzD,wBACE,MAAM0D,EAAWpE,KAAKqD,OAAS,IAAO,GACtC,OAAOe,EAAW,GAAMA,EAAW,GAGrCF,kBAAmBG,GACjB,MAAMC,EAAQC,SAASC,cACvBF,EAAMG,mBAAmBJ,GACzB,MAAMK,EAAOJ,EAAMK,wBAEnB,OAAOD,EAAKE,OAASF,EAAKG,IAG5B7C,oBACEhC,KAAKqD,OAASrD,KAAK4D,YACnB5D,KAAKsD,mBAAqBtD,KAAKU,wBAGjCoE,UACE9E,KAAK4D,YAEL5D,KAAK+E,iBAAmB,IAAIC,kBAAiB,KAC3ChF,KAAKgC,uBAEPhC,KAAK+E,iBAAiBE,QAAQjF,KAAK0B,KAAM,CACvCwD,YAAY,EACZC,WAAW,EACXC,SAAS,IAEPpF,KAAK6B,UAAUb,mBACjBhB,KAAK6B,UAAUR,eAAerB,MAIlCqF,gBACMrF,KAAK+E,kBACP/E,KAAK+E,iBAAiBO,aAEpBtF,KAAK6B,UAAUb,mBACjBhB,KAAK6B,UAAUP,iBAAiBtB,QA9JjBM,KALpBiF,EAAQ,CACPC,KAAM,aACNC,WAAY,CAAEC,OAAAA,GACdC,MAAO,CAAC,YAEWrF,SAAAA,0BC/CNsF,MAAM,isLArBnBC,SAAKD,SAAM,cAAsBE,sBAC/BC,QAAAC,GACEJ,MAAM,uBACNK,iBAAmBzE,yBAClB0E,uBAAOJ,iBACPK,uBAAOL,kBACPM,6BAAeN,+CACAA,8BACfO,SAAUP,2BAEXQ,+BAAqCR,8BAA8BA,eAAavE,qBAAhF,KACEwE,SACEH,MAAM,+BACLW,QAAOT,kBAGAA,EAAI,UADZU,WAEEZ,MAAM,4BACLJ,KAAMM,OACNpD,MAAOoD,oDAEVC,QAAAU,IACKX,aAELY,KACEd,MAAM,4BACLJ,KAAMM,yCACNpD,MAAOoD,oDAKhBC,SAAKH,MAAM,oBAAoBe,IAAI,OAAQJ,QAAOT,oBAChDQ,oFC/BN,MAAeM,EAAoBtG"}