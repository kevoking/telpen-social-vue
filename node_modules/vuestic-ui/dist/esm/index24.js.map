{"version":3,"file":"index24.js","sources":["../../src/components/va-dropdown/VaDropdown.vue","../../src/components/va-dropdown/VaDropdown.vue?vue&type=template&id=6d4e48a8&lang.js","../../src/components/va-dropdown/VaDropdownContent/VaDropdownContent.vue?vue&type=template&id=4b360faf&lang.js","../../src/components/va-dropdown/VaDropdownContent/index.ts","../../src/components/va-dropdown/index.ts"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"va-dropdown\"\r\n    :class=\"classComputed\"\r\n  >\r\n    <div\r\n      class=\"va-dropdown__anchor\"\r\n      @mouseover=\"onMouseOver()\"\r\n      @mouseout=\"onMouseOut()\"\r\n      @click=\"onAnchorClick()\"\r\n      @keyup.enter.stop.prevent=\"onAnchorClick()\"\r\n      ref=\"anchor\"\r\n    >\r\n      <slot name=\"anchor\" />\r\n    </div>\r\n    <template v-if=\"showContent\">\r\n      <div\r\n        class=\"va-dropdown__content-wrapper\"\r\n        @mouseover=\"$props.isContentHoverable && onMouseOver()\"\r\n        @mouseout=\"onMouseOut()\"\r\n        @click.stop=\"onDropdownContentClick()\"\r\n        ref=\"contentWrapper\"\r\n      >\r\n        <div :style=\"$props.keepAnchorWidth ? anchorWidthStyles : ''\">\r\n          <slot />\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { watch, nextTick } from 'vue'\r\nimport { Vue, Options, prop, mixins } from 'vue-class-component'\r\nimport { DebounceLoader } from 'asva-executors'\r\nimport { createPopper, Instance } from '@popperjs/core'\r\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\r\n\r\ntype PopperInstance = Instance | null\r\ntype ClickType = 'anchor-click' | 'dropdown-content-click' | 'click-outside'\r\n\r\nclass DropdownProps {\r\n  debugId = prop<string>({ type: String, default: '' })\r\n  position = prop<string>({ type: String, default: '' })\r\n  hoverOverTimeout = prop<number>({ type: Number, default: 30 })\r\n  hoverOutTimeout = prop<number>({ type: Number, default: 200 })\r\n  boundaryBody = prop<boolean>({ type: Boolean })\r\n  modelValue = prop<boolean>({ type: Boolean, default: false })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  // Makes no sense\r\n  // fixed = prop<boolean>({ type: Boolean })\r\n  // Means dropdown width should be the same as anchor's width.\r\n  keepAnchorWidth = prop<boolean>({ type: Boolean })\r\n  // If set to false - dropdown won't dodge outside container.\r\n  preventOverflow = prop<boolean>({ type: Boolean, default: false })\r\n  closeOnContentClick = prop<boolean>({ type: Boolean, default: true })\r\n  closeOnClickOutside = prop<boolean>({ type: Boolean, default: true })\r\n  closeOnAnchorClick = prop<boolean>({ type: Boolean, default: true })\r\n  isContentHoverable = prop<boolean>({ type: Boolean, default: true })\r\n  offset = prop<number | number[]>({ type: [Array, Number], default: () => [] })\r\n  trigger = prop<string>({\r\n    type: String,\r\n    default: 'click',\r\n    validator: (trigger: string) => ['click', 'hover', 'none'].includes(trigger),\r\n  })\r\n  stateful = prop<boolean>({ type: Boolean, default: true })\r\n}\r\n\r\nconst DropdownPropsMixin = Vue.with(DropdownProps)\r\n\r\n@Options({\r\n  name: 'VaDropdown',\r\n  emits: ['update:modelValue', 'anchor-click', 'click-outside', 'dropdown-content-click'],\r\n})\r\nexport default class VaDropdown extends mixins(\r\n  StatefulMixin,\r\n  DropdownPropsMixin,\r\n) {\r\n  popperInstance: PopperInstance = null\r\n  anchorWidth = 0\r\n  hoverOverDebounceLoader!: DebounceLoader\r\n  hoverOutDebounceLoader!: DebounceLoader\r\n\r\n  get anchorWidthStyles (): { width: string; maxWidth: string } {\r\n    return {\r\n      width: this.anchorWidth + 'px',\r\n      maxWidth: this.anchorWidth + 'px',\r\n    }\r\n  }\r\n\r\n  get classComputed () {\r\n    return {\r\n      'va-dropdown--disabled': this.$props.disabled,\r\n    }\r\n  }\r\n\r\n  get showContent (): boolean {\r\n    return this.valueComputed\r\n  }\r\n\r\n  handlePopperInstance (): void {\r\n    if (this.popperInstance) {\r\n      this.removePopper()\r\n    }\r\n\r\n    if (!this.showContent) {\r\n      return\r\n    }\r\n\r\n    this.updateAnchorWidth()\r\n\r\n    nextTick(() => {\r\n      this.initPopper()\r\n    })\r\n  }\r\n\r\n  handleClick (emitName: ClickType, toClose: boolean): void {\r\n    this.$emit(emitName)\r\n    if (toClose) {\r\n      this.hide()\r\n    }\r\n  }\r\n\r\n  onDropdownContentClick (): void {\r\n    this.handleClick('dropdown-content-click', this.closeOnContentClick)\r\n  }\r\n\r\n  onClickOutside (): void {\r\n    this.handleClick('click-outside', this.closeOnClickOutside)\r\n  }\r\n\r\n  onAnchorClick (): void {\r\n    if (this.$props.disabled) {\r\n      return\r\n    }\r\n    if (this.$props.trigger === 'click') {\r\n      if (this.valueComputed) {\r\n        this.handleClick('anchor-click', this.closeOnAnchorClick)\r\n        return\r\n      }\r\n      this.valueComputed = true\r\n    }\r\n    this.$emit('anchor-click')\r\n  }\r\n\r\n  // Kinda complex logic here.\r\n  // We want to achieve 2 things:\r\n  // * Fast mouse-over shouldn't trigger dropdown.\r\n  // * Dropdown shouldn't close when you move mouse from anchor to content (even with offset).\r\n  onMouseOver (): void {\r\n    if (this.$props.disabled || this.$props.trigger !== 'hover') {\r\n      return\r\n    }\r\n    if (!this.valueComputed) {\r\n      this.hoverOverDebounceLoader.run()\r\n    }\r\n    this.hoverOutDebounceLoader.reset()\r\n  }\r\n\r\n  onMouseOut (): void {\r\n    if (this.$props.trigger !== 'hover') {\r\n      return\r\n    }\r\n    if (this.isContentHoverable) {\r\n      this.hoverOutDebounceLoader.run()\r\n    } else {\r\n      this.valueComputed = false\r\n    }\r\n    this.hoverOverDebounceLoader.reset()\r\n  }\r\n\r\n  registerClickOutsideListener (): void {\r\n    document.addEventListener('click', event => this.handleDocumentClick(event), false)\r\n  }\r\n\r\n  unregisterClickOutsideListener (): void {\r\n    document.removeEventListener('click', event => this.handleDocumentClick(event), false)\r\n  }\r\n\r\n  handleDocumentClick (event: any): void {\r\n    let el = event.target\r\n    const clickedElements = [] // Array because dropdowns can be nested.\r\n    // TODO Make DOM walk-over global, so that each dropdown doesn't have to do it.\r\n    while (el) {\r\n      clickedElements.push(el)\r\n      el = el.parentNode\r\n    }\r\n    const isCurrentDropdownClicked = clickedElements.includes(this.$refs.anchor) || clickedElements.includes(this.$refs.contentWrapper)\r\n    if (isCurrentDropdownClicked) {\r\n      return\r\n    }\r\n    if (this.showContent) {\r\n      this.onClickOutside()\r\n    }\r\n  }\r\n\r\n  updateAnchorWidth (): void {\r\n    if (this.keepAnchorWidth) {\r\n      this.anchorWidth = (this as any).$refs.anchor.offsetWidth\r\n    }\r\n    if (this.popperInstance) {\r\n      this.popperInstance.forceUpdate()\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  hide (): void {\r\n    this.valueComputed = false\r\n  }\r\n\r\n  initPopper (): void {\r\n    const options: any = {\r\n      placement: this.position || 'bottom',\r\n      modifiers: [],\r\n      // strategy: this.fixed ? 'fixed' : undefined,\r\n      onFirstUpdate: () => {\r\n        this.valueComputed = true\r\n      },\r\n    }\r\n\r\n    const preventOverflow: any = {\r\n      name: 'preventOverflow',\r\n      options: {},\r\n    }\r\n    if (this.preventOverflow) {\r\n      options.modifiers.push(preventOverflow)\r\n    }\r\n    if (this.boundaryBody) {\r\n      preventOverflow.options.boundary = document.body\r\n    }\r\n\r\n    if (this.offset) {\r\n      options.modifiers.push({\r\n        name: 'offset',\r\n        options: {\r\n          offset: Array.isArray(this.offset) ? this.offset : [this.offset],\r\n        },\r\n      })\r\n      // options.modifiers.keepTogether = { enabled: false }\r\n      // options.modifiers.arrow = { enabled: false }\r\n    }\r\n\r\n    this.popperInstance = createPopper(\r\n      this.$refs.anchor as Element,\r\n      this.$refs.contentWrapper as HTMLElement,\r\n      options,\r\n    )\r\n  }\r\n\r\n  removePopper (): void {\r\n    this.valueComputed = false\r\n\r\n    if (!this.popperInstance) {\r\n      return\r\n    }\r\n    this.popperInstance.destroy()\r\n    this.popperInstance = null\r\n  }\r\n\r\n  created (): void {\r\n    watch(() => this.showContent, () => {\r\n      this.handlePopperInstance()\r\n    })\r\n    this.hoverOverDebounceLoader = new DebounceLoader(\r\n      async () => {\r\n        this.valueComputed = true\r\n      },\r\n      this.hoverOverTimeout,\r\n    )\r\n    this.hoverOutDebounceLoader = new DebounceLoader(\r\n      async () => {\r\n        this.valueComputed = false\r\n      },\r\n      this.hoverOutTimeout,\r\n    )\r\n    // nuxt fix\r\n    if ((this as any).$isServer) {\r\n      return\r\n    }\r\n    this.registerClickOutsideListener()\r\n  }\r\n\r\n  mounted (): void {\r\n    this.handlePopperInstance()\r\n  }\r\n\r\n  beforeUnmount (): void {\r\n    this.unregisterClickOutsideListener()\r\n    this.removePopper()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../styles/resources/resources';\r\n@import \"variables\";\r\n\r\n.va-dropdown {\r\n  /* Solved the alignment problem (if we try to align inline and block elements) */\r\n  line-height: var(--va-dropdown-line-height);\r\n\r\n  &--disabled {\r\n    @include va-disabled;\r\n  }\r\n\r\n  &__content-wrapper {\r\n    /* overflow: hidden; */\r\n    z-index: var(--va-dropdown-content-wrapper-z-index);\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-dropdown\"\r\n    :class=\"classComputed\"\r\n  >\r\n    <div\r\n      class=\"va-dropdown__anchor\"\r\n      @mouseover=\"onMouseOver()\"\r\n      @mouseout=\"onMouseOut()\"\r\n      @click=\"onAnchorClick()\"\r\n      @keyup.enter.stop.prevent=\"onAnchorClick()\"\r\n      ref=\"anchor\"\r\n    >\r\n      <slot name=\"anchor\" />\r\n    </div>\r\n    <template v-if=\"showContent\">\r\n      <div\r\n        class=\"va-dropdown__content-wrapper\"\r\n        @mouseover=\"$props.isContentHoverable && onMouseOver()\"\r\n        @mouseout=\"onMouseOut()\"\r\n        @click.stop=\"onDropdownContentClick()\"\r\n        ref=\"contentWrapper\"\r\n      >\r\n        <div :style=\"$props.keepAnchorWidth ? anchorWidthStyles : ''\">\r\n          <slot />\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { watch, nextTick } from 'vue'\r\nimport { Vue, Options, prop, mixins } from 'vue-class-component'\r\nimport { DebounceLoader } from 'asva-executors'\r\nimport { createPopper, Instance } from '@popperjs/core'\r\nimport { StatefulMixin } from '../../mixins/StatefulMixin/StatefulMixin'\r\n\r\ntype PopperInstance = Instance | null\r\ntype ClickType = 'anchor-click' | 'dropdown-content-click' | 'click-outside'\r\n\r\nclass DropdownProps {\r\n  debugId = prop<string>({ type: String, default: '' })\r\n  position = prop<string>({ type: String, default: '' })\r\n  hoverOverTimeout = prop<number>({ type: Number, default: 30 })\r\n  hoverOutTimeout = prop<number>({ type: Number, default: 200 })\r\n  boundaryBody = prop<boolean>({ type: Boolean })\r\n  modelValue = prop<boolean>({ type: Boolean, default: false })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  // Makes no sense\r\n  // fixed = prop<boolean>({ type: Boolean })\r\n  // Means dropdown width should be the same as anchor's width.\r\n  keepAnchorWidth = prop<boolean>({ type: Boolean })\r\n  // If set to false - dropdown won't dodge outside container.\r\n  preventOverflow = prop<boolean>({ type: Boolean, default: false })\r\n  closeOnContentClick = prop<boolean>({ type: Boolean, default: true })\r\n  closeOnClickOutside = prop<boolean>({ type: Boolean, default: true })\r\n  closeOnAnchorClick = prop<boolean>({ type: Boolean, default: true })\r\n  isContentHoverable = prop<boolean>({ type: Boolean, default: true })\r\n  offset = prop<number | number[]>({ type: [Array, Number], default: () => [] })\r\n  trigger = prop<string>({\r\n    type: String,\r\n    default: 'click',\r\n    validator: (trigger: string) => ['click', 'hover', 'none'].includes(trigger),\r\n  })\r\n  stateful = prop<boolean>({ type: Boolean, default: true })\r\n}\r\n\r\nconst DropdownPropsMixin = Vue.with(DropdownProps)\r\n\r\n@Options({\r\n  name: 'VaDropdown',\r\n  emits: ['update:modelValue', 'anchor-click', 'click-outside', 'dropdown-content-click'],\r\n})\r\nexport default class VaDropdown extends mixins(\r\n  StatefulMixin,\r\n  DropdownPropsMixin,\r\n) {\r\n  popperInstance: PopperInstance = null\r\n  anchorWidth = 0\r\n  hoverOverDebounceLoader!: DebounceLoader\r\n  hoverOutDebounceLoader!: DebounceLoader\r\n\r\n  get anchorWidthStyles (): { width: string; maxWidth: string } {\r\n    return {\r\n      width: this.anchorWidth + 'px',\r\n      maxWidth: this.anchorWidth + 'px',\r\n    }\r\n  }\r\n\r\n  get classComputed () {\r\n    return {\r\n      'va-dropdown--disabled': this.$props.disabled,\r\n    }\r\n  }\r\n\r\n  get showContent (): boolean {\r\n    return this.valueComputed\r\n  }\r\n\r\n  handlePopperInstance (): void {\r\n    if (this.popperInstance) {\r\n      this.removePopper()\r\n    }\r\n\r\n    if (!this.showContent) {\r\n      return\r\n    }\r\n\r\n    this.updateAnchorWidth()\r\n\r\n    nextTick(() => {\r\n      this.initPopper()\r\n    })\r\n  }\r\n\r\n  handleClick (emitName: ClickType, toClose: boolean): void {\r\n    this.$emit(emitName)\r\n    if (toClose) {\r\n      this.hide()\r\n    }\r\n  }\r\n\r\n  onDropdownContentClick (): void {\r\n    this.handleClick('dropdown-content-click', this.closeOnContentClick)\r\n  }\r\n\r\n  onClickOutside (): void {\r\n    this.handleClick('click-outside', this.closeOnClickOutside)\r\n  }\r\n\r\n  onAnchorClick (): void {\r\n    if (this.$props.disabled) {\r\n      return\r\n    }\r\n    if (this.$props.trigger === 'click') {\r\n      if (this.valueComputed) {\r\n        this.handleClick('anchor-click', this.closeOnAnchorClick)\r\n        return\r\n      }\r\n      this.valueComputed = true\r\n    }\r\n    this.$emit('anchor-click')\r\n  }\r\n\r\n  // Kinda complex logic here.\r\n  // We want to achieve 2 things:\r\n  // * Fast mouse-over shouldn't trigger dropdown.\r\n  // * Dropdown shouldn't close when you move mouse from anchor to content (even with offset).\r\n  onMouseOver (): void {\r\n    if (this.$props.disabled || this.$props.trigger !== 'hover') {\r\n      return\r\n    }\r\n    if (!this.valueComputed) {\r\n      this.hoverOverDebounceLoader.run()\r\n    }\r\n    this.hoverOutDebounceLoader.reset()\r\n  }\r\n\r\n  onMouseOut (): void {\r\n    if (this.$props.trigger !== 'hover') {\r\n      return\r\n    }\r\n    if (this.isContentHoverable) {\r\n      this.hoverOutDebounceLoader.run()\r\n    } else {\r\n      this.valueComputed = false\r\n    }\r\n    this.hoverOverDebounceLoader.reset()\r\n  }\r\n\r\n  registerClickOutsideListener (): void {\r\n    document.addEventListener('click', event => this.handleDocumentClick(event), false)\r\n  }\r\n\r\n  unregisterClickOutsideListener (): void {\r\n    document.removeEventListener('click', event => this.handleDocumentClick(event), false)\r\n  }\r\n\r\n  handleDocumentClick (event: any): void {\r\n    let el = event.target\r\n    const clickedElements = [] // Array because dropdowns can be nested.\r\n    // TODO Make DOM walk-over global, so that each dropdown doesn't have to do it.\r\n    while (el) {\r\n      clickedElements.push(el)\r\n      el = el.parentNode\r\n    }\r\n    const isCurrentDropdownClicked = clickedElements.includes(this.$refs.anchor) || clickedElements.includes(this.$refs.contentWrapper)\r\n    if (isCurrentDropdownClicked) {\r\n      return\r\n    }\r\n    if (this.showContent) {\r\n      this.onClickOutside()\r\n    }\r\n  }\r\n\r\n  updateAnchorWidth (): void {\r\n    if (this.keepAnchorWidth) {\r\n      this.anchorWidth = (this as any).$refs.anchor.offsetWidth\r\n    }\r\n    if (this.popperInstance) {\r\n      this.popperInstance.forceUpdate()\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  hide (): void {\r\n    this.valueComputed = false\r\n  }\r\n\r\n  initPopper (): void {\r\n    const options: any = {\r\n      placement: this.position || 'bottom',\r\n      modifiers: [],\r\n      // strategy: this.fixed ? 'fixed' : undefined,\r\n      onFirstUpdate: () => {\r\n        this.valueComputed = true\r\n      },\r\n    }\r\n\r\n    const preventOverflow: any = {\r\n      name: 'preventOverflow',\r\n      options: {},\r\n    }\r\n    if (this.preventOverflow) {\r\n      options.modifiers.push(preventOverflow)\r\n    }\r\n    if (this.boundaryBody) {\r\n      preventOverflow.options.boundary = document.body\r\n    }\r\n\r\n    if (this.offset) {\r\n      options.modifiers.push({\r\n        name: 'offset',\r\n        options: {\r\n          offset: Array.isArray(this.offset) ? this.offset : [this.offset],\r\n        },\r\n      })\r\n      // options.modifiers.keepTogether = { enabled: false }\r\n      // options.modifiers.arrow = { enabled: false }\r\n    }\r\n\r\n    this.popperInstance = createPopper(\r\n      this.$refs.anchor as Element,\r\n      this.$refs.contentWrapper as HTMLElement,\r\n      options,\r\n    )\r\n  }\r\n\r\n  removePopper (): void {\r\n    this.valueComputed = false\r\n\r\n    if (!this.popperInstance) {\r\n      return\r\n    }\r\n    this.popperInstance.destroy()\r\n    this.popperInstance = null\r\n  }\r\n\r\n  created (): void {\r\n    watch(() => this.showContent, () => {\r\n      this.handlePopperInstance()\r\n    })\r\n    this.hoverOverDebounceLoader = new DebounceLoader(\r\n      async () => {\r\n        this.valueComputed = true\r\n      },\r\n      this.hoverOverTimeout,\r\n    )\r\n    this.hoverOutDebounceLoader = new DebounceLoader(\r\n      async () => {\r\n        this.valueComputed = false\r\n      },\r\n      this.hoverOutTimeout,\r\n    )\r\n    // nuxt fix\r\n    if ((this as any).$isServer) {\r\n      return\r\n    }\r\n    this.registerClickOutsideListener()\r\n  }\r\n\r\n  mounted (): void {\r\n    this.handlePopperInstance()\r\n  }\r\n\r\n  beforeUnmount (): void {\r\n    this.unregisterClickOutsideListener()\r\n    this.removePopper()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../styles/resources/resources';\r\n@import \"variables\";\r\n\r\n.va-dropdown {\r\n  /* Solved the alignment problem (if we try to align inline and block elements) */\r\n  line-height: var(--va-dropdown-line-height);\r\n\r\n  &--disabled {\r\n    @include va-disabled;\r\n  }\r\n\r\n  &__content-wrapper {\r\n    /* overflow: hidden; */\r\n    z-index: var(--va-dropdown-content-wrapper-z-index);\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-dropdown__content\">\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\">\r\n  @import \"variables\";\r\n\r\n  .va-dropdown {\r\n    &__content {\r\n      background: var(--va-dropdown-content-background);\r\n      padding: var(--va-dropdown-content-padding);\r\n      box-shadow: var(--va-dropdown-content-box-shadow);\r\n      border-radius: var(--va-dropdown-content-border-radius);\r\n    }\r\n  }\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaDropdownContent from './VaDropdownContent.vue'\r\n\r\nexport default withConfigTransport(VaDropdownContent)\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaDropdown from './VaDropdown.vue'\r\nexport { default as VaDropdownContent } from './VaDropdownContent'\r\n\r\nexport default withConfigTransport(VaDropdown)\r\n"],"names":["DropdownPropsMixin","Vue","with","DropdownProps","constructor","this","prop","type","String","default","Number","Boolean","Array","validator","trigger","includes","VaDropdown","mixins","StatefulMixin","anchorWidthStyles","width","anchorWidth","maxWidth","classComputed","$props","disabled","showContent","valueComputed","handlePopperInstance","popperInstance","removePopper","updateAnchorWidth","nextTick","initPopper","handleClick","emitName","toClose","$emit","hide","onDropdownContentClick","closeOnContentClick","onClickOutside","closeOnClickOutside","onAnchorClick","closeOnAnchorClick","onMouseOver","hoverOverDebounceLoader","run","hoverOutDebounceLoader","reset","onMouseOut","isContentHoverable","registerClickOutsideListener","document","addEventListener","event","handleDocumentClick","unregisterClickOutsideListener","removeEventListener","el","target","clickedElements","push","parentNode","$refs","anchor","contentWrapper","keepAnchorWidth","offsetWidth","forceUpdate","options","placement","position","modifiers","onFirstUpdate","preventOverflow","name","boundaryBody","boundary","body","offset","isArray","createPopper","destroy","created","watch","DebounceLoader","async","hoverOverTimeout","hoverOutTimeout","$isServer","mounted","beforeUnmount","Options","emits","_createElementBlock","class","_ctx","_createElementVNode","onMouseover","onMouseout","onClick","onKeyup","ref","_renderSlot","style","_hoisted_1","withConfigTransport"],"mappings":"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"}