{"version":3,"file":"index30.js","sources":["../../src/components/va-input/helpers/InputMixin.ts","../../src/components/va-input/helpers/TextareaMixin.ts","../../src/components/va-input/VaInput.vue","../../src/components/va-input/VaInput.vue?vue&type=template&id=db73a230&lang.js","../../src/components/va-input/index.ts"],"sourcesContent":["import Cleave from 'cleave.js'\r\nimport { watch } from 'vue'\r\nimport { mixins, prop, setup, Vue } from 'vue-class-component'\r\nimport { CleaveOptions } from 'cleave.js/options'\r\nimport { StatefulMixin } from '../../../mixins/StatefulMixin/StatefulMixin'\r\nimport { FormComponentMixin } from '../../../mixins/FormComponent/FormComponentMixin'\r\n\r\nconst DEFAULT_MASK_TOKENS: Record<string, Record<string, unknown>> = {\r\n  creditCard: {\r\n    creditCard: true,\r\n  },\r\n  date: {\r\n    date: true,\r\n    datePattern: ['d', 'm', 'Y'],\r\n  },\r\n  time: {\r\n    time: true,\r\n    timePattern: ['h', 'm'],\r\n    timeFormat: '24',\r\n  },\r\n  numeral: {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n  },\r\n}\r\n\r\nclass Props {\r\n  // Mask option list - https://github.com/nosir/cleave.js/blob/master/doc/options.md#blocks\r\n  mask = prop<string | CleaveOptions>({\r\n    type: [String, Object],\r\n    default: () => ({}),\r\n  })\r\n\r\n  returnRaw = ({\r\n    type: Boolean,\r\n    default: true,\r\n  })\r\n\r\n  clearable = prop({ type: Boolean, default: false })\r\n  clearableIcon = prop<string>({ type: String, default: 'highlight_off' })\r\n  loading = prop({ type: Boolean, default: false })\r\n  canBeFocused = prop({ type: Boolean, default: true })\r\n  focused = prop({ type: Boolean, default: undefined })\r\n  modelValue = prop<string | number>({ type: [String, Number], default: '' })\r\n}\r\n\r\nconst PropsMixin = Vue.with(Props)\r\n\r\nexport class InputMixin extends mixins(FormComponentMixin, StatefulMixin, PropsMixin) {\r\n  inputElement: Cleave | null = null\r\n  eventListeners: any = {}\r\n  isFocused = false\r\n\r\n  get isFocusedComputed () {\r\n    if (this.$props.focused === undefined) {\r\n      return this.isFocused\r\n    }\r\n\r\n    return this.$props.focused\r\n  }\r\n\r\n  set isFocusedComputed (value: boolean) {\r\n    if (this.$props.focused === undefined) {\r\n      this.isFocused = value\r\n    }\r\n\r\n    this.$emit('update:focused', value)\r\n  }\r\n\r\n  context = setup(() => {\r\n    watch(() => this.$props.mask, (mask: string | CleaveOptions) => {\r\n      this.destroyCleaveInstance()\r\n      this.inputElement = new Cleave(this.$refs.input as HTMLInputElement, this.getMask(mask))\r\n      this.inputElement.setRawValue(this.modelValue)\r\n    })\r\n\r\n    return {}\r\n  })\r\n\r\n  get computedValue (): string {\r\n    if (!this.inputElement) {\r\n      return this.modelValue\r\n    }\r\n    if (this.returnRaw && this.modelValue === this.inputElement.getRawValue()) {\r\n      return this.inputElement.getFormattedValue()\r\n    }\r\n    return this.modelValue\r\n  }\r\n\r\n  get showIcon (): boolean {\r\n    return this.success || this.computedError || this.canBeCleared || this.loading\r\n  }\r\n\r\n  get canBeCleared (): boolean {\r\n    return this.hasContent && this.clearable\r\n  }\r\n\r\n  get hasContent (): boolean {\r\n    return ![null, undefined, ''].includes(this.modelValue)\r\n  }\r\n\r\n  onInput (event: any): void {\r\n    if (typeof this.mask !== 'string' && !Object.keys(this.mask).length) {\r\n      this.$emit('update:modelValue', event.target.value)\r\n      return\r\n    }\r\n    if (this.inputElement) {\r\n      this.inputElement.setRawValue(event.target.value)\r\n      if (this.returnRaw) {\r\n        this.$emit('update:modelValue', this.inputElement.getRawValue())\r\n        return\r\n      }\r\n    }\r\n    this.$emit('update:modelValue', event.target.value)\r\n  }\r\n\r\n  onChange (event: any): void {\r\n    if (typeof this.mask !== 'string' && !Object.keys(this.mask).length) {\r\n      this.$emit('change', event.target.value)\r\n      return\r\n    }\r\n    if (this.inputElement) {\r\n      this.inputElement.setRawValue(event.target.value)\r\n      if (this.returnRaw) {\r\n        this.$emit('change', this.inputElement.getRawValue())\r\n        return\r\n      }\r\n    }\r\n    this.$emit('change', event.target.value)\r\n  }\r\n\r\n  onClick (event: Event): void {\r\n    this.$emit('click', event)\r\n  }\r\n\r\n  onPrependClick (event: Event): void {\r\n    this.$emit('click-prepend', event)\r\n  }\r\n\r\n  onPrependInnerClick (event: Event): void {\r\n    this.$emit('click-prepend-inner', event)\r\n  }\r\n\r\n  onAppendClick (event: Event): void {\r\n    this.$emit('click-append', event)\r\n  }\r\n\r\n  onAppendInnerClick (event: Event): void {\r\n    this.$emit('click-append-inner', event)\r\n  }\r\n\r\n  onFocus (event: Event): void {\r\n    if (this.canBeFocused) {\r\n      this.isFocusedComputed = true\r\n    }\r\n\r\n    this.$emit('focus', event)\r\n  }\r\n\r\n  onBlur (event: Event): void {\r\n    this.isFocusedComputed = false\r\n    this.ValidateMixin_onBlur()\r\n    this.$emit('blur', event)\r\n  }\r\n\r\n  onKeyup (event: Event): void {\r\n    this.$emit('keyup', event)\r\n  }\r\n\r\n  onKeydown (event: Event): void {\r\n    this.$emit('keydown', event)\r\n  }\r\n\r\n  getMask (mask: CleaveOptions | string) {\r\n    if (typeof mask === 'string') {\r\n      return DEFAULT_MASK_TOKENS[mask] ? { ...DEFAULT_MASK_TOKENS[mask] } : {}\r\n    }\r\n    return { ...mask }\r\n  }\r\n\r\n  destroyCleaveInstance () {\r\n    if (this.inputElement) {\r\n      this.inputElement.destroy()\r\n    }\r\n  }\r\n\r\n  initInput () {\r\n    if (this.$refs.input) {\r\n      this.inputElement = new Cleave(this.$refs.input as HTMLInputElement, this.getMask(this.mask))\r\n    }\r\n    this.setEventListeners()\r\n  }\r\n\r\n  setEventListeners () {\r\n    this.eventListeners = {\r\n      input: this.onInput,\r\n      change: this.onChange,\r\n      click: this.onClick,\r\n      focus: this.onFocus,\r\n      blur: this.onBlur,\r\n      keyup: this.onKeyup,\r\n      keydown: this.onKeydown,\r\n    }\r\n  }\r\n\r\n  mounted () {\r\n    this.initInput()\r\n  }\r\n\r\n  /**\r\n   * Free up memory\r\n   */\r\n  beforeUnmount () {\r\n    this.destroyCleaveInstance()\r\n  }\r\n}\r\n","import { watch } from 'vue'\r\nimport { mixins, prop, Vue, setup } from 'vue-class-component'\r\nimport calculateNodeHeight from '../calculateNodeHeight'\r\nimport { warn } from '../../../services/utils'\r\nimport { StatefulMixin } from '../../../mixins/StatefulMixin/StatefulMixin'\r\n\r\nclass Props {\r\n  // autosize = prop<boolean>({ type: Boolean, default: false })\r\n  // minRows = prop<number>({\r\n  //   type: Number,\r\n  //   default: null,\r\n  //   validator: (val: number) => {\r\n  //     if (!(val > 0 && (val | 0) === val)) {\r\n  //       return warn(`\\`minRows\\` must be a positive integer greater than 0, but ${val} is provided`)\r\n  //     }\r\n  //     return true\r\n  //   },\r\n  // })\r\n\r\n  // maxRows = prop<number>({\r\n  //   type: Number,\r\n  //   validator: (val: number) => {\r\n  //     if (!(val > 0 && (val | 0) === val)) {\r\n  //       return warn(`\\`minRows\\` must be a positive integer greater than 0, but ${val} is provided`)\r\n  //     }\r\n  //     return true\r\n  //   },\r\n  //   default: null,\r\n  // })\r\n\r\n  type = prop<string>({ type: String, default: 'text' })\r\n  label = prop<string>({ type: String, default: '' })\r\n}\r\n\r\nconst PropsMixin = Vue.with(Props)\r\n\r\nexport class TextareaMixin extends mixins(StatefulMixin, PropsMixin) {\r\n  context = setup(() => {\r\n    // watch(() => this.$props.modelValue, () => {\r\n    //   // only for textarea\r\n    //   if (this.isTextarea) {\r\n    //     this.adjustHeight()\r\n    //   }\r\n    // })\r\n\r\n    return {}\r\n  })\r\n\r\n  get isTextarea (): boolean {\r\n    return this.type === 'textarea'\r\n  }\r\n\r\n  adjustHeight (): void {\r\n    // TODO: Implement this later with composition api\r\n    // if (!this.autosize || !this.isTextarea) {\r\n    //   return\r\n    // }\r\n\r\n    // const minRows = this.minRows || 1\r\n    // const maxRows = this.maxRows || Number.MAX_SAFE_INTEGER\r\n    // const textareaStyles = calculateNodeHeight(this.$refs.textarea, false, minRows, maxRows)\r\n\r\n    // // We modify DOM directly instead of using reactivity because the whole adjustHeight method takes place\r\n    // // each time the value of textarea is modified, so there's no real need in an additional layer of reactivity.\r\n    // // The operation is basically reactive though implicitly.\r\n    // Object.assign((this as any).$refs.textarea.style, textareaStyles)\r\n  }\r\n\r\n  // mounted (): void {\r\n  //   this.adjustHeight()\r\n  // }\r\n}\r\n","<template>\r\n  <va-input-wrapper\r\n    class=\"va-input\"\r\n    :class=\"wrapperClass\"\r\n    :disabled=\"disabled\"\r\n    :success=\"success\"\r\n    :messages=\"messages\"\r\n    :error=\"computedError\"\r\n    :error-messages=\"computedErrorMessages\"\r\n    :error-count=\"errorCount\"\r\n    @click:prepend=\"onPrependClick\"\r\n    @click:append=\"onAppendClick\"\r\n    @click=\"focus\"\r\n  >\r\n    <template\r\n      v-if=\"$slots.prepend\"\r\n      #prepend\r\n    >\r\n      <slot name=\"prepend\" />\r\n    </template>\r\n\r\n    <div\r\n      class=\"va-input__container\"\r\n      ref=\"container\"\r\n      :style=\"computedBorderColorStyle\"\r\n    >\r\n      <div\r\n        v-if=\"$slots.prependInner\"\r\n        class=\"va-input__prepend-inner\"\r\n        @click=\"onPrependInnerClick\"\r\n      >\r\n        <slot name=\"prependInner\" />\r\n      </div>\r\n\r\n      <div\r\n        class=\"va-input__content-wrapper\"\r\n        @click=\"focus()\"\r\n      >\r\n        <div class=\"va-input__content\">\r\n          <label\r\n            aria-hidden=\"true\"\r\n            class=\"va-input__label\"\r\n            :style=\"labelStyle\"\r\n          >\r\n            {{ label }}\r\n          </label>\r\n\r\n          <div\r\n            v-if=\"$slots.content\"\r\n            class=\"va-input__content__input\"\r\n          >\r\n            <slot\r\n              name=\"content\"\r\n              v-bind=\"{ value: computedValue, focus }\"\r\n            />\r\n          </div>\r\n          <textarea\r\n            v-else-if=\"isTextarea\"\r\n            v-bind=\"computedInputAttributes\"\r\n            ref=\"textarea\"\r\n            class=\"va-input__content__input\"\r\n            :tabindex=\"tabindex\"\r\n            v-on=\"eventListeners\"\r\n          />\r\n          <input\r\n            v-else\r\n            v-bind=\"computedInputAttributes\"\r\n            ref=\"input\"\r\n            class=\"va-input__content__input\"\r\n            v-on=\"eventListeners\"\r\n          >\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        v-if=\"showIcon\"\r\n        class=\"va-input__icons\"\r\n      >\r\n        <va-icon\r\n          v-if=\"success\"\r\n          color=\"success\"\r\n          name=\"check_circle\"\r\n          size=\"small\"\r\n        />\r\n        <va-icon\r\n          v-if=\"computedError\"\r\n          color=\"danger\"\r\n          name=\"warning\"\r\n          size=\"small\"\r\n        />\r\n        <va-icon\r\n          v-if=\"canBeCleared\"\r\n          :name=\"clearableIcon\"\r\n          size=\"small\"\r\n          :color=\"clearIconColor\"\r\n          @click.stop=\"reset()\"\r\n        />\r\n        <va-icon\r\n          v-if=\"loading\"\r\n          name=\"loop\"\r\n          size=\"small\"\r\n          spin=\"counter-clockwise\"\r\n          :color=\"colorComputed\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        v-if=\"$slots.appendInner\"\r\n        class=\"va-input__append-inner\"\r\n        @click=\"onAppendInnerClick\"\r\n      >\r\n        <slot name=\"appendInner\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"bordered\"\r\n      class=\"va-input_bordered__border\"\r\n      :style=\"computedBorderColorStyle\"\r\n    />\r\n\r\n    <template\r\n      v-if=\"$slots.append\"\r\n      #append\r\n    >\r\n      <slot name=\"append\" />\r\n    </template>\r\n  </va-input-wrapper>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, mixins, prop, Vue } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport VaInputWrapper from '../va-input/VaInputWrapper'\r\nimport VaIcon from '../va-icon'\r\n\r\nimport { InputMixin } from './helpers/InputMixin'\r\nimport { TextareaMixin } from './helpers/TextareaMixin'\r\n\r\nconst InputProps = Vue.with(class InputProps {\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n  placeholder = prop<string>({ type: String, default: '' })\r\n  clearable = prop<boolean>({ type: Boolean, default: false })\r\n  tabindex = prop<number>({ type: Number, default: 0 })\r\n  outline = prop({ type: Boolean, default: false })\r\n  bordered = prop({ type: Boolean, default: false })\r\n})\r\n\r\n@Options({\r\n  name: 'VaInput',\r\n  components: { VaInputWrapper, VaIcon },\r\n  emits: ['update:modelValue', 'update:focused', 'change', 'click-prepend', 'click-prepend-inner',\r\n    'click-append', 'click-append-inner', 'focus', 'blur', 'keyup', 'keydown', 'click', 'cleared'],\r\n})\r\nexport default class VaInput extends mixins(\r\n  ColorMixin,\r\n  InputMixin,\r\n  TextareaMixin,\r\n  InputProps,\r\n) {\r\n  get labelStyle (): any {\r\n    return { color: this.colorComputed }\r\n  }\r\n\r\n  stateClasses (baseclass: string) {\r\n    const classes = [baseclass]\r\n\r\n    if (this.isTextarea) {\r\n      classes.push(`${baseclass}_textarea`)\r\n    }\r\n    if (this.isFocusedComputed) {\r\n      classes.push(`${baseclass}_focused`)\r\n    }\r\n\r\n    if (this.label) {\r\n      classes.push(`${baseclass}_labeled`)\r\n    }\r\n\r\n    if (this.$props.outline) {\r\n      classes.push(`${baseclass}_outline`)\r\n    } else if (this.$props.bordered) {\r\n      classes.push(`${baseclass}_bordered`)\r\n    } else {\r\n      classes.push(`${baseclass}_solid`)\r\n    }\r\n\r\n    if (this.$props.success) {\r\n      classes.push(`${baseclass}_success`)\r\n    }\r\n    if (this.$props.error || this.computedError) {\r\n      classes.push(`${baseclass}_error`)\r\n    }\r\n\r\n    if (this.$props.disabled) {\r\n      classes.push(`${baseclass}_disabled`)\r\n    }\r\n\r\n    return classes\r\n  }\r\n\r\n  get wrapperClass () {\r\n    return this.stateClasses('va-input')\r\n  }\r\n\r\n  get computedBorderColorStyle () {\r\n    if (this.isFocusedComputed) {\r\n      return {\r\n        'border-color': this.colorComputed,\r\n      }\r\n    }\r\n\r\n    return {}\r\n  }\r\n\r\n  get clearIconColor () {\r\n    if (this.isFocusedComputed) {\r\n      return this.colorComputed\r\n    }\r\n\r\n    if (this.computedError) {\r\n      return 'danger'\r\n    }\r\n\r\n    if (this.success) {\r\n      return 'success'\r\n    }\r\n\r\n    return 'grey'\r\n  }\r\n\r\n  get computedInputAttributes (): Record<string, any> {\r\n    return {\r\n      ...this.$attrs,\r\n      id: this.id,\r\n      name: this.name,\r\n      type: this.type,\r\n      placeholder: this.placeholder,\r\n      disabled: this.disabled,\r\n      readonly: this.readonly,\r\n      tabindex: this.tabindex,\r\n      // Do not inherit style from $attrs\r\n      style: this.$attrs.inputStyle,\r\n      // Do not inherit class from $attrs\r\n      class: this.$attrs.inputClass,\r\n      value: this.computedValue,\r\n      'aria-label': this.label,\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  focus (): void {\r\n    if (this.$refs.input) {\r\n      (this as any).$refs.input.focus({ preventScroll: true })\r\n    } else if (this.$refs.textarea) {\r\n      (this as any).$refs.textarea.focus()\r\n    } else if (!this.$slots.content) {\r\n      throw new Error('There is no DOM element to focus')\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  blur (): void {\r\n    if (this.$refs.input) {\r\n      (this as any).$refs.input.blur()\r\n    } else if (this.$refs.textarea) {\r\n      (this as any).$refs.textarea.blur()\r\n    } else if (!this.$slots.content) {\r\n      throw new Error('There is no DOM element to blur')\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  reset (): void {\r\n    this.$emit('update:modelValue', '')\r\n    this.$emit('cleared')\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n@import '../../styles/resources/resources';\r\n@import 'variables';\r\n\r\n.va-input {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  color: var(--va-input-text-color);\r\n  cursor: var(--va-input-cursor);\r\n\r\n  &_disabled {\r\n    @include va-disabled;\r\n  }\r\n\r\n  &__container {\r\n    display: flex;\r\n    position: relative;\r\n    align-items: center;\r\n    width: 100%;\r\n    min-height: var(--va-input-min-height);\r\n    border-color: var(--va-input-color);\r\n    border-style: solid;\r\n    border-width: var(--va-input-border-width);\r\n    overflow: hidden;\r\n    padding: 0 var(--va-input-content-horizontal-padding);\r\n\r\n    /* Creates gap between prepend, content, validation icons, append */\r\n    & > * {\r\n      padding-right: var(--va-input-content-items-gap);\r\n      line-height: 0;\r\n\r\n      &:last-child {\r\n        padding-right: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__content-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    .va-input__content {\r\n      width: 100%;\r\n      position: relative;\r\n\r\n      input {\r\n        cursor: inherit;\r\n      }\r\n\r\n      &__input {\r\n        @include va-scroll(var(--va-input-scroll-color));\r\n\r\n        width: 100%;\r\n        // Use line-height as min-height for empty content slot\r\n        min-height: var(--va-input-line-height);\r\n        color: var(--va-input-text-color);\r\n        background-color: transparent;\r\n        border-style: none;\r\n        outline: none;\r\n        line-height: var(--va-input-line-height);\r\n        font-size: var(--va-input-font-size);\r\n        font-family: var(--va-input-font-family, var(--va-font-family));\r\n        font-weight: var(--va-input-font-weight);\r\n        font-style: var(--va-input-font-style);\r\n        font-stretch: var(--va-input-font-stretch);\r\n        letter-spacing: var(--va-input-letter-spacing);\r\n        transform: translateY(-1px);\r\n\r\n        &::placeholder {\r\n          color: var(--va-input-placeholder-text-color);\r\n        }\r\n\r\n        &:disabled {\r\n          opacity: var(--va-input-disabled-opacity);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &__icons {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    & > * {\r\n      margin-right: calc(var(--va-input-content-items-gap) / 4);\r\n\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  textarea {\r\n    margin: 12px 0;\r\n    resize: vertical;\r\n  }\r\n\r\n  &_labeled {\r\n    .va-input__content-wrapper {\r\n      padding-top: 12px;\r\n      height: 100%;\r\n      align-items: flex-end;\r\n    }\r\n\r\n    .va-input__label {\r\n      @include va-ellipsis();\r\n\r\n      height: 12px;\r\n      transform: translateY(-100%);\r\n      position: absolute;\r\n      display: block;\r\n      left: 0;\r\n      top: 0;\r\n      padding-top: 1px;\r\n      max-width: var(--va-input-container-label-max-width);\r\n      color: var(--va-input-container-label-color);\r\n      font-size: var(--va-input-container-label-font-size);\r\n      letter-spacing: var(--va-input-container-label-letter-spacing, var(--va-letter-spacing));\r\n      line-height: var(--va-input-container-label-line-height);\r\n      font-weight: var(--va-input-container-label-font-weight);\r\n      text-transform: var(--va-input-container-label-text-transform);\r\n      transform-origin: top left;\r\n    }\r\n\r\n    textarea {\r\n      margin-top: 0;\r\n    }\r\n  }\r\n\r\n  /* We have 3 styles and two states for each style separately */\r\n  &_solid {\r\n    .va-input__container {\r\n      background: var(--va-input-color);\r\n      border-color: var(--va-input-color);\r\n      border-radius: var(--va-input-border-radius);\r\n    }\r\n\r\n    &.va-input_success {\r\n      .va-input__container {\r\n        background: var(--va-input-success-background);\r\n        border-color: var(--va-input-success-color);\r\n      }\r\n    }\r\n\r\n    &.va-input_error {\r\n      .va-input__container {\r\n        background: var(--va-input-error-background);\r\n        border-color: var(--va-input-error-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &_outline {\r\n    .va-input__container {\r\n      border-radius: 0;\r\n      border-color: var(--va-input-bordered-color);\r\n    }\r\n\r\n    &.va-input_success {\r\n      .va-input__container {\r\n        background: var(--va-input-success-background);\r\n        border-color: var(--va-input-success-color);\r\n      }\r\n    }\r\n\r\n    &.va-input_error {\r\n      .va-input__container {\r\n        background: var(--va-input-error-background);\r\n        border-color: var(--va-input-error-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &_bordered {\r\n    /*\r\n      We can not just set border-bottom, becouse we also have border on the other sides.\r\n      We also can not use after or before, becouse we need to set border-color according to\r\n      color prop\r\n    */\r\n    &__border {\r\n      border-color: var(--va-input-bordered-color);\r\n      position: absolute;\r\n      height: 0;\r\n      border-bottom-width: var(--va-input-border-width);\r\n      border-bottom-style: solid;\r\n      width: 100%;\r\n      bottom: 0;\r\n    }\r\n\r\n    .va-input__container {\r\n      background: var(--va-input-color);\r\n      border-top-left-radius: var(--va-input-border-radius);\r\n      border-top-right-radius: var(--va-input-border-radius);\r\n      border-color: transparent !important;\r\n    }\r\n\r\n    &.va-input_success {\r\n      .va-input__container {\r\n        background: var(--va-input-success-background);\r\n      }\r\n\r\n      .va-input_bordered__border {\r\n        border-color: var(--va-input-success-color);\r\n      }\r\n    }\r\n\r\n    &.va-input_error {\r\n      .va-input__container {\r\n        background: var(--va-input-error-background);\r\n      }\r\n\r\n      .va-input_bordered__border {\r\n        border-color: var(--va-input-error-color);\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <va-input-wrapper\r\n    class=\"va-input\"\r\n    :class=\"wrapperClass\"\r\n    :disabled=\"disabled\"\r\n    :success=\"success\"\r\n    :messages=\"messages\"\r\n    :error=\"computedError\"\r\n    :error-messages=\"computedErrorMessages\"\r\n    :error-count=\"errorCount\"\r\n    @click:prepend=\"onPrependClick\"\r\n    @click:append=\"onAppendClick\"\r\n    @click=\"focus\"\r\n  >\r\n    <template\r\n      v-if=\"$slots.prepend\"\r\n      #prepend\r\n    >\r\n      <slot name=\"prepend\" />\r\n    </template>\r\n\r\n    <div\r\n      class=\"va-input__container\"\r\n      ref=\"container\"\r\n      :style=\"computedBorderColorStyle\"\r\n    >\r\n      <div\r\n        v-if=\"$slots.prependInner\"\r\n        class=\"va-input__prepend-inner\"\r\n        @click=\"onPrependInnerClick\"\r\n      >\r\n        <slot name=\"prependInner\" />\r\n      </div>\r\n\r\n      <div\r\n        class=\"va-input__content-wrapper\"\r\n        @click=\"focus()\"\r\n      >\r\n        <div class=\"va-input__content\">\r\n          <label\r\n            aria-hidden=\"true\"\r\n            class=\"va-input__label\"\r\n            :style=\"labelStyle\"\r\n          >\r\n            {{ label }}\r\n          </label>\r\n\r\n          <div\r\n            v-if=\"$slots.content\"\r\n            class=\"va-input__content__input\"\r\n          >\r\n            <slot\r\n              name=\"content\"\r\n              v-bind=\"{ value: computedValue, focus }\"\r\n            />\r\n          </div>\r\n          <textarea\r\n            v-else-if=\"isTextarea\"\r\n            v-bind=\"computedInputAttributes\"\r\n            ref=\"textarea\"\r\n            class=\"va-input__content__input\"\r\n            :tabindex=\"tabindex\"\r\n            v-on=\"eventListeners\"\r\n          />\r\n          <input\r\n            v-else\r\n            v-bind=\"computedInputAttributes\"\r\n            ref=\"input\"\r\n            class=\"va-input__content__input\"\r\n            v-on=\"eventListeners\"\r\n          >\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        v-if=\"showIcon\"\r\n        class=\"va-input__icons\"\r\n      >\r\n        <va-icon\r\n          v-if=\"success\"\r\n          color=\"success\"\r\n          name=\"check_circle\"\r\n          size=\"small\"\r\n        />\r\n        <va-icon\r\n          v-if=\"computedError\"\r\n          color=\"danger\"\r\n          name=\"warning\"\r\n          size=\"small\"\r\n        />\r\n        <va-icon\r\n          v-if=\"canBeCleared\"\r\n          :name=\"clearableIcon\"\r\n          size=\"small\"\r\n          :color=\"clearIconColor\"\r\n          @click.stop=\"reset()\"\r\n        />\r\n        <va-icon\r\n          v-if=\"loading\"\r\n          name=\"loop\"\r\n          size=\"small\"\r\n          spin=\"counter-clockwise\"\r\n          :color=\"colorComputed\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        v-if=\"$slots.appendInner\"\r\n        class=\"va-input__append-inner\"\r\n        @click=\"onAppendInnerClick\"\r\n      >\r\n        <slot name=\"appendInner\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"bordered\"\r\n      class=\"va-input_bordered__border\"\r\n      :style=\"computedBorderColorStyle\"\r\n    />\r\n\r\n    <template\r\n      v-if=\"$slots.append\"\r\n      #append\r\n    >\r\n      <slot name=\"append\" />\r\n    </template>\r\n  </va-input-wrapper>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, mixins, prop, Vue } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport VaInputWrapper from '../va-input/VaInputWrapper'\r\nimport VaIcon from '../va-icon'\r\n\r\nimport { InputMixin } from './helpers/InputMixin'\r\nimport { TextareaMixin } from './helpers/TextareaMixin'\r\n\r\nconst InputProps = Vue.with(class InputProps {\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n  placeholder = prop<string>({ type: String, default: '' })\r\n  clearable = prop<boolean>({ type: Boolean, default: false })\r\n  tabindex = prop<number>({ type: Number, default: 0 })\r\n  outline = prop({ type: Boolean, default: false })\r\n  bordered = prop({ type: Boolean, default: false })\r\n})\r\n\r\n@Options({\r\n  name: 'VaInput',\r\n  components: { VaInputWrapper, VaIcon },\r\n  emits: ['update:modelValue', 'update:focused', 'change', 'click-prepend', 'click-prepend-inner',\r\n    'click-append', 'click-append-inner', 'focus', 'blur', 'keyup', 'keydown', 'click', 'cleared'],\r\n})\r\nexport default class VaInput extends mixins(\r\n  ColorMixin,\r\n  InputMixin,\r\n  TextareaMixin,\r\n  InputProps,\r\n) {\r\n  get labelStyle (): any {\r\n    return { color: this.colorComputed }\r\n  }\r\n\r\n  stateClasses (baseclass: string) {\r\n    const classes = [baseclass]\r\n\r\n    if (this.isTextarea) {\r\n      classes.push(`${baseclass}_textarea`)\r\n    }\r\n    if (this.isFocusedComputed) {\r\n      classes.push(`${baseclass}_focused`)\r\n    }\r\n\r\n    if (this.label) {\r\n      classes.push(`${baseclass}_labeled`)\r\n    }\r\n\r\n    if (this.$props.outline) {\r\n      classes.push(`${baseclass}_outline`)\r\n    } else if (this.$props.bordered) {\r\n      classes.push(`${baseclass}_bordered`)\r\n    } else {\r\n      classes.push(`${baseclass}_solid`)\r\n    }\r\n\r\n    if (this.$props.success) {\r\n      classes.push(`${baseclass}_success`)\r\n    }\r\n    if (this.$props.error || this.computedError) {\r\n      classes.push(`${baseclass}_error`)\r\n    }\r\n\r\n    if (this.$props.disabled) {\r\n      classes.push(`${baseclass}_disabled`)\r\n    }\r\n\r\n    return classes\r\n  }\r\n\r\n  get wrapperClass () {\r\n    return this.stateClasses('va-input')\r\n  }\r\n\r\n  get computedBorderColorStyle () {\r\n    if (this.isFocusedComputed) {\r\n      return {\r\n        'border-color': this.colorComputed,\r\n      }\r\n    }\r\n\r\n    return {}\r\n  }\r\n\r\n  get clearIconColor () {\r\n    if (this.isFocusedComputed) {\r\n      return this.colorComputed\r\n    }\r\n\r\n    if (this.computedError) {\r\n      return 'danger'\r\n    }\r\n\r\n    if (this.success) {\r\n      return 'success'\r\n    }\r\n\r\n    return 'grey'\r\n  }\r\n\r\n  get computedInputAttributes (): Record<string, any> {\r\n    return {\r\n      ...this.$attrs,\r\n      id: this.id,\r\n      name: this.name,\r\n      type: this.type,\r\n      placeholder: this.placeholder,\r\n      disabled: this.disabled,\r\n      readonly: this.readonly,\r\n      tabindex: this.tabindex,\r\n      // Do not inherit style from $attrs\r\n      style: this.$attrs.inputStyle,\r\n      // Do not inherit class from $attrs\r\n      class: this.$attrs.inputClass,\r\n      value: this.computedValue,\r\n      'aria-label': this.label,\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  focus (): void {\r\n    if (this.$refs.input) {\r\n      (this as any).$refs.input.focus({ preventScroll: true })\r\n    } else if (this.$refs.textarea) {\r\n      (this as any).$refs.textarea.focus()\r\n    } else if (!this.$slots.content) {\r\n      throw new Error('There is no DOM element to focus')\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  blur (): void {\r\n    if (this.$refs.input) {\r\n      (this as any).$refs.input.blur()\r\n    } else if (this.$refs.textarea) {\r\n      (this as any).$refs.textarea.blur()\r\n    } else if (!this.$slots.content) {\r\n      throw new Error('There is no DOM element to blur')\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  reset (): void {\r\n    this.$emit('update:modelValue', '')\r\n    this.$emit('cleared')\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n@import '../../styles/resources/resources';\r\n@import 'variables';\r\n\r\n.va-input {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  color: var(--va-input-text-color);\r\n  cursor: var(--va-input-cursor);\r\n\r\n  &_disabled {\r\n    @include va-disabled;\r\n  }\r\n\r\n  &__container {\r\n    display: flex;\r\n    position: relative;\r\n    align-items: center;\r\n    width: 100%;\r\n    min-height: var(--va-input-min-height);\r\n    border-color: var(--va-input-color);\r\n    border-style: solid;\r\n    border-width: var(--va-input-border-width);\r\n    overflow: hidden;\r\n    padding: 0 var(--va-input-content-horizontal-padding);\r\n\r\n    /* Creates gap between prepend, content, validation icons, append */\r\n    & > * {\r\n      padding-right: var(--va-input-content-items-gap);\r\n      line-height: 0;\r\n\r\n      &:last-child {\r\n        padding-right: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__content-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    .va-input__content {\r\n      width: 100%;\r\n      position: relative;\r\n\r\n      input {\r\n        cursor: inherit;\r\n      }\r\n\r\n      &__input {\r\n        @include va-scroll(var(--va-input-scroll-color));\r\n\r\n        width: 100%;\r\n        // Use line-height as min-height for empty content slot\r\n        min-height: var(--va-input-line-height);\r\n        color: var(--va-input-text-color);\r\n        background-color: transparent;\r\n        border-style: none;\r\n        outline: none;\r\n        line-height: var(--va-input-line-height);\r\n        font-size: var(--va-input-font-size);\r\n        font-family: var(--va-input-font-family, var(--va-font-family));\r\n        font-weight: var(--va-input-font-weight);\r\n        font-style: var(--va-input-font-style);\r\n        font-stretch: var(--va-input-font-stretch);\r\n        letter-spacing: var(--va-input-letter-spacing);\r\n        transform: translateY(-1px);\r\n\r\n        &::placeholder {\r\n          color: var(--va-input-placeholder-text-color);\r\n        }\r\n\r\n        &:disabled {\r\n          opacity: var(--va-input-disabled-opacity);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &__icons {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    & > * {\r\n      margin-right: calc(var(--va-input-content-items-gap) / 4);\r\n\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  textarea {\r\n    margin: 12px 0;\r\n    resize: vertical;\r\n  }\r\n\r\n  &_labeled {\r\n    .va-input__content-wrapper {\r\n      padding-top: 12px;\r\n      height: 100%;\r\n      align-items: flex-end;\r\n    }\r\n\r\n    .va-input__label {\r\n      @include va-ellipsis();\r\n\r\n      height: 12px;\r\n      transform: translateY(-100%);\r\n      position: absolute;\r\n      display: block;\r\n      left: 0;\r\n      top: 0;\r\n      padding-top: 1px;\r\n      max-width: var(--va-input-container-label-max-width);\r\n      color: var(--va-input-container-label-color);\r\n      font-size: var(--va-input-container-label-font-size);\r\n      letter-spacing: var(--va-input-container-label-letter-spacing, var(--va-letter-spacing));\r\n      line-height: var(--va-input-container-label-line-height);\r\n      font-weight: var(--va-input-container-label-font-weight);\r\n      text-transform: var(--va-input-container-label-text-transform);\r\n      transform-origin: top left;\r\n    }\r\n\r\n    textarea {\r\n      margin-top: 0;\r\n    }\r\n  }\r\n\r\n  /* We have 3 styles and two states for each style separately */\r\n  &_solid {\r\n    .va-input__container {\r\n      background: var(--va-input-color);\r\n      border-color: var(--va-input-color);\r\n      border-radius: var(--va-input-border-radius);\r\n    }\r\n\r\n    &.va-input_success {\r\n      .va-input__container {\r\n        background: var(--va-input-success-background);\r\n        border-color: var(--va-input-success-color);\r\n      }\r\n    }\r\n\r\n    &.va-input_error {\r\n      .va-input__container {\r\n        background: var(--va-input-error-background);\r\n        border-color: var(--va-input-error-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &_outline {\r\n    .va-input__container {\r\n      border-radius: 0;\r\n      border-color: var(--va-input-bordered-color);\r\n    }\r\n\r\n    &.va-input_success {\r\n      .va-input__container {\r\n        background: var(--va-input-success-background);\r\n        border-color: var(--va-input-success-color);\r\n      }\r\n    }\r\n\r\n    &.va-input_error {\r\n      .va-input__container {\r\n        background: var(--va-input-error-background);\r\n        border-color: var(--va-input-error-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &_bordered {\r\n    /*\r\n      We can not just set border-bottom, becouse we also have border on the other sides.\r\n      We also can not use after or before, becouse we need to set border-color according to\r\n      color prop\r\n    */\r\n    &__border {\r\n      border-color: var(--va-input-bordered-color);\r\n      position: absolute;\r\n      height: 0;\r\n      border-bottom-width: var(--va-input-border-width);\r\n      border-bottom-style: solid;\r\n      width: 100%;\r\n      bottom: 0;\r\n    }\r\n\r\n    .va-input__container {\r\n      background: var(--va-input-color);\r\n      border-top-left-radius: var(--va-input-border-radius);\r\n      border-top-right-radius: var(--va-input-border-radius);\r\n      border-color: transparent !important;\r\n    }\r\n\r\n    &.va-input_success {\r\n      .va-input__container {\r\n        background: var(--va-input-success-background);\r\n      }\r\n\r\n      .va-input_bordered__border {\r\n        border-color: var(--va-input-success-color);\r\n      }\r\n    }\r\n\r\n    &.va-input_error {\r\n      .va-input__container {\r\n        background: var(--va-input-error-background);\r\n      }\r\n\r\n      .va-input_bordered__border {\r\n        border-color: var(--va-input-error-color);\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaInput from './VaInput.vue'\r\n\r\nexport { default as VaInputWrapper } from './VaInputWrapper'\r\nexport { default as VaMessageList } from './VaMessageList'\r\n\r\nexport default withConfigTransport(VaInput)\r\n"],"names":["DEFAULT_MASK_TOKENS","creditCard","date","datePattern","time","timePattern","timeFormat","numeral","numeralThousandsGroupStyle","PropsMixin","Vue","with","Props","constructor","this","prop","type","String","Object","default","Boolean","undefined","Number","InputMixin","mixins","FormComponentMixin","StatefulMixin","setup","watch","$props","mask","destroyCleaveInstance","inputElement","Cleave","$refs","input","getMask","setRawValue","modelValue","isFocusedComputed","focused","isFocused","value","$emit","computedValue","returnRaw","getRawValue","getFormattedValue","showIcon","success","computedError","canBeCleared","loading","hasContent","clearable","includes","onInput","event","keys","length","target","onChange","onClick","onPrependClick","onPrependInnerClick","onAppendClick","onAppendInnerClick","onFocus","canBeFocused","onBlur","ValidateMixin_onBlur","onKeyup","onKeydown","destroy","initInput","setEventListeners","eventListeners","change","click","focus","blur","keyup","keydown","mounted","beforeUnmount","TextareaMixin","isTextarea","adjustHeight","InputProps","VaInput","ColorMixin","labelStyle","color","colorComputed","stateClasses","baseclass","classes","push","label","outline","bordered","error","disabled","wrapperClass","computedBorderColorStyle","clearIconColor","computedInputAttributes","$attrs","id","name","placeholder","readonly","tabindex","style","inputStyle","class","inputClass","preventScroll","textarea","$slots","content","Error","reset","Options","components","VaInputWrapper","VaIcon","emits","_createBlock","_ctx","messages","_createElementVNode","ref","_createElementBlock","_renderSlot","_hoisted_1","_hoisted_2","_mergeProps","_toHandlers","_hoisted_4","size","spin","withConfigTransport"],"mappings":"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"}