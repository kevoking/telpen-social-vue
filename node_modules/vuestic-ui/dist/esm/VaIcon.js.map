{"version":3,"file":"VaIcon.js","sources":["../../src/services/icon-config/utils/regex.ts","../../src/services/icon-config/utils/dynamic-segment.ts","../../src/services/icon-config/types.ts","../../src/services/icon-config/icon-helpers.ts","../../src/services/icon-config/icon-config-hooks.ts","../../src/components/va-icon/VaIcon.vue","../../src/components/va-icon/VaIcon.vue?vue&type=template&id=28d73628&lang.js"],"sourcesContent":["export const isMatchRegex = (str: string, regex: RegExp) => {\r\n  return regex.test(str)\r\n}\r\n\r\n/**\r\n * Return values from regex groups\r\n * @example\r\n * ```\r\n * \"fa-phone-o\", /fa-(.*)-(.*)/ -> [\"phone\", \"o\"]\r\n * \"any string\", /(.*)/ -> [\"any string\"]\r\n * \"global regex test\", /global (regex) (test)/g -> [['regex', 'test']]\r\n * ```\r\n */\r\nexport const regexGroupsValues = (str: string, regex: RegExp | string): string[] | string[][] => {\r\n  if (typeof regex !== 'string' && regex.global) {\r\n    // Global regex can return multiple matches array. So we need to map this all matches and remove non group values.\r\n    return [...str.matchAll(regex)].map(g => g.slice(1))\r\n  }\r\n\r\n  const match = str.match(regex) || []\r\n  if (!match) { return [] }\r\n  /**\r\n   * If there is groups in result - we need to slice first match\r\n   * ```\r\n   * \"test\".match(/(s)/)\r\n   * > Array [ \"s\", \"s\" ]\r\n   * ```\r\n   */\r\n  if (match.length > 1) { return match.slice(1) }\r\n\r\n  return match\r\n}\r\n","import { regexGroupsValues } from './regex'\r\n\r\nconst dynamicSegmentRegex = /{[^}]*}/g // match {any-thing}, {even with space}\r\n\r\n/**\r\n * Replace {anything} to regex (.*) group\r\n * @example\r\n * ```\r\n * \"fa-{code}\" -> \"fa-(.*)\"\r\n * \"fa-{code}-{suffix}\" -> \"fa-(.*)-(.*)\"\r\n * ```\r\n */\r\nconst dynamicSegmentStringToRegex = (template: string) => {\r\n  return template.replace(dynamicSegmentRegex, '(.*)')\r\n}\r\n\r\n/**\r\n Returns content from string in {}\r\n @example\r\n ```\r\n \"fa-{code}-{suffix}\" -> ['code', 'suffix']\r\n ```\r\n */\r\nconst dynamicSegmentsNames = (template: string) => {\r\n  return (template.match(dynamicSegmentRegex) || []) // 'fa-{code}-{suffix}' -> ['{code}', '{suffix}']\r\n    .map((g) => g.replace(/{|}/g, '')) // ['{code}', '{suffix}'] -> ['code', 'suffix']\r\n}\r\n\r\n/**\r\n * Transform template to regex and returns regex group values\r\n * @example\r\n * ```\r\n * \"fa-clock-o\", \"fa-{code}-{suffix}\" -> [\"clock\", \"o\"]\r\n * ```\r\n */\r\nconst dynamicSegmentsValues = (str: string, template: string) => {\r\n  return regexGroupsValues(str, dynamicSegmentStringToRegex(template))\r\n}\r\n\r\n/**\r\n * Returns object with param name from template and match value from str\r\n * @example\r\n * ```\r\n * \"fa-phone\", \"fa-{icon code}\" -> { 'icon code': 'phone' }\r\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> { 'icon-code': 'clock', 'suffix': 'o' }\r\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> { 'icon-code': 'clock-o' }\r\n * ```\r\n */\r\nexport const dynamicSegments = (str: string, template: string) => {\r\n  const params = dynamicSegmentsNames(template)\r\n  const values = dynamicSegmentsValues(str, template)\r\n\r\n  return params.reduce((acc, paramValue, i) => ({ ...acc, [paramValue]: values[i] }), {})\r\n}\r\n\r\n/**\r\n * Returns true if match string equals to input `str`\r\n * @example\r\n * ```\r\n * \"vuestic-home-open\", /vuestic-(.*)-o/ -> false\r\n * \"vuestic-home-open\", /vuestic-(.*)-open/ -> true\r\n * ```\r\n */\r\nconst strictMatch = (str: string, regex: RegExp) => {\r\n  return (str.match(regex) || [])[0] === str\r\n}\r\n\r\n/**\r\n * Returns true if str match template\r\n * @example\r\n *  ```\r\n * \"fa-phone\", \"fa-{icon code}\" -> true\r\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> true\r\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> false\r\n * ```\r\n */\r\nexport const isMatchDynamicSegments = (str: string, template: string) => {\r\n  const templateRegex = dynamicSegmentStringToRegex(template)\r\n  return strictMatch(str, new RegExp(templateRegex))\r\n}\r\n","\r\nexport interface IconProps {\r\n  attrs?: Record<string, string | ((...args: any[]) => unknown)>\r\n\r\n  /** Vue component */\r\n  component?: any\r\n  /** Content that will be passed as text inside icon tag or as slot in component */\r\n  content?: string\r\n\r\n  class?: string,\r\n  tag?: string\r\n  color?: string\r\n  rotation?: number | string\r\n  spin?: 'clockwise' | 'counter-clockwise' | boolean\r\n  to?: string\r\n}\r\n\r\nexport interface IconConfigurationString extends IconProps {\r\n  name: string\r\n  resolve?: ((dynamicSegments: {[dynamicSegment: string]: string }) => IconProps)\r\n}\r\n\r\nexport interface IconConfigurationRegex extends IconProps {\r\n  name: RegExp\r\n  // Need a different resolve method name because ts don't understand types\r\n  resolveFromRegex?: ((...regexGroupValues: string[]) => IconProps)\r\n}\r\n\r\nexport type IconConfiguration = IconConfigurationString | IconConfigurationRegex\r\n\r\nexport type IconConfig = IconConfiguration[]\r\n\r\nexport const isIconConfigurationString = (config: IconConfiguration): config is IconConfigurationString => {\r\n  return typeof config.name === 'string'\r\n}\r\n\r\nexport const isIconConfigurationRegex = (config: IconConfiguration): config is IconConfigurationRegex => {\r\n  return config.name instanceof RegExp\r\n}\r\n","import { merge } from 'lodash-es'\r\nimport { getGlobalConfig } from '../global-config/global-config'\r\nimport { isMatchDynamicSegments, dynamicSegments } from './utils/dynamic-segment'\r\nimport { isMatchRegex, regexGroupsValues } from './utils/regex'\r\nimport {\r\n  IconConfig,\r\n  IconConfiguration,\r\n  IconConfigurationString,\r\n  IconConfigurationRegex,\r\n  isIconConfigurationString,\r\n  isIconConfigurationRegex,\r\n  IconProps,\r\n} from './types'\r\n\r\nconst getIconConfig = (): IconConfig => {\r\n  return getGlobalConfig().icons || []\r\n}\r\n\r\nconst isMatchConfiguration = (iconName: string, iconConfiguration: IconConfiguration) => {\r\n  if (isIconConfigurationString(iconConfiguration)) {\r\n    return isMatchDynamicSegments(iconName, iconConfiguration.name)\r\n  }\r\n  if (isIconConfigurationRegex(iconConfiguration)) {\r\n    return isMatchRegex(iconName, iconConfiguration.name)\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nconst resolveIconConfigurationString = (iconName: string, iconConfiguration: IconConfigurationString) => {\r\n  const args = dynamicSegments(iconName, iconConfiguration.name)\r\n  return iconConfiguration.resolve && iconConfiguration.resolve(args)\r\n}\r\n\r\nconst resolveIconConfigurationRegex = (iconName: string, iconConfig: IconConfigurationRegex) => {\r\n  if (iconConfig.name.global) {\r\n    throw new Error(`Bad icon config with name ${iconConfig.name}. Please, don't use global regex as name.`)\r\n  }\r\n  const args = regexGroupsValues(iconName, iconConfig.name) as string[]\r\n  return iconConfig.resolveFromRegex && iconConfig.resolveFromRegex(...args)\r\n}\r\n\r\nconst resolveIconConfiguration = (iconName: string, iconConfiguration: IconConfiguration): IconProps | undefined => {\r\n  if (isIconConfigurationString(iconConfiguration)) {\r\n    return resolveIconConfigurationString(iconName, iconConfiguration)\r\n  }\r\n  if (isIconConfigurationRegex(iconConfiguration)) {\r\n    return resolveIconConfigurationRegex(iconName, iconConfiguration)\r\n  }\r\n\r\n  throw Error('Unknown icon config')\r\n}\r\n\r\nconst findMatchedIconConfiguration = (iconName: string, globalIconConfig: IconConfig, namesToIgnore: string[] = []): IconConfiguration => {\r\n  const matchedConfig = globalIconConfig.find((config) => {\r\n    if (namesToIgnore.includes(config.name.toString())) { return false }\r\n\r\n    return isMatchConfiguration(iconName, config)\r\n  })\r\n\r\n  if (!matchedConfig) { throw new Error(`Can not find icon config from ${iconName}. Please provide default config.`) }\r\n\r\n  return matchedConfig\r\n}\r\n\r\nconst findIconConfiguration = (iconName: string | undefined, globalIconConfig: IconConfig, namesToIgnore: string[] = []): IconConfiguration | undefined => {\r\n  if (!iconName) { return }\r\n\r\n  const matchedIconConfiguration = findMatchedIconConfiguration(iconName, globalIconConfig, namesToIgnore)\r\n  const resolvedIconConfiguration = merge(resolveIconConfiguration(iconName, matchedIconConfiguration), matchedIconConfiguration)\r\n\r\n  namesToIgnore = [...namesToIgnore, matchedIconConfiguration.name.toString()]\r\n\r\n  return merge(\r\n    findIconConfiguration(resolvedIconConfiguration.to, globalIconConfig, namesToIgnore),\r\n    resolvedIconConfiguration,\r\n  )\r\n}\r\n\r\n/** Removes name, to, resolveFromRegex and resolve from IconConfiguration */\r\nconst iconPropsFromIconConfiguration = (iconConfiguration: IconConfiguration): IconProps => {\r\n  const junkKeys = ['name', 'to', 'resolve', 'resolveFromRegex']\r\n\r\n  const configuration: Record<string, string> = iconConfiguration as any\r\n  junkKeys.forEach((key) => { delete configuration[key] })\r\n  return configuration\r\n}\r\n\r\nexport const getIconConfiguration = (name: string, iconConfig: IconConfig = getIconConfig()): IconProps => {\r\n  const configuration = findIconConfiguration(name, iconConfig)\r\n\r\n  if (configuration === undefined) { return {} }\r\n\r\n  return iconPropsFromIconConfiguration(configuration)\r\n}\r\n","import { getIconConfiguration } from './icon-helpers'\r\n\r\nexport const useIcons = (props: any) => {\r\n  return {\r\n    // TODO: export here function that can dynamically change icons config\r\n    getIcon: (name: string) => getIconConfiguration(name),\r\n  }\r\n}\r\n","<template>\r\n  <component\r\n    v-bind=\"computedAttrs\"\r\n    aria-hidden=\"true\"\r\n    notranslate\r\n    class=\"va-icon\"\r\n    :is=\"computedTag\"\r\n    :class=\"computedClass\"\r\n    :style=\"computedStyle\"\r\n  >\r\n    <slot>{{ computedContent }}</slot>\r\n  </component>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, mixins, prop, Vue, setup } from 'vue-class-component'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport { SizeMixin } from '../../mixins/SizeMixin'\r\nimport { useIcons } from '../../services/icon-config/icon-config'\r\n\r\nclass IconProps {\r\n  name = prop<string>({ type: String, default: '' })\r\n  tag = prop<string>({ type: String })\r\n  component = prop<Record<string, any>>({ type: Object })\r\n  color = prop<string>({ type: String, default: undefined })\r\n  rotation = prop<number | string>({ type: [String, Number], default: undefined })\r\n  spin = prop<string | boolean>({ type: [String, Boolean], default: undefined })\r\n}\r\n\r\nconst IconPropsMixin = Vue.with(IconProps)\r\n\r\n@Options({\r\n  name: 'VaIcon',\r\n})\r\nexport default class VaIcon extends mixins(\r\n  ColorMixin,\r\n  SizeMixin,\r\n  IconPropsMixin,\r\n) {\r\n  iconContext = setup(() => useIcons(this.$props))\r\n\r\n  get iconConfig () {\r\n    return this.iconContext.getIcon(this.name)\r\n  }\r\n\r\n  get computedTag () {\r\n    return this.$props.component || this.$props.tag || this.iconConfig.component || this.iconConfig.tag || 'i'\r\n  }\r\n\r\n  get computedAttrs () {\r\n    return { ...this.iconConfig.attrs, ...this.$attrs }\r\n  }\r\n\r\n  get computedClass () {\r\n    const spin = this.$props.spin === undefined ? this.iconConfig.spin : this.$props.spin\r\n\r\n    return [\r\n      this.iconConfig.class,\r\n      this.getSpinClass(spin),\r\n    ]\r\n  }\r\n\r\n  getSpinClass (spin?: string | boolean) {\r\n    if (spin === undefined) { return }\r\n    return spin === 'counter-clockwise' ? 'va-icon--spin-reverse' : 'va-icon--spin'\r\n  }\r\n\r\n  get computedStyle () {\r\n    return {\r\n      transform: this.rotation && 'rotate(' + this.rotation + 'deg)',\r\n      cursor: this.$attrs.onClick ? 'pointer' : null,\r\n      color: this.$props.color !== undefined ? this.colorComputed : this.iconConfig.color,\r\n      // TODO: change this to 'fontSize: this.sizeComputed' when global config issue #1054 will be resolved\r\n      fontSize: this.$props.size === '' ? '24px' : this.sizeComputed,\r\n    }\r\n  }\r\n\r\n  get computedContent () {\r\n    return this.iconConfig.content\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import 'variables';\r\n\r\n.va-icon {\r\n  vertical-align: var(--va-icon-vertical-align);\r\n  user-select: var(--va-icon-user-select);\r\n\r\n  &#{&} {\r\n    // need 2 classes to make it work\r\n    font-style: normal;\r\n  }\r\n\r\n  &--spin {\r\n    animation: va-icon--spin-animation 1500ms linear infinite;\r\n\r\n    &-reverse {\r\n      animation: va-icon--spin-animation 1500ms linear infinite;\r\n      animation-direction: reverse;\r\n    }\r\n  }\r\n\r\n  @keyframes va-icon--spin-animation {\r\n    from {\r\n      transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <component\r\n    v-bind=\"computedAttrs\"\r\n    aria-hidden=\"true\"\r\n    notranslate\r\n    class=\"va-icon\"\r\n    :is=\"computedTag\"\r\n    :class=\"computedClass\"\r\n    :style=\"computedStyle\"\r\n  >\r\n    <slot>{{ computedContent }}</slot>\r\n  </component>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, mixins, prop, Vue, setup } from 'vue-class-component'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport { SizeMixin } from '../../mixins/SizeMixin'\r\nimport { useIcons } from '../../services/icon-config/icon-config'\r\n\r\nclass IconProps {\r\n  name = prop<string>({ type: String, default: '' })\r\n  tag = prop<string>({ type: String })\r\n  component = prop<Record<string, any>>({ type: Object })\r\n  color = prop<string>({ type: String, default: undefined })\r\n  rotation = prop<number | string>({ type: [String, Number], default: undefined })\r\n  spin = prop<string | boolean>({ type: [String, Boolean], default: undefined })\r\n}\r\n\r\nconst IconPropsMixin = Vue.with(IconProps)\r\n\r\n@Options({\r\n  name: 'VaIcon',\r\n})\r\nexport default class VaIcon extends mixins(\r\n  ColorMixin,\r\n  SizeMixin,\r\n  IconPropsMixin,\r\n) {\r\n  iconContext = setup(() => useIcons(this.$props))\r\n\r\n  get iconConfig () {\r\n    return this.iconContext.getIcon(this.name)\r\n  }\r\n\r\n  get computedTag () {\r\n    return this.$props.component || this.$props.tag || this.iconConfig.component || this.iconConfig.tag || 'i'\r\n  }\r\n\r\n  get computedAttrs () {\r\n    return { ...this.iconConfig.attrs, ...this.$attrs }\r\n  }\r\n\r\n  get computedClass () {\r\n    const spin = this.$props.spin === undefined ? this.iconConfig.spin : this.$props.spin\r\n\r\n    return [\r\n      this.iconConfig.class,\r\n      this.getSpinClass(spin),\r\n    ]\r\n  }\r\n\r\n  getSpinClass (spin?: string | boolean) {\r\n    if (spin === undefined) { return }\r\n    return spin === 'counter-clockwise' ? 'va-icon--spin-reverse' : 'va-icon--spin'\r\n  }\r\n\r\n  get computedStyle () {\r\n    return {\r\n      transform: this.rotation && 'rotate(' + this.rotation + 'deg)',\r\n      cursor: this.$attrs.onClick ? 'pointer' : null,\r\n      color: this.$props.color !== undefined ? this.colorComputed : this.iconConfig.color,\r\n      // TODO: change this to 'fontSize: this.sizeComputed' when global config issue #1054 will be resolved\r\n      fontSize: this.$props.size === '' ? '24px' : this.sizeComputed,\r\n    }\r\n  }\r\n\r\n  get computedContent () {\r\n    return this.iconConfig.content\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import 'variables';\r\n\r\n.va-icon {\r\n  vertical-align: var(--va-icon-vertical-align);\r\n  user-select: var(--va-icon-user-select);\r\n\r\n  &#{&} {\r\n    // need 2 classes to make it work\r\n    font-style: normal;\r\n  }\r\n\r\n  &--spin {\r\n    animation: va-icon--spin-animation 1500ms linear infinite;\r\n\r\n    &-reverse {\r\n      animation: va-icon--spin-animation 1500ms linear infinite;\r\n      animation-direction: reverse;\r\n    }\r\n  }\r\n\r\n  @keyframes va-icon--spin-animation {\r\n    from {\r\n      transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"names":["regexGroupsValues","str","regex","global","matchAll","map","g","slice","match","length","dynamicSegmentRegex","dynamicSegmentStringToRegex","template","replace","dynamicSegments","params","dynamicSegmentsNames","values","dynamicSegmentsValues","reduce","acc","paramValue","i","isIconConfigurationString","config","name","isIconConfigurationRegex","RegExp","isMatchConfiguration","iconName","iconConfiguration","templateRegex","strictMatch","isMatchDynamicSegments","test","resolveIconConfiguration","args","resolve","resolveIconConfigurationString","iconConfig","Error","resolveFromRegex","resolveIconConfigurationRegex","findIconConfiguration","globalIconConfig","namesToIgnore","matchedIconConfiguration","matchedConfig","find","includes","toString","findMatchedIconConfiguration","resolvedIconConfiguration","merge","to","getIconConfiguration","getGlobalConfig","icons","getIconConfig","configuration","undefined","forEach","key","iconPropsFromIconConfiguration","useIcons","props","getIcon","IconPropsMixin","Vue","with","IconProps","constructor","this","prop","type","String","default","Object","Number","Boolean","VaIcon","mixins","ColorMixin","SizeMixin","setup","$props","iconContext","computedTag","component","tag","computedAttrs","attrs","$attrs","computedClass","spin","class","getSpinClass","computedStyle","transform","rotation","cursor","onClick","color","colorComputed","fontSize","size","sizeComputed","computedContent","content","Options","_createBlock","_ctx","_mergeProps","notranslate","style","_renderSlot"],"mappings":"4dAAO,MAaMA,kBAAoB,CAACC,EAAaC,KAC7C,GAAqB,iBAAVA,GAAsBA,EAAMC,OAErC,MAAO,IAAIF,EAAIG,SAASF,IAAQG,KAAIC,GAAKA,EAAEC,MAAM,KAGnD,MAAMC,EAAQP,EAAIO,MAAMN,IAAU,GAClC,OAAKM,EAQDA,EAAMC,OAAS,EAAYD,EAAMD,MAAM,GAEpCC,EAVc,IClBjBE,EAAsB,WAUtBC,4BAA+BC,GAC5BA,EAASC,QAAQH,EAAqB,QAmClCI,gBAAkB,CAACb,EAAaW,KAC3C,MAAMG,EA1BqB,CAACH,IACpBA,EAASJ,MAAME,IAAwB,IAC5CL,KAAKC,GAAMA,EAAEO,QAAQ,OAAQ,MAwBjBG,CAAqBJ,GAC9BK,EAfsB,EAAChB,EAAaW,IACnCZ,kBAAkBC,EAAKU,4BAA4BC,IAc3CM,CAAsBjB,EAAKW,GAE1C,OAAOG,EAAOI,QAAO,CAACC,EAAKC,EAAYC,SAAYF,EAAKC,CAACA,GAAaJ,EAAOK,MAAO,KCpBzEC,0BAA6BC,GACV,iBAAhBA,EAAOC,KAGVC,yBAA4BF,GAChCA,EAAOC,gBAAgBE,OCnB1BC,qBAAuB,CAACC,EAAkBC,KAC9C,OAAIP,0BAA0BO,GFyDM,EAAC7B,EAAaW,KAClD,MAAMmB,EAAgBpB,4BAA4BC,GAClD,MAfkB,EAACX,EAAaC,KACxBD,EAAIO,MAAMN,IAAU,IAAI,KAAOD,EAchC+B,CAAY/B,EAAK,IAAI0B,OAAOI,KE1D1BE,CAAuBJ,EAAUC,EAAkBL,QAExDC,yBAAyBI,KHtBF7B,EGuBL4B,EAAUC,EAAkBL,KHtBrCS,KAAKjC,IADQ,IAACA,GG0CvBkC,yBAA2B,CAACN,EAAkBC,KAClD,GAAIP,0BAA0BO,GAC5B,MAfmC,EAACD,EAAkBC,KACxD,MAAMM,EAAOtB,gBAAgBe,EAAUC,EAAkBL,MACzD,OAAOK,EAAkBO,SAAWP,EAAkBO,QAAQD,IAarDE,CAA+BT,EAAUC,GAElD,GAAIJ,yBAAyBI,GAC3B,MAbkC,EAACD,EAAkBU,KACvD,GAAIA,EAAWd,KAAKtB,OAClB,MAAM,IAAIqC,MAAM,6BAA6BD,EAAWd,iDAE1D,MAAMW,EAAOpC,kBAAkB6B,EAAUU,EAAWd,MACpD,OAAOc,EAAWE,kBAAoBF,EAAWE,oBAAoBL,IAQ5DM,CAA8Bb,EAAUC,GAGjD,MAAMU,MAAM,wBAeRG,sBAAwB,CAACd,EAA8Be,EAA8BC,EAA0B,MACnH,IAAKhB,EAAY,OAEjB,MAAMiB,EAf6B,EAACjB,EAAkBe,EAA8BC,EAA0B,MAC9G,MAAME,EAAgBH,EAAiBI,MAAMxB,IACvCqB,EAAcI,SAASzB,EAAOC,KAAKyB,aAEhCtB,qBAAqBC,EAAUL,KAGxC,IAAKuB,EAAiB,MAAM,IAAIP,MAAM,iCAAiCX,qCAEvE,OAAOkB,GAM0BI,CAA6BtB,EAAUe,EAAkBC,GACpFO,EAA4BC,EAAMlB,yBAAyBN,EAAUiB,GAA2BA,GAItG,OAFAD,EAAgB,IAAIA,EAAeC,EAAyBrB,KAAKyB,YAE1DG,EACLV,sBAAsBS,EAA0BE,GAAIV,EAAkBC,GACtEO,IAaSG,qBAAuB,CAAC9B,EAAcc,EA1E7B,KACbiB,IAAkBC,OAAS,GAyEwCC,MAC1E,MAAMC,EAAgBhB,sBAAsBlB,EAAMc,GAElD,YAAsBqB,IAAlBD,EAAsC,GAXL,CAAC7B,IACtC,MAEM6B,EAAwC7B,EAE9C,MAJiB,CAAC,OAAQ,KAAM,UAAW,oBAGlC+B,SAASC,WAAiBH,EAAcG,MAC1CH,GAQAI,CAA+BJ,IC3F3BK,SAAYC,IAChB,CAELC,QAAUzC,GAAiB8B,qBAAqB9B,KCwBpD,MAAM0C,EAAiBC,EAAIC,KAT3B,MAAMC,UAANC,cACEC,UAAOC,EAAa,CAAEC,KAAMC,OAAQC,QAAS,KAC7CJ,SAAMC,EAAa,CAAEC,KAAMC,SAC3BH,eAAYC,EAA0B,CAAEC,KAAMG,SAC9CL,WAAQC,EAAa,CAAEC,KAAMC,OAAQC,aAAShB,IAC9CY,cAAWC,EAAsB,CAAEC,KAAM,CAACC,OAAQG,QAASF,aAAShB,IACpEY,UAAOC,EAAuB,CAAEC,KAAM,CAACC,OAAQI,SAAUH,aAAShB,OAQpE,IAAqBoB,EAArB,MAAqBA,eAAeC,EAClCC,EACAC,EACAhB,IAHFI,kCAKEC,iBAAcY,GAAM,IAAMpB,SAASQ,KAAKa,UAExC9C,iBACE,OAAOiC,KAAKc,YAAYpB,QAAQM,KAAK/C,MAGvC8D,kBACE,OAAOf,KAAKa,OAAOG,WAAahB,KAAKa,OAAOI,KAAOjB,KAAKjC,WAAWiD,WAAahB,KAAKjC,WAAWkD,KAAO,IAGzGC,oBACE,MAAO,IAAKlB,KAAKjC,WAAWoD,SAAUnB,KAAKoB,QAG7CC,oBACE,MAAMC,OAA4BlC,IAArBY,KAAKa,OAAOS,KAAqBtB,KAAKjC,WAAWuD,KAAOtB,KAAKa,OAAOS,KAEjF,MAAO,CACLtB,KAAKjC,WAAWwD,MAChBvB,KAAKwB,aAAaF,IAItBE,aAAcF,GACZ,QAAalC,IAATkC,EACJ,MAAgB,sBAATA,EAA+B,wBAA0B,gBAGlEG,oBACE,MAAO,CACLC,UAAW1B,KAAK2B,UAAY,UAAY3B,KAAK2B,SAAW,OACxDC,OAAQ5B,KAAKoB,OAAOS,QAAU,UAAY,KAC1CC,WAA6B1C,IAAtBY,KAAKa,OAAOiB,MAAsB9B,KAAK+B,cAAgB/B,KAAKjC,WAAW+D,MAE9EE,SAA+B,KAArBhC,KAAKa,OAAOoB,KAAc,OAASjC,KAAKkC,cAItDC,sBACE,OAAOnC,KAAKjC,WAAWqE,UA5CN5B,KAHpB6B,EAAQ,CACPpF,KAAM,YAEauD,SAAAA,ywBCjCnB8B,IAKOC,eALPC,EACUD,iBACR,cAAY,OACZE,YAAA,GACAlB,OAAM,UAEEgB,iBACPG,MAAOH,8BAER,KAAAI,yBAAA,SAASJ"}