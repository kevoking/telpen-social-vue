{"version":3,"file":"index11.js","sources":["../../src/components/va-button-toggle/VaButtonToggle.vue","../../src/components/va-button-toggle/VaButtonToggle.vue?vue&type=template&id=39f0c05a&lang.js","../../src/components/va-button-toggle/index.ts"],"sourcesContent":["<template>\r\n  <div class=\"va-button-toggle\">\r\n    <va-button-group\r\n      :color=\"color\"\r\n      :textColor=\"textColor\"\r\n      :rounded=\"rounded\"\r\n      :outline=\"outline\"\r\n      :flat=\"flat\"\r\n      :gradient=\"gradient\"\r\n    >\r\n      <va-button\r\n        v-for=\"option in options\"\r\n        :key=\"option.value\"\r\n        :style=\"buttonStyle(option.value)\"\r\n        :disabled=\"disabled\"\r\n        :size=\"size\"\r\n        :class=\"buttonClass(option.value)\"\r\n        @click=\"changeValue(option.value)\"\r\n      >\r\n        {{ option.label }}\r\n      </va-button>\r\n    </va-button-group>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, mixins, Vue } from 'vue-class-component'\r\n\r\nimport {\r\n  getFocusColor, getTextColor,\r\n  shiftHSLAColor,\r\n} from '../../services/color-config/color-functions'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport VaButton from '../va-button'\r\nimport VaButtonGroup from '../va-button-group'\r\n\r\nclass ButtonToggleProps {\r\n  options = prop<any[]>({ type: Array, default: () => [] })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n  textColor = prop<string>({ type: String, default: undefined })\r\n  activeButtonTextColor = prop<string>({ type: String, default: '#fff' })\r\n  modelValue = prop<string | number>({ type: [String, Number], default: '' })\r\n  outline = prop<boolean>({ type: Boolean, default: false })\r\n  flat = prop<boolean>({ type: Boolean, default: false })\r\n  rounded = prop<boolean>({ type: Boolean, default: true })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  size = prop<string>({\r\n    type: String,\r\n    default: 'medium',\r\n    validator: (modelValue: string) => {\r\n      return ['medium', 'small', 'large'].includes(modelValue)\r\n    },\r\n  })\r\n\r\n  toggleColor = prop<string>({ type: String, default: '' })\r\n  gradient = prop<boolean>({ type: Boolean, default: false })\r\n}\r\n\r\nconst ButtonTogglePropsMixin = Vue.with(ButtonToggleProps)\r\n\r\n@Options({\r\n  name: 'VaButtonToggle',\r\n  components: {\r\n    VaButtonGroup,\r\n    VaButton,\r\n  },\r\n  emits: ['update:modelValue'],\r\n})\r\nexport default class VaButtonToggle extends mixins(\r\n  ColorMixin,\r\n  ButtonTogglePropsMixin,\r\n) {\r\n  buttonColor (buttonValue: any) {\r\n    return buttonValue === this.modelValue && this.toggleColor ? this.toggleColor : this.color\r\n  }\r\n\r\n  buttonStyle (buttonValue: any) {\r\n    if (buttonValue === this.modelValue) {\r\n      let color = this.activeButtonTextColor ? this.activeButtonTextColor : getTextColor(this.colorComputed)\r\n      let background = this.toggleColor ? this.theme.getColor(this.toggleColor) : shiftHSLAColor(this.colorComputed, { l: -6 })\r\n      if (this.outline || this.flat) {\r\n        background = this.toggleColor ? this.theme.getColor(this.toggleColor) : this.colorComputed\r\n        color = this.activeButtonTextColor\r\n      }\r\n      return {\r\n        background: background,\r\n        color: color,\r\n      }\r\n    }\r\n  }\r\n\r\n  buttonClass (buttonValue: any) {\r\n    return {\r\n      'va-button--active': buttonValue === this.modelValue,\r\n    }\r\n  }\r\n\r\n  changeValue (value: any) {\r\n    this.$emit('update:modelValue', value)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-button-toggle {\r\n  .va-button {\r\n    &:focus,\r\n    &:hover {\r\n      box-shadow: none !important;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-button-toggle\">\r\n    <va-button-group\r\n      :color=\"color\"\r\n      :textColor=\"textColor\"\r\n      :rounded=\"rounded\"\r\n      :outline=\"outline\"\r\n      :flat=\"flat\"\r\n      :gradient=\"gradient\"\r\n    >\r\n      <va-button\r\n        v-for=\"option in options\"\r\n        :key=\"option.value\"\r\n        :style=\"buttonStyle(option.value)\"\r\n        :disabled=\"disabled\"\r\n        :size=\"size\"\r\n        :class=\"buttonClass(option.value)\"\r\n        @click=\"changeValue(option.value)\"\r\n      >\r\n        {{ option.label }}\r\n      </va-button>\r\n    </va-button-group>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, mixins, Vue } from 'vue-class-component'\r\n\r\nimport {\r\n  getFocusColor, getTextColor,\r\n  shiftHSLAColor,\r\n} from '../../services/color-config/color-functions'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport VaButton from '../va-button'\r\nimport VaButtonGroup from '../va-button-group'\r\n\r\nclass ButtonToggleProps {\r\n  options = prop<any[]>({ type: Array, default: () => [] })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n  textColor = prop<string>({ type: String, default: undefined })\r\n  activeButtonTextColor = prop<string>({ type: String, default: '#fff' })\r\n  modelValue = prop<string | number>({ type: [String, Number], default: '' })\r\n  outline = prop<boolean>({ type: Boolean, default: false })\r\n  flat = prop<boolean>({ type: Boolean, default: false })\r\n  rounded = prop<boolean>({ type: Boolean, default: true })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  size = prop<string>({\r\n    type: String,\r\n    default: 'medium',\r\n    validator: (modelValue: string) => {\r\n      return ['medium', 'small', 'large'].includes(modelValue)\r\n    },\r\n  })\r\n\r\n  toggleColor = prop<string>({ type: String, default: '' })\r\n  gradient = prop<boolean>({ type: Boolean, default: false })\r\n}\r\n\r\nconst ButtonTogglePropsMixin = Vue.with(ButtonToggleProps)\r\n\r\n@Options({\r\n  name: 'VaButtonToggle',\r\n  components: {\r\n    VaButtonGroup,\r\n    VaButton,\r\n  },\r\n  emits: ['update:modelValue'],\r\n})\r\nexport default class VaButtonToggle extends mixins(\r\n  ColorMixin,\r\n  ButtonTogglePropsMixin,\r\n) {\r\n  buttonColor (buttonValue: any) {\r\n    return buttonValue === this.modelValue && this.toggleColor ? this.toggleColor : this.color\r\n  }\r\n\r\n  buttonStyle (buttonValue: any) {\r\n    if (buttonValue === this.modelValue) {\r\n      let color = this.activeButtonTextColor ? this.activeButtonTextColor : getTextColor(this.colorComputed)\r\n      let background = this.toggleColor ? this.theme.getColor(this.toggleColor) : shiftHSLAColor(this.colorComputed, { l: -6 })\r\n      if (this.outline || this.flat) {\r\n        background = this.toggleColor ? this.theme.getColor(this.toggleColor) : this.colorComputed\r\n        color = this.activeButtonTextColor\r\n      }\r\n      return {\r\n        background: background,\r\n        color: color,\r\n      }\r\n    }\r\n  }\r\n\r\n  buttonClass (buttonValue: any) {\r\n    return {\r\n      'va-button--active': buttonValue === this.modelValue,\r\n    }\r\n  }\r\n\r\n  changeValue (value: any) {\r\n    this.$emit('update:modelValue', value)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-button-toggle {\r\n  .va-button {\r\n    &:focus,\r\n    &:hover {\r\n      box-shadow: none !important;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaButtonToggle from './VaButtonToggle.vue'\r\n\r\nexport default withConfigTransport(VaButtonToggle)\r\n"],"names":["ButtonTogglePropsMixin","Vue","with","ButtonToggleProps","constructor","this","prop","type","Array","default","String","undefined","Number","Boolean","validator","modelValue","includes","VaButtonToggle","mixins","ColorMixin","buttonColor","buttonValue","toggleColor","color","buttonStyle","activeButtonTextColor","getTextColor","colorComputed","background","theme","getColor","shiftHSLAColor","l","outline","flat","buttonClass","changeValue","value","$emit","Options","name","components","VaButtonGroup","VaButton","emits","class","_createElementBlock","_hoisted_1","_createVNode","_ctx","textColor","rounded","gradient","option","_createBlock","key","style","disabled","size","onClick","label","withConfigTransport"],"mappings":"wwBA0DA,MAAMA,EAAyBC,EAAIC,KAtBnC,MAAMC,kBAANC,cACEC,aAAUC,EAAY,CAAEC,KAAMC,MAAOC,QAAS,IAAM,KACpDJ,WAAQC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,YAC9CJ,eAAYC,EAAa,CAAEC,KAAMG,OAAQD,aAASE,IAClDN,2BAAwBC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,SAC9DJ,gBAAaC,EAAsB,CAAEC,KAAM,CAACG,OAAQE,QAASH,QAAS,KACtEJ,aAAUC,EAAc,CAAEC,KAAMM,QAASJ,SAAS,IAClDJ,UAAOC,EAAc,CAAEC,KAAMM,QAASJ,SAAS,IAC/CJ,aAAUC,EAAc,CAAEC,KAAMM,QAASJ,SAAS,IAClDJ,cAAWC,EAAc,CAAEC,KAAMM,QAASJ,SAAS,IACnDJ,UAAOC,EAAa,CAClBC,KAAMG,OACND,QAAS,SACTK,UAAYC,GACH,CAAC,SAAU,QAAS,SAASC,SAASD,KAIjDV,iBAAcC,EAAa,CAAEC,KAAMG,OAAQD,QAAS,KACpDJ,cAAWC,EAAc,CAAEC,KAAMM,QAASJ,SAAS,OAarD,IAAqBQ,EAArB,MAAqBA,uBAAuBC,EAC1CC,EACAnB,IAEAoB,YAAaC,GACX,OAAOA,IAAgBhB,KAAKU,YAAcV,KAAKiB,YAAcjB,KAAKiB,YAAcjB,KAAKkB,MAGvFC,YAAaH,GACX,GAAIA,IAAgBhB,KAAKU,WAAY,CACnC,IAAIQ,EAAQlB,KAAKoB,sBAAwBpB,KAAKoB,sBAAwBC,EAAarB,KAAKsB,eACpFC,EAAavB,KAAKiB,YAAcjB,KAAKwB,MAAMC,SAASzB,KAAKiB,aAAeS,EAAe1B,KAAKsB,cAAe,CAAEK,GAAI,IAKrH,OAJI3B,KAAK4B,SAAW5B,KAAK6B,QACvBN,EAAavB,KAAKiB,YAAcjB,KAAKwB,MAAMC,SAASzB,KAAKiB,aAAejB,KAAKsB,cAC7EJ,EAAQlB,KAAKoB,uBAER,CACLG,WAAYA,EACZL,MAAOA,IAKbY,YAAad,GACX,MAAO,CACL,oBAAqBA,IAAgBhB,KAAKU,YAI9CqB,YAAaC,GACXhC,KAAKiC,MAAM,oBAAqBD,KA9BfpB,KARpBsB,EAAQ,CACPC,KAAM,iBACNC,WAAY,CACVC,cAAAA,EACAC,SAAAA,GAEFC,MAAO,CAAC,wBAEW3B,SAAAA,WCnEd4B,MAAM,yNAAXC,QAAAC,GACEC,KACGzB,MAAO0B,QACPC,UAAWD,YACXE,QAASF,UACThB,QAASgB,UACTf,KAAMe,OACNG,SAAUH,wBAGT,YADFH,WACmBG,WAAVI,QADTC,KAEGC,IAAKF,EAAOhB,MACZmB,QAAOP,cAAYI,EAAOhB,QAC1BoB,SAAUR,WACVS,KAAMT,OACNJ,QAAOI,cAAYI,EAAOhB,QAC1BsB,WAAOV,cAAYI,EAAOhB,oBAE3B,SAAGgB,EAAOO,uNChBlB,MAAeC,EAAoB5C"}