{"version":3,"file":"index35.js","sources":["../../src/components/va-parallax/VaParallax.vue","../../src/components/va-parallax/VaParallax.vue?vue&type=template&id=a3c5ce30&lang.js","../../src/components/va-parallax/index.ts"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"va-parallax\"\r\n    :style=\"computedWrapperStyles\"\r\n  >\r\n    <div class=\"va-parallax__image-container\">\r\n      <img\r\n        class=\"va-parallax__image\"\r\n        ref=\"img\"\r\n        :src=\"$props.src\"\r\n        :alt=\"$props.alt\"\r\n        :style=\"computedImgStyles\"\r\n      />\r\n    </div>\r\n    <div class=\"va-parallax__item-container\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nclass ParallaxProps {\r\n  target = prop<Element | string>({ type: [Object, String], default: '' })\r\n  src = prop<string>({ type: String, default: '', required: true })\r\n  alt = prop<string>({ type: String, default: 'parallax' })\r\n  height = prop<number>({ type: Number, default: 400 })\r\n  reversed = prop<boolean>({ type: Boolean, default: false })\r\n  speed = prop<number>({\r\n    type: Number,\r\n    default: 0.5,\r\n    validator: (value: number) => {\r\n      return value >= 0 && value <= 1\r\n    },\r\n  })\r\n}\r\n\r\nconst ParallaxPropsMixin = Vue.with(ParallaxProps)\r\n\r\n@Options({\r\n  name: 'VaParallax',\r\n})\r\nexport default class VaParallax extends mixins(\r\n  ParallaxPropsMixin,\r\n) {\r\n  elOffsetTop = 0\r\n  parallax = 0\r\n  parallaxDist = 0\r\n  percentScrolled = 0\r\n  scrollTop = 0\r\n  windowHeight = 0\r\n  windowBottom = 0\r\n  isLoaded = false\r\n\r\n  get computedWrapperStyles (): Record<string, unknown> {\r\n    return {\r\n      height: this.$props.height + 'px',\r\n    }\r\n  }\r\n\r\n  get targetElement () {\r\n    return typeof this.$props.target === 'string'\r\n      ? document.querySelector(this.$props.target)\r\n      : this.$props.target || this.$el.parentElement\r\n  }\r\n\r\n  get computedImgStyles (): Record<string, unknown> {\r\n    return {\r\n      display: 'block',\r\n      transform: `translate(-50%, ${this.parallax}px)`,\r\n      opacity: this.isLoaded ? 1 : 0,\r\n      top: this.$props.reversed ? 0 : 'auto',\r\n    }\r\n  }\r\n\r\n  get imgHeight (): number {\r\n    // @ts-ignore\r\n    return this.$refs.img.naturalHeight\r\n  }\r\n\r\n  calcDimensions (): void {\r\n    const offset = this.$el.getBoundingClientRect()\r\n\r\n    this.scrollTop = this.targetElement.scrollTop\r\n    this.parallaxDist = this.imgHeight - (this.$props.height as number)\r\n    this.elOffsetTop = offset.top + this.scrollTop\r\n    this.windowHeight = window.innerHeight\r\n    this.windowBottom = this.scrollTop + this.windowHeight\r\n  }\r\n\r\n  translate (): void {\r\n    this.calcDimensions()\r\n    this.percentScrolled = (\r\n      (this.windowBottom - this.elOffsetTop) /\r\n      ((this.$props.height as number) + this.windowHeight)\r\n    )\r\n    this.parallax = Math.round(this.parallaxDist * this.percentScrolled) * (this.$props.speed as number)\r\n    if (this.$props.reversed) {\r\n      this.parallax = -this.parallax\r\n    }\r\n  }\r\n\r\n  addEventListeners (): void {\r\n    this.targetElement.addEventListener('scroll', this.translate)\r\n    this.targetElement.addEventListener('resize', this.translate)\r\n  }\r\n\r\n  removeEventListeners (): void {\r\n    this.targetElement.removeEventListener('scroll', this.translate)\r\n    this.targetElement.removeEventListener('resize', this.translate)\r\n  }\r\n\r\n  initImage (): void {\r\n    const img: HTMLImageElement = this.$refs.img as HTMLImageElement\r\n    if (img.complete) {\r\n      this.translate()\r\n      this.addEventListeners()\r\n    } else {\r\n      img.addEventListener('load', () => {\r\n        this.translate()\r\n        this.addEventListeners()\r\n      }, false)\r\n    }\r\n    this.isLoaded = true\r\n  }\r\n\r\n  mounted () {\r\n    this.initImage()\r\n  }\r\n\r\n  beforeUnmount () {\r\n    this.removeEventListeners()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../styles/resources/resources';\r\n@import 'variables';\r\n\r\n.va-parallax {\r\n  display: var(--va-parallax-display);\r\n  position: var(--va-parallax-position);\r\n  overflow: var(--va-parallax-overflow);\r\n  width: var(--va-parallax-width);\r\n  z-index: var(--va-parallax-z-index);\r\n\r\n  &__image-container {\r\n    position: var(--va-parallax-image-container-position);\r\n    top: var(--va-parallax-image-container-top);\r\n    left: var(--va-parallax-image-container-left);\r\n    right: var(--va-parallax-image-container-right);\r\n    bottom: var(--va-parallax-image-container-bottom);\r\n    z-index: var(--va-parallax-image-container-z-index);\r\n    contain: var(--va-parallax-image-container-contain);\r\n    user-select: var(--va-parallax-image-container-user-select);\r\n  }\r\n\r\n  &__image {\r\n    position: var(--va-parallax-image-position);\r\n    bottom: var(--va-parallax-image-bottom);\r\n    left: var(--va-parallax-image-left);\r\n    min-width: var(--va-parallax-image-min-width);\r\n    min-height: var(--va-parallax-image-min-height);\r\n    display: var(--va-parallax-image-display);\r\n    transform: var(--va-parallax-image-transform);\r\n    will-change: var(--va-parallax-image-will-change);\r\n    transition: var(--va-parallax-image-transition);\r\n    z-index: var(--va-parallax-image-z-index);\r\n  }\r\n\r\n  &__item-container {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 2;\r\n    contain: strict;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-parallax\"\r\n    :style=\"computedWrapperStyles\"\r\n  >\r\n    <div class=\"va-parallax__image-container\">\r\n      <img\r\n        class=\"va-parallax__image\"\r\n        ref=\"img\"\r\n        :src=\"$props.src\"\r\n        :alt=\"$props.alt\"\r\n        :style=\"computedImgStyles\"\r\n      />\r\n    </div>\r\n    <div class=\"va-parallax__item-container\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nclass ParallaxProps {\r\n  target = prop<Element | string>({ type: [Object, String], default: '' })\r\n  src = prop<string>({ type: String, default: '', required: true })\r\n  alt = prop<string>({ type: String, default: 'parallax' })\r\n  height = prop<number>({ type: Number, default: 400 })\r\n  reversed = prop<boolean>({ type: Boolean, default: false })\r\n  speed = prop<number>({\r\n    type: Number,\r\n    default: 0.5,\r\n    validator: (value: number) => {\r\n      return value >= 0 && value <= 1\r\n    },\r\n  })\r\n}\r\n\r\nconst ParallaxPropsMixin = Vue.with(ParallaxProps)\r\n\r\n@Options({\r\n  name: 'VaParallax',\r\n})\r\nexport default class VaParallax extends mixins(\r\n  ParallaxPropsMixin,\r\n) {\r\n  elOffsetTop = 0\r\n  parallax = 0\r\n  parallaxDist = 0\r\n  percentScrolled = 0\r\n  scrollTop = 0\r\n  windowHeight = 0\r\n  windowBottom = 0\r\n  isLoaded = false\r\n\r\n  get computedWrapperStyles (): Record<string, unknown> {\r\n    return {\r\n      height: this.$props.height + 'px',\r\n    }\r\n  }\r\n\r\n  get targetElement () {\r\n    return typeof this.$props.target === 'string'\r\n      ? document.querySelector(this.$props.target)\r\n      : this.$props.target || this.$el.parentElement\r\n  }\r\n\r\n  get computedImgStyles (): Record<string, unknown> {\r\n    return {\r\n      display: 'block',\r\n      transform: `translate(-50%, ${this.parallax}px)`,\r\n      opacity: this.isLoaded ? 1 : 0,\r\n      top: this.$props.reversed ? 0 : 'auto',\r\n    }\r\n  }\r\n\r\n  get imgHeight (): number {\r\n    // @ts-ignore\r\n    return this.$refs.img.naturalHeight\r\n  }\r\n\r\n  calcDimensions (): void {\r\n    const offset = this.$el.getBoundingClientRect()\r\n\r\n    this.scrollTop = this.targetElement.scrollTop\r\n    this.parallaxDist = this.imgHeight - (this.$props.height as number)\r\n    this.elOffsetTop = offset.top + this.scrollTop\r\n    this.windowHeight = window.innerHeight\r\n    this.windowBottom = this.scrollTop + this.windowHeight\r\n  }\r\n\r\n  translate (): void {\r\n    this.calcDimensions()\r\n    this.percentScrolled = (\r\n      (this.windowBottom - this.elOffsetTop) /\r\n      ((this.$props.height as number) + this.windowHeight)\r\n    )\r\n    this.parallax = Math.round(this.parallaxDist * this.percentScrolled) * (this.$props.speed as number)\r\n    if (this.$props.reversed) {\r\n      this.parallax = -this.parallax\r\n    }\r\n  }\r\n\r\n  addEventListeners (): void {\r\n    this.targetElement.addEventListener('scroll', this.translate)\r\n    this.targetElement.addEventListener('resize', this.translate)\r\n  }\r\n\r\n  removeEventListeners (): void {\r\n    this.targetElement.removeEventListener('scroll', this.translate)\r\n    this.targetElement.removeEventListener('resize', this.translate)\r\n  }\r\n\r\n  initImage (): void {\r\n    const img: HTMLImageElement = this.$refs.img as HTMLImageElement\r\n    if (img.complete) {\r\n      this.translate()\r\n      this.addEventListeners()\r\n    } else {\r\n      img.addEventListener('load', () => {\r\n        this.translate()\r\n        this.addEventListeners()\r\n      }, false)\r\n    }\r\n    this.isLoaded = true\r\n  }\r\n\r\n  mounted () {\r\n    this.initImage()\r\n  }\r\n\r\n  beforeUnmount () {\r\n    this.removeEventListeners()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../../styles/resources/resources';\r\n@import 'variables';\r\n\r\n.va-parallax {\r\n  display: var(--va-parallax-display);\r\n  position: var(--va-parallax-position);\r\n  overflow: var(--va-parallax-overflow);\r\n  width: var(--va-parallax-width);\r\n  z-index: var(--va-parallax-z-index);\r\n\r\n  &__image-container {\r\n    position: var(--va-parallax-image-container-position);\r\n    top: var(--va-parallax-image-container-top);\r\n    left: var(--va-parallax-image-container-left);\r\n    right: var(--va-parallax-image-container-right);\r\n    bottom: var(--va-parallax-image-container-bottom);\r\n    z-index: var(--va-parallax-image-container-z-index);\r\n    contain: var(--va-parallax-image-container-contain);\r\n    user-select: var(--va-parallax-image-container-user-select);\r\n  }\r\n\r\n  &__image {\r\n    position: var(--va-parallax-image-position);\r\n    bottom: var(--va-parallax-image-bottom);\r\n    left: var(--va-parallax-image-left);\r\n    min-width: var(--va-parallax-image-min-width);\r\n    min-height: var(--va-parallax-image-min-height);\r\n    display: var(--va-parallax-image-display);\r\n    transform: var(--va-parallax-image-transform);\r\n    will-change: var(--va-parallax-image-will-change);\r\n    transition: var(--va-parallax-image-transition);\r\n    z-index: var(--va-parallax-image-z-index);\r\n  }\r\n\r\n  &__item-container {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 2;\r\n    contain: strict;\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaParallax from './VaParallax.vue'\r\n\r\nexport default withConfigTransport(VaParallax)\r\n"],"names":["ParallaxPropsMixin","Vue","with","ParallaxProps","constructor","this","prop","type","Object","String","default","required","Number","Boolean","validator","value","VaParallax","mixins","computedWrapperStyles","height","$props","targetElement","target","document","querySelector","$el","parentElement","computedImgStyles","display","transform","parallax","opacity","isLoaded","top","reversed","imgHeight","$refs","img","naturalHeight","calcDimensions","offset","getBoundingClientRect","scrollTop","parallaxDist","elOffsetTop","windowHeight","window","innerHeight","windowBottom","translate","percentScrolled","Math","round","speed","addEventListeners","addEventListener","removeEventListeners","removeEventListener","initImage","complete","mounted","beforeUnmount","Options","name","class","_createElementBlock","style","_ctx","_createElementVNode","_hoisted_1","ref","src","alt","_hoisted_3","_renderSlot","withConfigTransport"],"mappings":"mWAsCA,MAAMA,EAAqBC,EAAIC,KAf/B,MAAMC,cAANC,cACEC,YAASC,EAAuB,CAAEC,KAAM,CAACC,OAAQC,QAASC,QAAS,KACnEL,SAAMC,EAAa,CAAEC,KAAME,OAAQC,QAAS,GAAIC,UAAU,IAC1DN,SAAMC,EAAa,CAAEC,KAAME,OAAQC,QAAS,aAC5CL,YAASC,EAAa,CAAEC,KAAMK,OAAQF,QAAS,MAC/CL,cAAWC,EAAc,CAAEC,KAAMM,QAASH,SAAS,IACnDL,WAAQC,EAAa,CACnBC,KAAMK,OACNF,QAAS,GACTI,UAAYC,GACHA,GAAS,GAAKA,GAAS,OAUpC,IAAqBC,EAArB,MAAqBA,mBAAmBC,EACtCjB,IADFI,kCAGEC,iBAAc,EACdA,cAAW,EACXA,kBAAe,EACfA,qBAAkB,EAClBA,eAAY,EACZA,kBAAe,EACfA,kBAAe,EACfA,eAAW,EAEXa,4BACE,MAAO,CACLC,OAAQd,KAAKe,OAAOD,OAAS,MAIjCE,oBACE,MAAqC,iBAAvBhB,KAAKe,OAAOE,OACtBC,SAASC,cAAcnB,KAAKe,OAAOE,QACnCjB,KAAKe,OAAOE,QAAUjB,KAAKoB,IAAIC,cAGrCC,wBACE,MAAO,CACLC,QAAS,QACTC,UAAW,mBAAmBxB,KAAKyB,cACnCC,QAAS1B,KAAK2B,SAAW,EAAI,EAC7BC,IAAK5B,KAAKe,OAAOc,SAAW,EAAI,QAIpCC,gBAEE,OAAO9B,KAAK+B,MAAMC,IAAIC,cAGxBC,iBACE,MAAMC,EAASnC,KAAKoB,IAAIgB,wBAExBpC,KAAKqC,UAAYrC,KAAKgB,cAAcqB,UACpCrC,KAAKsC,aAAetC,KAAK8B,UAAa9B,KAAKe,OAAOD,OAClDd,KAAKuC,YAAcJ,EAAOP,IAAM5B,KAAKqC,UACrCrC,KAAKwC,aAAeC,OAAOC,YAC3B1C,KAAK2C,aAAe3C,KAAKqC,UAAYrC,KAAKwC,aAG5CI,YACE5C,KAAKkC,iBACLlC,KAAK6C,iBACF7C,KAAK2C,aAAe3C,KAAKuC,cACxBvC,KAAKe,OAAOD,OAAoBd,KAAKwC,cAEzCxC,KAAKyB,SAAWqB,KAAKC,MAAM/C,KAAKsC,aAAetC,KAAK6C,iBAAoB7C,KAAKe,OAAOiC,MAChFhD,KAAKe,OAAOc,WACd7B,KAAKyB,UAAYzB,KAAKyB,UAI1BwB,oBACEjD,KAAKgB,cAAckC,iBAAiB,SAAUlD,KAAK4C,WACnD5C,KAAKgB,cAAckC,iBAAiB,SAAUlD,KAAK4C,WAGrDO,uBACEnD,KAAKgB,cAAcoC,oBAAoB,SAAUpD,KAAK4C,WACtD5C,KAAKgB,cAAcoC,oBAAoB,SAAUpD,KAAK4C,WAGxDS,YACE,MAAMrB,EAAwBhC,KAAK+B,MAAMC,IACrCA,EAAIsB,UACNtD,KAAK4C,YACL5C,KAAKiD,qBAELjB,EAAIkB,iBAAiB,QAAQ,KAC3BlD,KAAK4C,YACL5C,KAAKiD,uBACJ,GAELjD,KAAK2B,UAAW,EAGlB4B,UACEvD,KAAKqD,YAGPG,gBACExD,KAAKmD,yBAzFYxC,KAHpB8C,EAAQ,CACPC,KAAM,gBAEa/C,SAAAA,WCtCZgD,MAAM,mDASNA,MAAM,uwIAbbC,SACED,MAAM,cACLE,QAAOC,2BAERC,QAAAC,GACED,SACEJ,MAAM,qBACNM,IAAI,MACHC,IAAKJ,SAAOI,IACZC,IAAKL,SAAOK,IACZN,QAAOC,mCAGZC,QAAAK,GACEC,kFCZN,MAAeC,EAAoB3D"}