{"version":3,"file":"index18.js","sources":["../../src/components/va-color-palette/VaColorPalette.vue","../../src/components/va-color-palette/VaColorPalette.vue?vue&type=template&id=07dc5043&lang.js","../../src/components/va-color-palette/index.ts"],"sourcesContent":["<template>\r\n  <div class=\"va-color-palette\">\r\n    <ul class=\"va-color-palette__colors\">\r\n      <va-color-indicator\r\n        v-for=\"(color, index) in palette\"\r\n        :modelValue=\"context.valueComputed === color\"\r\n        :key=\"index\"\r\n        :color=\"color\"\r\n        :square=\"indicator === 'square'\"\r\n        @update:modelValue=\"context.valueComputed = color\"\r\n      />\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Vue, Options, prop, setup } from 'vue-class-component'\r\nimport { statefulComponentOptions, useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\r\nimport VaColorIndicator from '../va-color-indicator'\r\n\r\nclass ColorPaletteProps {\r\n  indicator = prop<string>({\r\n    type: String,\r\n    default: 'dot',\r\n    validator: (value: string) => {\r\n      return ['dot', 'square'].includes(value)\r\n    },\r\n  })\r\n\r\n  palette = prop<Array<string>>({\r\n    type: Array,\r\n    default: () => [],\r\n  })\r\n}\r\n\r\n@Options({\r\n  name: 'VaColorPalette',\r\n  components: { VaColorIndicator },\r\n  ...statefulComponentOptions,\r\n})\r\nexport default class VaColorPalette extends Vue.with(ColorPaletteProps) {\r\n  context = setup(() => useStateful(this.$props, this.$emit))\r\n\r\n  isSelected (color: any): boolean {\r\n    return this.context.valueComputed === color\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-color-palette {\r\n  padding-top: 3px;\r\n\r\n  &__colors {\r\n    display: flex;\r\n\r\n    & > * {\r\n      margin-right: 0.25rem;\r\n\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-color-palette\">\r\n    <ul class=\"va-color-palette__colors\">\r\n      <va-color-indicator\r\n        v-for=\"(color, index) in palette\"\r\n        :modelValue=\"context.valueComputed === color\"\r\n        :key=\"index\"\r\n        :color=\"color\"\r\n        :square=\"indicator === 'square'\"\r\n        @update:modelValue=\"context.valueComputed = color\"\r\n      />\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Vue, Options, prop, setup } from 'vue-class-component'\r\nimport { statefulComponentOptions, useStateful } from '../../mixins/StatefulMixin/cStatefulMixin'\r\nimport VaColorIndicator from '../va-color-indicator'\r\n\r\nclass ColorPaletteProps {\r\n  indicator = prop<string>({\r\n    type: String,\r\n    default: 'dot',\r\n    validator: (value: string) => {\r\n      return ['dot', 'square'].includes(value)\r\n    },\r\n  })\r\n\r\n  palette = prop<Array<string>>({\r\n    type: Array,\r\n    default: () => [],\r\n  })\r\n}\r\n\r\n@Options({\r\n  name: 'VaColorPalette',\r\n  components: { VaColorIndicator },\r\n  ...statefulComponentOptions,\r\n})\r\nexport default class VaColorPalette extends Vue.with(ColorPaletteProps) {\r\n  context = setup(() => useStateful(this.$props, this.$emit))\r\n\r\n  isSelected (color: any): boolean {\r\n    return this.context.valueComputed === color\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-color-palette {\r\n  padding-top: 3px;\r\n\r\n  &__colors {\r\n    display: flex;\r\n\r\n    & > * {\r\n      margin-right: 0.25rem;\r\n\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\n\r\nimport VaColorPaletteComponent from './VaColorPalette.vue'\r\n\r\nexport const VaColorPalette = withConfigTransport(VaColorPaletteComponent)\r\n"],"names":["ColorPaletteProps","constructor","this","prop","type","String","default","validator","value","includes","Array","VaColorPalette","Vue","with","setup","useStateful","$props","$emit","isSelected","color","context","valueComputed","Options","name","components","VaColorIndicator","statefulComponentOptions","_mergeProps","class","_ctx","index","modelValue","key","square","withConfigTransport","VaColorPaletteComponent"],"mappings":"ogBAoBA,MAAMA,kBAANC,cACEC,eAAYC,EAAa,CACvBC,KAAMC,OACNC,QAAS,MACTC,UAAYC,GACH,CAAC,MAAO,UAAUC,SAASD,KAItCN,aAAUC,EAAoB,CAC5BC,KAAMM,MACNJ,QAAS,IAAM,MASnB,IAAqBK,EAArB,MAAqBA,uBAAuBC,EAAIC,KAAKb,oBAArDC,kCACEC,aAAUY,GAAM,IAAMC,EAAYb,KAAKc,OAAQd,KAAKe,SAEpDC,WAAYC,GACV,OAAOjB,KAAKkB,QAAQC,gBAAkBF,IAJrBR,KALpBW,EAAQ,CACPC,KAAM,iBACNC,WAAY,CAAEC,iBAAAA,MACXC,KAEgBf,SAAAA,oVCvCnBgB,GAAKC,MAAM,iHAGoBC,YAAjBV,EAAOW,YACdC,WAAYF,UAAQR,gBAAkBF,EACtCa,IAAKF,EACLX,MAAOA,EACPc,kBAAQJ,2JCJJlB,EAAiBuB,EAAoBC"}