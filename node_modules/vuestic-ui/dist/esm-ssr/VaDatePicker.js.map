{"version":3,"file":"VaDatePicker.js","sources":["../../src/components/va-date-picker/hooks/model-value-helper.ts","../../src/components/va-date-picker/utils/child-props.ts","../../src/components/va-date-picker/hooks/view.ts","../../src/components/va-date-picker/components/VaDayPicker/va-date-picker-calendar-hook.ts","../../src/components/va-date-picker/hooks/grid-keyboard-navigation.ts","../../src/components/va-date-picker/utils/date-utils.ts","../../src/components/va-date-picker/hooks/use-picker.ts","../../src/components/va-date-picker/components/VaDatePickerCell.vue","../../src/components/va-date-picker/components/VaDatePickerCell.vue?vue&type=template&id=1c43554e&lang.js","../../src/components/va-date-picker/components/VaDayPicker/VaDayPicker.vue","../../src/components/va-date-picker/components/VaDayPicker/VaDayPicker.vue?vue&type=template&id=cfaf508c&lang.js","../../src/components/va-date-picker/components/VaDatePickerHeader/VaDatePickerHeader.vue","../../src/components/va-date-picker/components/VaDatePickerHeader/VaDatePickerHeader.vue?vue&type=template&id=0e4bae0c&lang.js","../../src/components/va-date-picker/components/VaMonthPicker/VaMonthPicker.vue","../../src/components/va-date-picker/components/VaMonthPicker/VaMonthPicker.vue?vue&type=template&id=299f7c82&lang.js","../../src/components/va-date-picker/components/VaYearPicker/VaYearPicker.vue","../../src/components/va-date-picker/components/VaYearPicker/VaYearPicker.vue?vue&type=template&id=01d8d4fa&lang.js","../../src/components/va-date-picker/VaDatePicker.vue","../../src/components/va-date-picker/VaDatePicker.vue?vue&type=template&id=efd6986a&lang.js"],"sourcesContent":["import { VaDatePickerModelValue, VaDatePickerModelValuePeriod, VaDatePickerMode } from '../types/types'\r\n\r\nexport const isRange = (value: VaDatePickerModelValue): value is VaDatePickerModelValuePeriod => {\r\n  return typeof (value as any).start !== 'undefined' && typeof (value as any).end !== 'undefined'\r\n}\r\nexport const isSingleDate = (value: VaDatePickerModelValue): value is Date => value instanceof Date\r\nexport const isDates = (value: VaDatePickerModelValue): value is Date[] => Array.isArray(value)\r\n\r\nconst modeInitialValue = (date: Date, mode: VaDatePickerMode) => {\r\n  if (mode === 'single') {\r\n    return date\r\n  } else if (mode === 'range') {\r\n    return { start: date, end: null }\r\n  } else if (mode === 'multiple') {\r\n    return [date]\r\n  } else if (mode === 'auto') {\r\n    return date\r\n  }\r\n\r\n  throw new Error('Unknown mode')\r\n}\r\n\r\nconst throwIncorrectModelValueError = (modelValue: VaDatePickerModelValue, mode: VaDatePickerMode) : never => {\r\n  throw Error(`Incorrect modelValue for mode ${mode}. Got ${JSON.stringify(modelValue)}`)\r\n}\r\n\r\nconst modeFromModelValue = (modelValue: VaDatePickerModelValue): VaDatePickerMode => {\r\n  if (isSingleDate(modelValue)) {\r\n    return 'single'\r\n  } else if (isRange(modelValue)) {\r\n    return 'range'\r\n  } else if (isDates(modelValue)) {\r\n    return 'multiple'\r\n  }\r\n\r\n  return throwIncorrectModelValueError(modelValue, 'auto')\r\n}\r\n\r\nconst sortRange = (modelValue: VaDatePickerModelValuePeriod) => {\r\n  if (modelValue.start && modelValue.end) {\r\n    if (modelValue.start > modelValue.end) {\r\n      return { start: modelValue.end, end: modelValue.start }\r\n    }\r\n  }\r\n\r\n  return modelValue\r\n}\r\n\r\nexport const useDatePickerModelValue = (\r\n  props: {\r\n    [key: string]: any,\r\n    modelValue?: VaDatePickerModelValue,\r\n    mode: VaDatePickerMode\r\n  },\r\n  emit: (event: 'update:modelValue', newValue: VaDatePickerModelValue) => any,\r\n  dateEqual: (date1: Date | null, date2: Date | null) => boolean,\r\n) => {\r\n  const updateModelValue = (date: Date) => {\r\n    if (!props.modelValue) {\r\n      emit('update:modelValue', modeInitialValue(date, props.mode))\r\n      return\r\n    }\r\n\r\n    const mode = props.mode === 'auto' ? modeFromModelValue(props.modelValue) : props.mode\r\n\r\n    if (mode === 'single') {\r\n      if (!isSingleDate(props.modelValue)) {\r\n        return throwIncorrectModelValueError(props.modelValue, mode)\r\n      }\r\n\r\n      emit('update:modelValue', date)\r\n    } else if (mode === 'range') {\r\n      if (!isRange(props.modelValue)) {\r\n        return throwIncorrectModelValueError(props.modelValue, mode)\r\n      }\r\n\r\n      if (props.modelValue.end && dateEqual(props.modelValue.end, date)) {\r\n        return emit('update:modelValue', { start: props.modelValue.start, end: null })\r\n      }\r\n      if (props.modelValue.start && dateEqual(props.modelValue.start, date)) {\r\n        return emit('update:modelValue', { start: null, end: props.modelValue.end })\r\n      }\r\n\r\n      if (props.modelValue.end === null) {\r\n        return emit('update:modelValue', sortRange({ start: props.modelValue.start, end: date }))\r\n      }\r\n      if (props.modelValue.start === null) {\r\n        return emit('update:modelValue', sortRange({ end: props.modelValue.end, start: date }))\r\n      }\r\n\r\n      emit('update:modelValue', { start: date, end: null })\r\n    } else if (mode === 'multiple') {\r\n      if (!isDates(props.modelValue)) {\r\n        return throwIncorrectModelValueError(props.modelValue, mode)\r\n      }\r\n\r\n      const isDatesIncludesDate = !!props.modelValue.find((d) => dateEqual(d, date))\r\n\r\n      if (isDatesIncludesDate) {\r\n        emit('update:modelValue', props.modelValue.filter((d) => !dateEqual(d, date)))\r\n      } else {\r\n        emit('update:modelValue', [...props.modelValue, date].sort((a, b) => a.getTime() - b.getTime()))\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    updateModelValue,\r\n  }\r\n}\r\n","import { ComponentOptionsBase, PropType, computed, ComputedRef, Prop } from 'vue'\r\n\r\n/**\r\n * Accepts parent component props and return value only for child component props.\r\n *\r\n * Used to proxy child component props from parent.\r\n */\r\nexport const filterComponentProps = (propsValues: Record<string, any>, childProps: Record<string, any>): ComputedRef<Record<keyof typeof childProps, any>> => {\r\n  return computed(() => Object\r\n    .keys(childProps)\r\n    .reduce<Record<string, unknown>>((acc, propName) => {\r\n      acc[propName] = propsValues[propName]\r\n      return acc\r\n    }, {}),\r\n  )\r\n}\r\n\r\n// ExtractOptionProp taken from Vue3 source code\r\ndeclare type ExtractOptionProp<T> = T extends ComponentOptionsBase<infer P, any, any, any, any, any, any, any> ? unknown extends P ? {} : P : {};\r\n// Remove useless readonly and nullable key here:\r\n// -readonly removes readonly\r\n// -? removes undefined from key, so we can be sure that prop exists and should have type.\r\ndeclare type ExtractPropsType<T> = {\r\n  -readonly [K in keyof ExtractOptionProp<T>]-?: {\r\n    type: PropType<ExtractOptionProp<T>[K]>,\r\n    required: undefined extends ExtractOptionProp<T>[K] ? false: true,\r\n  }\r\n}\r\n\r\n/* Works only with defineComponent function */\r\nexport function extractComponentProps<T> (component: T, ignoreProps?: string[]): ExtractPropsType<T> {\r\n  const props = (component as any).props\r\n\r\n  if (ignoreProps) {\r\n    return Object\r\n      .keys((component as any).props)\r\n      .reduce<Record<string, unknown>>((acc, propName) => {\r\n        if (ignoreProps.includes(propName)) { return acc }\r\n\r\n        if (props[propName] === undefined) { return acc }\r\n\r\n        acc[propName] = props[propName]\r\n\r\n        return acc\r\n      }, {}) as ExtractPropsType<T>\r\n  }\r\n\r\n  return props\r\n}\r\n\r\ndeclare type ExtractEmitsType<T> = T extends ComponentOptionsBase<any, any, any, any, any, any, any, infer E> ? E: []\r\n\r\nexport function extractComponentEmits<T> (component: T): ExtractEmitsType<T> {\r\n  return (component as any).emits\r\n}\r\n","import { VaDatePickerView, VaDatePickerViewProp } from './../types/types'\r\nimport { computed, ref } from 'vue'\r\n\r\nconst JANUARY_MONTH_INDEX = 0\r\nconst DECEMBER_MONTH_INDEX = 11\r\n\r\nconst addMonth = (view: VaDatePickerView) => {\r\n  if (view.month === DECEMBER_MONTH_INDEX) {\r\n    return { ...view, year: view.year + 1, month: JANUARY_MONTH_INDEX }\r\n  } else {\r\n    return { ...view, month: view.month + 1 }\r\n  }\r\n}\r\n\r\nconst subMonth = (view: VaDatePickerView) => {\r\n  if (view.month === JANUARY_MONTH_INDEX) {\r\n    return { ...view, year: view.year - 1, month: DECEMBER_MONTH_INDEX }\r\n  } else {\r\n    return { ...view, month: view.month - 1 }\r\n  }\r\n}\r\n\r\nexport const useView = (\r\n  props: { [key: string]: any, 'view'?: VaDatePickerViewProp },\r\n  emit: (event: any | 'update:view', newValue: VaDatePickerViewProp) => any,\r\n  defaultOverride?: VaDatePickerViewProp,\r\n) => {\r\n  const defaultView: VaDatePickerView = {\r\n    type: 'day',\r\n    year: new Date().getFullYear(),\r\n    month: new Date().getMonth(),\r\n    ...defaultOverride,\r\n  }\r\n\r\n  const statefulView = ref(defaultView)\r\n\r\n  const syncView = computed<VaDatePickerView>({\r\n    get () {\r\n      // Merge default view and user view prop\r\n      return { ...statefulView.value, ...props.view }\r\n    },\r\n    set (view: VaDatePickerView) {\r\n      statefulView.value = view\r\n\r\n      emit('update:view', view)\r\n    },\r\n  })\r\n\r\n  const next = () => {\r\n    if (syncView.value.type === 'day') {\r\n      syncView.value = addMonth(syncView.value)\r\n    } else if (syncView.value.type === 'month') {\r\n      syncView.value = { ...syncView.value, year: syncView.value.year + 1 }\r\n    }\r\n  }\r\n\r\n  const prev = () => {\r\n    if (syncView.value.type === 'day') {\r\n      syncView.value = subMonth(syncView.value)\r\n    } else if (syncView.value.type === 'month') {\r\n      syncView.value = { ...syncView.value, year: syncView.value.year - 1 }\r\n    }\r\n  }\r\n\r\n  return {\r\n    syncView,\r\n    next,\r\n    prev,\r\n  }\r\n}\r\n","import { computed, Ref } from 'vue'\r\nimport { VaDatePickerView } from '../../types/types'\r\n\r\n/** Returns last day of previous month */\r\nexport const getMonthDaysCount = (year: number, month: number): number => new Date(year, month + 1, 0).getDate()\r\n\r\nexport const getMonthStartWeekday = (year: number, month: number) => new Date(year, month, 1).getDay()\r\n\r\n/** Returns array from 1 to length */\r\nexport const getNumbersArray = (length: number) => Array.from(Array(length).keys()).map((k) => k + 1)\r\n\r\nexport const useVaDatePickerCalendar = (view: Ref<VaDatePickerView>, options?: { firstWeekday?: Ref<'Monday' | 'Sunday'> }) => {\r\n  const CALENDAR_ROWS_COUNT = 6 // Need 6 rows if first day of a month is Saturday and the last day is Monday 31th.\r\n\r\n  const localizeWeekday = (weekdayNumber: number) => {\r\n    if (options && options.firstWeekday?.value === 'Monday') {\r\n      // Set Sunday as 7th day of the week and Monday as first day of the week.\r\n      return weekdayNumber === 0 ? 6 : weekdayNumber - 1\r\n    }\r\n\r\n    return weekdayNumber\r\n  }\r\n\r\n  const currentMonthStartWeekday = computed(() => localizeWeekday(getMonthStartWeekday(view.value.year, view.value.month)))\r\n\r\n  const getPreviousDates = () => {\r\n    if (currentMonthStartWeekday.value === 0) { return [] }\r\n\r\n    const prevMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month - 1)\r\n    const prevMonthDays: number[] = getNumbersArray(prevMonthDaysCount)\r\n\r\n    return prevMonthDays\r\n      .slice(-currentMonthStartWeekday.value)\r\n      .map((d) => new Date(view.value.year, view.value.month - 1, d))\r\n  }\r\n\r\n  const getCurrentDates = () => {\r\n    const currentMonthDays: number[] = getNumbersArray(getMonthDaysCount(view.value.year, view.value.month))\r\n\r\n    return currentMonthDays.map((d) => new Date(view.value.year, view.value.month, d))\r\n  }\r\n\r\n  const prevAndCurrentDays = computed(() => [...getPreviousDates(), ...getCurrentDates()])\r\n  const currentMonthEndIndex = computed(() => prevAndCurrentDays.value.length)\r\n\r\n  const calendarDates = computed(() => {\r\n    const days = prevAndCurrentDays.value\r\n\r\n    const daysRemaining = 7 * CALENDAR_ROWS_COUNT - days.length\r\n\r\n    const nextMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month + 1)\r\n    const nextMonthDays: number[] = getNumbersArray(nextMonthDaysCount)\r\n\r\n    return [\r\n      ...days,\r\n      ...nextMonthDays\r\n        .slice(0, daysRemaining)\r\n        .map((d) => new Date(view.value.year, view.value.month + 1, d)),\r\n    ]\r\n  })\r\n\r\n  return { calendarDates, currentMonthStartIndex: currentMonthStartWeekday, currentMonthEndIndex }\r\n}\r\n","import { ref, Ref, isRef, unref } from 'vue'\r\n\r\nfunction safeUnref<T> (refOrRaw: Ref<T> | T): T {\r\n  if (isRef(refOrRaw)) {\r\n    return unref(refOrRaw)\r\n  }\r\n\r\n  return refOrRaw\r\n}\r\n\r\nfunction isUndefined<T> (t: T | undefined): t is undefined {\r\n  return t === undefined\r\n}\r\n\r\nexport const useGridKeyboardNavigation = (\r\n  {\r\n    rowSize,\r\n    start,\r\n    end,\r\n    onSelected,\r\n    onFocusIndex,\r\n  }: {\r\n    rowSize: number,\r\n    start?: Ref<number> | number,\r\n    end?: Ref<number> | number,\r\n    onFocusIndex?: Ref<number> | number,\r\n    onSelected?: (selectedValue: number) => any | null,\r\n  },\r\n) => {\r\n  const focusedCellIndex = ref(-1)\r\n\r\n  let previouslyClicked = false\r\n  const onMousedown = () => { previouslyClicked = true }\r\n\r\n  const onFocus = () => {\r\n    if (previouslyClicked) { return }\r\n    previouslyClicked = false\r\n\r\n    const index = onFocusIndex === undefined ? safeUnref(start) || 0 : safeUnref(onFocusIndex)\r\n\r\n    focusedCellIndex.value = index\r\n  }\r\n\r\n  const onBlur = () => {\r\n    previouslyClicked = false\r\n\r\n    focusedCellIndex.value = -1\r\n  }\r\n\r\n  const onKeydown = (e: KeyboardEvent) => {\r\n    if (['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'Enter', 'Space'].includes(e.key)) {\r\n      // Prevent default for arrow keys and enter. Do not prevent default for tab! :)\r\n      e.preventDefault()\r\n    }\r\n\r\n    if (e.key === 'Enter' || e.key === 'Space') {\r\n      if (onSelected === undefined) { return }\r\n\r\n      onSelected(focusedCellIndex.value)\r\n      return\r\n    }\r\n\r\n    if (e.key === 'ArrowRight') {\r\n      focusedCellIndex.value += 1\r\n    }\r\n    if (e.key === 'ArrowLeft') {\r\n      focusedCellIndex.value -= 1\r\n    }\r\n    if (e.key === 'ArrowDown') {\r\n      focusedCellIndex.value += rowSize\r\n    }\r\n    if (e.key === 'ArrowUp') {\r\n      focusedCellIndex.value -= rowSize\r\n    }\r\n\r\n    if (!isUndefined(start) && focusedCellIndex.value < safeUnref(start)) {\r\n      focusedCellIndex.value = safeUnref(start)\r\n    }\r\n    if (!isUndefined(end) && focusedCellIndex.value > safeUnref(end) - 1) {\r\n      focusedCellIndex.value = safeUnref(end) - 1\r\n    }\r\n  }\r\n\r\n  const containerAttributes = {\r\n    onFocus, onKeydown, onBlur, onMousedown, tabindex: 0,\r\n  }\r\n\r\n  return {\r\n    focusedCellIndex, containerAttributes,\r\n  }\r\n}\r\n","\r\nexport const isDatesDayEqual = (date1: Date | null, date2: Date | null): boolean => date1?.toDateString() === date2?.toDateString()\r\n\r\nexport const isDatesMonthEqual = (date1: Date | null, date2: Date | null): boolean => {\r\n  return date1?.getFullYear() === date2?.getFullYear() && date1?.getMonth() === date2?.getMonth()\r\n}\r\n\r\nexport const isDatesYearEqual = (date1: Date | null, date2: Date | null): boolean => {\r\n  return date1?.getFullYear() === date2?.getFullYear()\r\n}\r\n\r\nexport const createYearDate = (year: number) => {\r\n  const date = new Date()\r\n  date.setFullYear(year)\r\n  return date\r\n}\r\n\r\nexport const isDatesArrayIncludeDay = (dates: Date[], date: Date): boolean => {\r\n  return !!dates.find((d) => isDatesDayEqual(d, date))\r\n}\r\n\r\nexport const isDatesArrayIncludeMonth = (dates: Date[], date: Date): boolean => {\r\n  return !!dates.find((d) => isDatesMonthEqual(d, date))\r\n}\r\n","import { isDatesMonthEqual, isDatesDayEqual, isDatesYearEqual } from './../utils/date-utils'\r\nimport { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerType } from '../types/types'\r\nimport { isDates, isRange, isSingleDate, useDatePickerModelValue } from './model-value-helper'\r\nimport { computed, ComputedRef, ref } from 'vue'\r\n\r\nconst getDateEqualFunction = (type: VaDatePickerType) => {\r\n  return {\r\n    month: isDatesMonthEqual,\r\n    day: isDatesDayEqual,\r\n    year: isDatesYearEqual,\r\n  }[type]\r\n}\r\n\r\nexport const useDatePicker = (\r\n  type: VaDatePickerType,\r\n  dates: ComputedRef<Date[]>,\r\n  props: {\r\n    [key: string]: any,\r\n    modelValue?: VaDatePickerModelValue,\r\n    mode: VaDatePickerMode,\r\n  },\r\n  emit: (\r\n    event: 'update:modelValue' | any,\r\n    ...args: any[]\r\n  ) => any,\r\n) => {\r\n  const datesEqual = getDateEqualFunction(type)\r\n\r\n  const hoveredIndex = ref(0)\r\n  const hoveredValue = computed(() => dates.value[hoveredIndex.value])\r\n\r\n  const { updateModelValue } = useDatePickerModelValue(\r\n    props,\r\n    emit,\r\n    datesEqual,\r\n  )\r\n\r\n  const onClick = (date: Date) => {\r\n    updateModelValue(date)\r\n    emit(`click:${type}`, date)\r\n  }\r\n\r\n  const isToday = (date: Date): boolean => {\r\n    const today = new Date()\r\n    return datesEqual(today, date)\r\n  }\r\n\r\n  const isSelected = (date: Date): boolean => {\r\n    if (!props.modelValue) { return false }\r\n\r\n    if (isSingleDate(props.modelValue)) {\r\n      return datesEqual(props.modelValue, date)\r\n    } else if (isDates(props.modelValue)) {\r\n      return !!props.modelValue.find((d) => datesEqual(d, date))\r\n    } else if (isRange(props.modelValue)) {\r\n      return datesEqual(props.modelValue.start, date) || datesEqual(props.modelValue.end, date)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  const isInRange = (date: Date): boolean => {\r\n    if (!props.modelValue) { return false }\r\n\r\n    if (!isRange(props.modelValue)) { return false }\r\n\r\n    if (props.modelValue.start && props.modelValue.end) {\r\n      return props.modelValue.start < date && props.modelValue.end > date\r\n    }\r\n\r\n    const selectedDate = props.modelValue.start || props.modelValue.end\r\n\r\n    if (selectedDate) {\r\n      if (!hoveredValue.value) { return false }\r\n\r\n      return selectedDate < date\r\n        ? (hoveredValue.value >= date)\r\n        : (hoveredValue.value <= date)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  return {\r\n    hoveredIndex,\r\n    hoveredValue,\r\n    onClick,\r\n    isToday,\r\n    isSelected,\r\n    isInRange,\r\n  }\r\n}\r\n","<template>\r\n  <div\r\n    v-if=\"hidden\"\r\n    class=\"va-date-picker-cell va-date-picker-cell_clear\"\r\n  />\r\n  <div\r\n    v-else\r\n    class=\"va-date-picker-cell\"\r\n    :class=\"{\r\n      'va-date-picker-cell_other-month': otherMonth,\r\n      'va-date-picker-cell_today': highlightToday && today,\r\n      'va-date-picker-cell_in-range': inRange,\r\n      'va-date-picker-cell_disabled': disabled,\r\n      'va-date-picker-cell_highlighted-weekend': highlightWeekend && weekend,\r\n      'va-date-picker-cell_selected': selected,\r\n      'va-date-picker-cell_focused': focused,\r\n    }\"\r\n    @click=\"onClick\"\r\n    @keypress.space.enter.prevent.stop=\"onClick\"\r\n  >\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'VaDatePickerCell',\r\n\r\n  props: {\r\n    otherMonth: { type: Boolean, default: false },\r\n    today: { type: Boolean, default: false },\r\n    inRange: { type: Boolean, default: false },\r\n    disabled: { type: Boolean, default: false },\r\n    selected: { type: Boolean, default: false },\r\n    weekend: { type: Boolean, default: false },\r\n    hidden: { type: Boolean, default: false },\r\n    focused: { type: Boolean, default: false },\r\n    highlightWeekend: { type: Boolean, default: false },\r\n    highlightToday: { type: Boolean, default: false },\r\n  },\r\n\r\n  emits: ['click'],\r\n\r\n  setup (props, { emit }) {\r\n    const onClick = () => {\r\n      if (!props.disabled) { emit('click') }\r\n    }\r\n\r\n    return {\r\n      onClick,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-date-picker-cell {\r\n  position: relative;\r\n  color: var(--va-date-picker-text-color);\r\n  font-family: Source Sans Pro;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: var(--va-date-picker-cell-size);\r\n  min-height: var(--va-date-picker-cell-size);\r\n  min-width: var(--va-date-picker-cell-size);\r\n  cursor: pointer;\r\n  user-select: none;\r\n  border-radius: var(--va-date-picker-cell-radius);\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  z-index: 1;\r\n\r\n  &::after,\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 100%;\r\n    width: 100%;\r\n    left: 0;\r\n    z-index: -1;\r\n    user-select: none;\r\n    box-sizing: border-box;\r\n    border-radius: var(--va-date-picker-cell-radius);\r\n  }\r\n\r\n  &_clear {\r\n    cursor: default;\r\n    opacity: 0;\r\n  }\r\n\r\n  &_highlighted-weekend { color: var(--va-date-picker-weekends-color); }\r\n\r\n  &_selected {\r\n    background-color: var(--va-date-picker-selected-background);\r\n    color: var(--va-date-picker-selected-text);\r\n  }\r\n\r\n  &_in-range {\r\n    &::before {\r\n      border: 2px solid var(--va-date-picker-color);\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n\r\n  &_today {\r\n    color: var(--va-date-picker-today-text);\r\n\r\n    &::after {\r\n      background-color: var(--va-date-picker-today-background);\r\n      opacity: var(--va-date-picker-today-background-opacity);\r\n    }\r\n  }\r\n\r\n  &_selected.va-date-picker-cell_today {\r\n    &::before {\r\n      border: 2px solid var(--va-date-picker-selected-text);\r\n      opacity: 1;\r\n    }\r\n\r\n    &::after {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  &_other-month {\r\n    opacity: 0.5;\r\n  }\r\n\r\n  &:hover,\r\n  &_focused,\r\n  &_focused:hover {\r\n    $focus-border-opacity: 0.8;\r\n\r\n    &::before {\r\n      border: 2px solid var(--va-date-picker-focused-border-color);\r\n      opacity: $focus-border-opacity;\r\n    }\r\n\r\n    &.va-date-picker-cell_selected {\r\n      &::before {\r\n        width: calc(100% - 4px);\r\n        height: calc(100% - 4px);\r\n        transform: translateY(2px) translateX(2px);\r\n        padding: 2px;\r\n        border: 2px solid var(--va-date-picker-focused-selected-border-color);\r\n        opacity: $focus-border-opacity;\r\n      }\r\n\r\n      &.va-date-picker-cell_today {\r\n        &::after {\r\n          opacity: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &_disabled {\r\n    cursor: default;\r\n    color: var(--va-date-picker-secondary);\r\n    opacity: 0.5;\r\n\r\n    &::after {\r\n      // Crossline\r\n      opacity: 0.5;\r\n      border: none;\r\n      height: 2px;\r\n      width: 50%;\r\n      background: var(--va-date-picker-secondary);\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n\r\n    &.va-date-picker-cell_today {\r\n      color: var(--va-date-picker-today-text);\r\n\r\n      &::after {\r\n        background: var(--va-date-picker-today-text);\r\n      }\r\n\r\n      &::before {\r\n        background-color: var(--va-date-picker-today-background);\r\n        opacity: var(--va-date-picker-today-background-opacity);\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    v-if=\"hidden\"\r\n    class=\"va-date-picker-cell va-date-picker-cell_clear\"\r\n  />\r\n  <div\r\n    v-else\r\n    class=\"va-date-picker-cell\"\r\n    :class=\"{\r\n      'va-date-picker-cell_other-month': otherMonth,\r\n      'va-date-picker-cell_today': highlightToday && today,\r\n      'va-date-picker-cell_in-range': inRange,\r\n      'va-date-picker-cell_disabled': disabled,\r\n      'va-date-picker-cell_highlighted-weekend': highlightWeekend && weekend,\r\n      'va-date-picker-cell_selected': selected,\r\n      'va-date-picker-cell_focused': focused,\r\n    }\"\r\n    @click=\"onClick\"\r\n    @keypress.space.enter.prevent.stop=\"onClick\"\r\n  >\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'VaDatePickerCell',\r\n\r\n  props: {\r\n    otherMonth: { type: Boolean, default: false },\r\n    today: { type: Boolean, default: false },\r\n    inRange: { type: Boolean, default: false },\r\n    disabled: { type: Boolean, default: false },\r\n    selected: { type: Boolean, default: false },\r\n    weekend: { type: Boolean, default: false },\r\n    hidden: { type: Boolean, default: false },\r\n    focused: { type: Boolean, default: false },\r\n    highlightWeekend: { type: Boolean, default: false },\r\n    highlightToday: { type: Boolean, default: false },\r\n  },\r\n\r\n  emits: ['click'],\r\n\r\n  setup (props, { emit }) {\r\n    const onClick = () => {\r\n      if (!props.disabled) { emit('click') }\r\n    }\r\n\r\n    return {\r\n      onClick,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-date-picker-cell {\r\n  position: relative;\r\n  color: var(--va-date-picker-text-color);\r\n  font-family: Source Sans Pro;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: var(--va-date-picker-cell-size);\r\n  min-height: var(--va-date-picker-cell-size);\r\n  min-width: var(--va-date-picker-cell-size);\r\n  cursor: pointer;\r\n  user-select: none;\r\n  border-radius: var(--va-date-picker-cell-radius);\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  z-index: 1;\r\n\r\n  &::after,\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 100%;\r\n    width: 100%;\r\n    left: 0;\r\n    z-index: -1;\r\n    user-select: none;\r\n    box-sizing: border-box;\r\n    border-radius: var(--va-date-picker-cell-radius);\r\n  }\r\n\r\n  &_clear {\r\n    cursor: default;\r\n    opacity: 0;\r\n  }\r\n\r\n  &_highlighted-weekend { color: var(--va-date-picker-weekends-color); }\r\n\r\n  &_selected {\r\n    background-color: var(--va-date-picker-selected-background);\r\n    color: var(--va-date-picker-selected-text);\r\n  }\r\n\r\n  &_in-range {\r\n    &::before {\r\n      border: 2px solid var(--va-date-picker-color);\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n\r\n  &_today {\r\n    color: var(--va-date-picker-today-text);\r\n\r\n    &::after {\r\n      background-color: var(--va-date-picker-today-background);\r\n      opacity: var(--va-date-picker-today-background-opacity);\r\n    }\r\n  }\r\n\r\n  &_selected.va-date-picker-cell_today {\r\n    &::before {\r\n      border: 2px solid var(--va-date-picker-selected-text);\r\n      opacity: 1;\r\n    }\r\n\r\n    &::after {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  &_other-month {\r\n    opacity: 0.5;\r\n  }\r\n\r\n  &:hover,\r\n  &_focused,\r\n  &_focused:hover {\r\n    $focus-border-opacity: 0.8;\r\n\r\n    &::before {\r\n      border: 2px solid var(--va-date-picker-focused-border-color);\r\n      opacity: $focus-border-opacity;\r\n    }\r\n\r\n    &.va-date-picker-cell_selected {\r\n      &::before {\r\n        width: calc(100% - 4px);\r\n        height: calc(100% - 4px);\r\n        transform: translateY(2px) translateX(2px);\r\n        padding: 2px;\r\n        border: 2px solid var(--va-date-picker-focused-selected-border-color);\r\n        opacity: $focus-border-opacity;\r\n      }\r\n\r\n      &.va-date-picker-cell_today {\r\n        &::after {\r\n          opacity: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &_disabled {\r\n    cursor: default;\r\n    color: var(--va-date-picker-secondary);\r\n    opacity: 0.5;\r\n\r\n    &::after {\r\n      // Crossline\r\n      opacity: 0.5;\r\n      border: none;\r\n      height: 2px;\r\n      width: 50%;\r\n      background: var(--va-date-picker-secondary);\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n\r\n    &.va-date-picker-cell_today {\r\n      color: var(--va-date-picker-today-text);\r\n\r\n      &::after {\r\n        background: var(--va-date-picker-today-text);\r\n      }\r\n\r\n      &::before {\r\n        background-color: var(--va-date-picker-today-background);\r\n        opacity: var(--va-date-picker-today-background-opacity);\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-day-picker\" v-bind=\"containerAttributes\">\r\n    <template v-if=\"!hideWeekDays\">\r\n      <div\r\n        v-for=\"weekday in weekdayNamesComputed\" :key=\"weekday\"\r\n        class=\"va-day-picker__weekday\"\r\n      >\r\n        <slot name=\"weekday\">\r\n          {{ weekday }}\r\n        </slot>\r\n      </div>\r\n    </template>\r\n\r\n    <div\r\n      class=\"va-day-picker__calendar__day-wrapper\"\r\n      v-for=\"(date, index) in calendarDates\"\r\n      :key=\"date\"\r\n      @mouseenter=\"hoveredIndex = index\"\r\n      @mouseleave=\"hoveredIndex = -1\"\r\n    >\r\n      <va-date-picker-cell\r\n        :hidden=\"isOtherMonth(date) && !showOtherMonths\"\r\n        :today=\"isToday(date)\"\r\n        :selected=\"isSelected(date)\"\r\n        :in-range=\"isInRange(date)\"\r\n        :other-month=\"isOtherMonth(date)\"\r\n        :weekend=\"isDateWeekend(date)\"\r\n        :disabled=\"isDateDisabled(date)\"\r\n        :focused=\"hoveredIndex === index\"\r\n        :highlight-today=\"highlightToday\"\r\n        :highlight-weekend=\"highlightWeekend\"\r\n        @click=\"onClick(date); focusedCellIndex = index\"\r\n      >\r\n        <span class=\"va-date-picker-cell__day\">\r\n          <slot name=\"day\" v-bind=\"{ date }\">\r\n            {{ date.getDate() }}\r\n          </slot>\r\n        </span>\r\n      </va-date-picker-cell>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, defineComponent, toRefs, PropType, watch } from 'vue'\r\nimport { useVaDatePickerCalendar } from './va-date-picker-calendar-hook'\r\nimport { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerView } from '../../types/types'\r\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\r\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\r\nimport { useDatePicker } from '../../hooks/use-picker'\r\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\r\n\r\nconst VaDatePickerCellProps = extractComponentProps(VaDatePickerCell, ['date', 'selectedValue', 'focusedDate', 'focused'])\r\n\r\nexport default defineComponent({\r\n  name: 'VaDayPicker',\r\n\r\n  components: { VaDatePickerCell },\r\n\r\n  props: {\r\n    monthNames: { type: Array as PropType<string[]>, required: true },\r\n    weekdayNames: { type: Array as PropType<string[]>, required: true },\r\n    firstWeekday: { type: String as PropType<'Monday' | 'Sunday'>, default: 'Sunday' },\r\n    hideWeekDays: { type: Boolean, default: false },\r\n    view: { type: Object as PropType<VaDatePickerView>, default: () => ({ type: 'day' }) },\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue> },\r\n    mode: { type: String as PropType<VaDatePickerMode>, default: 'auto' },\r\n    showOtherMonths: { type: Boolean, default: false },\r\n    allowedDays: { type: Function as PropType<(date: Date) => boolean> },\r\n    weekends: { type: [Function] as PropType<(d: Date) => boolean> },\r\n    highlightWeekend: { type: Boolean, default: false },\r\n    highlightToday: { type: Boolean, default: false },\r\n  },\r\n\r\n  emits: ['update:modelValue', 'hover:day', 'click:day'],\r\n\r\n  setup (props, { emit }) {\r\n    const { firstWeekday, weekdayNames, view } = toRefs(props)\r\n\r\n    const VaDayPickerCellPropValues = filterComponentProps(props, VaDatePickerCellProps)\r\n\r\n    const { calendarDates, currentMonthStartIndex, currentMonthEndIndex } = useVaDatePickerCalendar(view, { firstWeekday })\r\n\r\n    const weekdayNamesComputed = computed(() => {\r\n      return firstWeekday.value === 'Sunday'\r\n        ? weekdayNames.value\r\n        : [...weekdayNames.value.slice(1), weekdayNames.value[0]]\r\n    })\r\n\r\n    const {\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n    } = useDatePicker('day', calendarDates, props, emit)\r\n\r\n    const gridStartIndex = computed(() => props.showOtherMonths ? 0 : currentMonthStartIndex.value)\r\n    const gridEndIndex = computed(() => props.showOtherMonths ? calendarDates.value.length : currentMonthEndIndex.value)\r\n\r\n    const {\r\n      focusedCellIndex, containerAttributes,\r\n    } = useGridKeyboardNavigation({\r\n      rowSize: 7,\r\n      start: gridStartIndex,\r\n      end: gridEndIndex,\r\n      onSelected: (selectedValue) => onClick(calendarDates.value[selectedValue]),\r\n    })\r\n\r\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\r\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\r\n\r\n    const isOtherMonth = (date: Date) => props.view.month !== date.getMonth()\r\n    const isDateDisabled = (date: Date) => props.allowedDays === undefined ? false : !props.allowedDays(date)\r\n    const isDateWeekend = (date: Date) => {\r\n      if (props.weekends === undefined) {\r\n        return date.getDay() === 6 || date.getDay() === 0 // 0 - Sunday, 6 - Saturday\r\n      }\r\n\r\n      return props.weekends(date)\r\n    }\r\n\r\n    return {\r\n      hoveredIndex,\r\n      calendarDates,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n      isOtherMonth,\r\n      isDateDisabled,\r\n      isDateWeekend,\r\n      containerAttributes,\r\n      weekdayNamesComputed,\r\n      VaDayPickerCellPropValues,\r\n      focusedCellIndex,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-day-picker {\r\n  display: grid;\r\n  // 7 columns\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-gap: var(--va-date-picker-cell-gap);\r\n\r\n  &__weekday {\r\n    text-align: center;\r\n    font-size: 9px;\r\n    color: var(--va-secondary);\r\n    font-weight: bold;\r\n    height: var(--va-date-picker-cell-size);\r\n    line-height: var(--va-date-picker-cell-size);\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-day-picker\" v-bind=\"containerAttributes\">\r\n    <template v-if=\"!hideWeekDays\">\r\n      <div\r\n        v-for=\"weekday in weekdayNamesComputed\" :key=\"weekday\"\r\n        class=\"va-day-picker__weekday\"\r\n      >\r\n        <slot name=\"weekday\">\r\n          {{ weekday }}\r\n        </slot>\r\n      </div>\r\n    </template>\r\n\r\n    <div\r\n      class=\"va-day-picker__calendar__day-wrapper\"\r\n      v-for=\"(date, index) in calendarDates\"\r\n      :key=\"date\"\r\n      @mouseenter=\"hoveredIndex = index\"\r\n      @mouseleave=\"hoveredIndex = -1\"\r\n    >\r\n      <va-date-picker-cell\r\n        :hidden=\"isOtherMonth(date) && !showOtherMonths\"\r\n        :today=\"isToday(date)\"\r\n        :selected=\"isSelected(date)\"\r\n        :in-range=\"isInRange(date)\"\r\n        :other-month=\"isOtherMonth(date)\"\r\n        :weekend=\"isDateWeekend(date)\"\r\n        :disabled=\"isDateDisabled(date)\"\r\n        :focused=\"hoveredIndex === index\"\r\n        :highlight-today=\"highlightToday\"\r\n        :highlight-weekend=\"highlightWeekend\"\r\n        @click=\"onClick(date); focusedCellIndex = index\"\r\n      >\r\n        <span class=\"va-date-picker-cell__day\">\r\n          <slot name=\"day\" v-bind=\"{ date }\">\r\n            {{ date.getDate() }}\r\n          </slot>\r\n        </span>\r\n      </va-date-picker-cell>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, defineComponent, toRefs, PropType, watch } from 'vue'\r\nimport { useVaDatePickerCalendar } from './va-date-picker-calendar-hook'\r\nimport { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerView } from '../../types/types'\r\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\r\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\r\nimport { useDatePicker } from '../../hooks/use-picker'\r\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\r\n\r\nconst VaDatePickerCellProps = extractComponentProps(VaDatePickerCell, ['date', 'selectedValue', 'focusedDate', 'focused'])\r\n\r\nexport default defineComponent({\r\n  name: 'VaDayPicker',\r\n\r\n  components: { VaDatePickerCell },\r\n\r\n  props: {\r\n    monthNames: { type: Array as PropType<string[]>, required: true },\r\n    weekdayNames: { type: Array as PropType<string[]>, required: true },\r\n    firstWeekday: { type: String as PropType<'Monday' | 'Sunday'>, default: 'Sunday' },\r\n    hideWeekDays: { type: Boolean, default: false },\r\n    view: { type: Object as PropType<VaDatePickerView>, default: () => ({ type: 'day' }) },\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue> },\r\n    mode: { type: String as PropType<VaDatePickerMode>, default: 'auto' },\r\n    showOtherMonths: { type: Boolean, default: false },\r\n    allowedDays: { type: Function as PropType<(date: Date) => boolean> },\r\n    weekends: { type: [Function] as PropType<(d: Date) => boolean> },\r\n    highlightWeekend: { type: Boolean, default: false },\r\n    highlightToday: { type: Boolean, default: false },\r\n  },\r\n\r\n  emits: ['update:modelValue', 'hover:day', 'click:day'],\r\n\r\n  setup (props, { emit }) {\r\n    const { firstWeekday, weekdayNames, view } = toRefs(props)\r\n\r\n    const VaDayPickerCellPropValues = filterComponentProps(props, VaDatePickerCellProps)\r\n\r\n    const { calendarDates, currentMonthStartIndex, currentMonthEndIndex } = useVaDatePickerCalendar(view, { firstWeekday })\r\n\r\n    const weekdayNamesComputed = computed(() => {\r\n      return firstWeekday.value === 'Sunday'\r\n        ? weekdayNames.value\r\n        : [...weekdayNames.value.slice(1), weekdayNames.value[0]]\r\n    })\r\n\r\n    const {\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n    } = useDatePicker('day', calendarDates, props, emit)\r\n\r\n    const gridStartIndex = computed(() => props.showOtherMonths ? 0 : currentMonthStartIndex.value)\r\n    const gridEndIndex = computed(() => props.showOtherMonths ? calendarDates.value.length : currentMonthEndIndex.value)\r\n\r\n    const {\r\n      focusedCellIndex, containerAttributes,\r\n    } = useGridKeyboardNavigation({\r\n      rowSize: 7,\r\n      start: gridStartIndex,\r\n      end: gridEndIndex,\r\n      onSelected: (selectedValue) => onClick(calendarDates.value[selectedValue]),\r\n    })\r\n\r\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\r\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\r\n\r\n    const isOtherMonth = (date: Date) => props.view.month !== date.getMonth()\r\n    const isDateDisabled = (date: Date) => props.allowedDays === undefined ? false : !props.allowedDays(date)\r\n    const isDateWeekend = (date: Date) => {\r\n      if (props.weekends === undefined) {\r\n        return date.getDay() === 6 || date.getDay() === 0 // 0 - Sunday, 6 - Saturday\r\n      }\r\n\r\n      return props.weekends(date)\r\n    }\r\n\r\n    return {\r\n      hoveredIndex,\r\n      calendarDates,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n      isOtherMonth,\r\n      isDateDisabled,\r\n      isDateWeekend,\r\n      containerAttributes,\r\n      weekdayNamesComputed,\r\n      VaDayPickerCellPropValues,\r\n      focusedCellIndex,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-day-picker {\r\n  display: grid;\r\n  // 7 columns\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-gap: var(--va-date-picker-cell-gap);\r\n\r\n  &__weekday {\r\n    text-align: center;\r\n    font-size: 9px;\r\n    color: var(--va-secondary);\r\n    font-weight: bold;\r\n    height: var(--va-date-picker-cell-size);\r\n    line-height: var(--va-date-picker-cell-size);\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-date-picker-header va-date-picker__header\" v-if=\"syncView.type !== 'year'\">\r\n    <slot name=\"buttonPrev\" v-bind=\"{ onClick: prev }\">\r\n      <va-button icon=\"chevron_left\" flat size=\"small\" :color=\"color\" @click=\"prev\" />\r\n    </slot>\r\n\r\n    <div class=\"va-date-picker-header__text\">\r\n      <slot name=\"header\" v-bind=\"{ year: syncView.year, month: syncView.month, monthNames, view: syncView, changeView, switchView }\">\r\n        <va-button flat @click=\"switchView\" size=\"small\" :color=\"color\">\r\n          <span class=\"mr-1\">\r\n            <slot name=\"year\" v-bind=\"{ year: syncView.year }\">{{ syncView.year }}</slot>\r\n          </span>\r\n\r\n          <slot v-if=\"syncView.type === 'day'\" name=\"month\" v-bind=\"{ month: syncView.month }\">{{ monthNames[syncView.month] }}</slot>\r\n        </va-button>\r\n      </slot>\r\n    </div>\r\n\r\n    <slot name=\"buttonNext\" v-bind=\"{ onClick: next }\">\r\n      <va-button icon=\"chevron_right\" flat size=\"small\" :color=\"color\" @click=\"next\" />\r\n    </slot>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { VaDatePickerView } from '../../types/types'\r\nimport { useView } from '../../hooks/view'\r\nimport VaButton from '../../../va-button'\r\n\r\nexport default defineComponent({\r\n  name: 'VaDatePickerHeader',\r\n\r\n  components: { VaButton },\r\n\r\n  emits: ['update:view'],\r\n\r\n  props: {\r\n    monthNames: { type: Array, required: true },\r\n    view: { type: Object as PropType<VaDatePickerView> },\r\n\r\n    // Colors\r\n    color: { type: String, default: undefined },\r\n  },\r\n\r\n  setup (props, { emit }) {\r\n    const { syncView, prev, next } = useView(props, emit)\r\n\r\n    const switchView = () => {\r\n      if (syncView.value.type === 'day') {\r\n        syncView.value = { ...syncView.value, type: 'month' }\r\n      } else if (syncView.value.type === 'month') {\r\n        syncView.value = { ...syncView.value, type: 'year' }\r\n      }\r\n    }\r\n\r\n    const changeView = (view: VaDatePickerView) => {\r\n      syncView.value = view\r\n    }\r\n\r\n    return { prev, next, changeView, switchView, syncView }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-date-picker {\r\n  &__header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    &__text {\r\n      color: var(--va-dark);\r\n      font-family: Source Sans Pro;\r\n      font-style: normal;\r\n      font-weight: 600;\r\n      font-size: 12px;\r\n      line-height: 15px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-date-picker-header va-date-picker__header\" v-if=\"syncView.type !== 'year'\">\r\n    <slot name=\"buttonPrev\" v-bind=\"{ onClick: prev }\">\r\n      <va-button icon=\"chevron_left\" flat size=\"small\" :color=\"color\" @click=\"prev\" />\r\n    </slot>\r\n\r\n    <div class=\"va-date-picker-header__text\">\r\n      <slot name=\"header\" v-bind=\"{ year: syncView.year, month: syncView.month, monthNames, view: syncView, changeView, switchView }\">\r\n        <va-button flat @click=\"switchView\" size=\"small\" :color=\"color\">\r\n          <span class=\"mr-1\">\r\n            <slot name=\"year\" v-bind=\"{ year: syncView.year }\">{{ syncView.year }}</slot>\r\n          </span>\r\n\r\n          <slot v-if=\"syncView.type === 'day'\" name=\"month\" v-bind=\"{ month: syncView.month }\">{{ monthNames[syncView.month] }}</slot>\r\n        </va-button>\r\n      </slot>\r\n    </div>\r\n\r\n    <slot name=\"buttonNext\" v-bind=\"{ onClick: next }\">\r\n      <va-button icon=\"chevron_right\" flat size=\"small\" :color=\"color\" @click=\"next\" />\r\n    </slot>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { VaDatePickerView } from '../../types/types'\r\nimport { useView } from '../../hooks/view'\r\nimport VaButton from '../../../va-button'\r\n\r\nexport default defineComponent({\r\n  name: 'VaDatePickerHeader',\r\n\r\n  components: { VaButton },\r\n\r\n  emits: ['update:view'],\r\n\r\n  props: {\r\n    monthNames: { type: Array, required: true },\r\n    view: { type: Object as PropType<VaDatePickerView> },\r\n\r\n    // Colors\r\n    color: { type: String, default: undefined },\r\n  },\r\n\r\n  setup (props, { emit }) {\r\n    const { syncView, prev, next } = useView(props, emit)\r\n\r\n    const switchView = () => {\r\n      if (syncView.value.type === 'day') {\r\n        syncView.value = { ...syncView.value, type: 'month' }\r\n      } else if (syncView.value.type === 'month') {\r\n        syncView.value = { ...syncView.value, type: 'year' }\r\n      }\r\n    }\r\n\r\n    const changeView = (view: VaDatePickerView) => {\r\n      syncView.value = view\r\n    }\r\n\r\n    return { prev, next, changeView, switchView, syncView }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-date-picker {\r\n  &__header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    &__text {\r\n      color: var(--va-dark);\r\n      font-family: Source Sans Pro;\r\n      font-style: normal;\r\n      font-weight: 600;\r\n      font-size: 12px;\r\n      line-height: 15px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-month-picker\" v-bind=\"containerAttributes\">\r\n    <div\r\n      class=\"va-month-picker__month-wrapper\"\r\n      v-for=\"(month, monthIndex) in months\"\r\n      :key=\"monthIndex\"\r\n      @mouseenter=\"hoveredIndex = monthIndex\"\r\n      @mouseleave=\"hoveredIndex = -1\"\r\n    >\r\n      <va-date-picker-cell\r\n        :in-range=\"!!isInRange(month)\"\r\n        :selected=\"!!isSelected(month)\"\r\n        :disabled=\"!!isDisabled(month)\"\r\n        :today=\"!!isToday(month)\"\r\n        :focused=\"hoveredIndex === monthIndex\"\r\n        :highlight-today=\"highlightToday\"\r\n        @click=\"onClick(month); focusedCellIndex = monthIndex\"\r\n      >\r\n        <slot name=\"month\" v-bind=\"{ monthIndex, month: monthNames[monthIndex] }\">\r\n          {{ monthNames[monthIndex] }}\r\n        </slot>\r\n      </va-date-picker-cell>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\r\nimport { VaDatePickerMode, VaDatePickerView, VaDatePickerModelValue } from '../../types/types'\r\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\r\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\r\nimport { useDatePicker } from '../../hooks/use-picker'\r\n\r\nexport default defineComponent({\r\n  name: 'VaMonthPicker',\r\n\r\n  components: { VaDatePickerCell },\r\n\r\n  props: {\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue> },\r\n    monthNames: { type: Array as PropType<string[]>, required: true },\r\n    view: { type: Object as PropType<VaDatePickerView>, default: () => ({ type: 'month' }) },\r\n    allowedMonths: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\r\n    highlightToday: { type: Boolean, default: true },\r\n    mode: { type: String as PropType<VaDatePickerMode>, default: 'auto' },\r\n  },\r\n\r\n  emits: ['update:modelValue', 'hover:month', 'click:month'],\r\n\r\n  setup (props, { emit }) {\r\n    const { view } = toRefs(props)\r\n\r\n    const months = computed(() => Array.from(Array(12).keys()).map((month) => new Date(view.value.year, month)))\r\n\r\n    const {\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n    } = useDatePicker('month', months, props, emit)\r\n\r\n    const isDisabled = (date: Date) => props.allowedMonths === undefined ? false : !props.allowedMonths(date)\r\n\r\n    const {\r\n      focusedCellIndex, containerAttributes,\r\n    } = useGridKeyboardNavigation({\r\n      rowSize: 3,\r\n      start: 0,\r\n      end: months.value.length,\r\n      onSelected: (selectedIndex) => onClick(months.value[selectedIndex]),\r\n    })\r\n\r\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\r\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\r\n\r\n    return {\r\n      months,\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n      isDisabled,\r\n      containerAttributes,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-month-picker {\r\n  display: grid;\r\n  // 4 columns\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: var(--va-date-picker-cell-gap);\r\n  // 7 days + gap\r\n  min-width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\r\n  width: 100%;\r\n\r\n  &__month-wrapper {\r\n    padding: 1px;\r\n    border-radius: 6px;\r\n    text-align: center;\r\n    user-select: none;\r\n    overflow: hidden;\r\n  }\r\n\r\n  &__month {\r\n    color: var(--va-secondary);\r\n    font-family: Source Sans Pro;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 12px;\r\n    height: var(--va-date-picker-cell-size);\r\n    line-height: var(--va-date-picker-cell-size);\r\n    position: relative;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-month-picker\" v-bind=\"containerAttributes\">\r\n    <div\r\n      class=\"va-month-picker__month-wrapper\"\r\n      v-for=\"(month, monthIndex) in months\"\r\n      :key=\"monthIndex\"\r\n      @mouseenter=\"hoveredIndex = monthIndex\"\r\n      @mouseleave=\"hoveredIndex = -1\"\r\n    >\r\n      <va-date-picker-cell\r\n        :in-range=\"!!isInRange(month)\"\r\n        :selected=\"!!isSelected(month)\"\r\n        :disabled=\"!!isDisabled(month)\"\r\n        :today=\"!!isToday(month)\"\r\n        :focused=\"hoveredIndex === monthIndex\"\r\n        :highlight-today=\"highlightToday\"\r\n        @click=\"onClick(month); focusedCellIndex = monthIndex\"\r\n      >\r\n        <slot name=\"month\" v-bind=\"{ monthIndex, month: monthNames[monthIndex] }\">\r\n          {{ monthNames[monthIndex] }}\r\n        </slot>\r\n      </va-date-picker-cell>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\r\nimport { VaDatePickerMode, VaDatePickerView, VaDatePickerModelValue } from '../../types/types'\r\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\r\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\r\nimport { useDatePicker } from '../../hooks/use-picker'\r\n\r\nexport default defineComponent({\r\n  name: 'VaMonthPicker',\r\n\r\n  components: { VaDatePickerCell },\r\n\r\n  props: {\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue> },\r\n    monthNames: { type: Array as PropType<string[]>, required: true },\r\n    view: { type: Object as PropType<VaDatePickerView>, default: () => ({ type: 'month' }) },\r\n    allowedMonths: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\r\n    highlightToday: { type: Boolean, default: true },\r\n    mode: { type: String as PropType<VaDatePickerMode>, default: 'auto' },\r\n  },\r\n\r\n  emits: ['update:modelValue', 'hover:month', 'click:month'],\r\n\r\n  setup (props, { emit }) {\r\n    const { view } = toRefs(props)\r\n\r\n    const months = computed(() => Array.from(Array(12).keys()).map((month) => new Date(view.value.year, month)))\r\n\r\n    const {\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n    } = useDatePicker('month', months, props, emit)\r\n\r\n    const isDisabled = (date: Date) => props.allowedMonths === undefined ? false : !props.allowedMonths(date)\r\n\r\n    const {\r\n      focusedCellIndex, containerAttributes,\r\n    } = useGridKeyboardNavigation({\r\n      rowSize: 3,\r\n      start: 0,\r\n      end: months.value.length,\r\n      onSelected: (selectedIndex) => onClick(months.value[selectedIndex]),\r\n    })\r\n\r\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\r\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\r\n\r\n    return {\r\n      months,\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n      isDisabled,\r\n      containerAttributes,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-month-picker {\r\n  display: grid;\r\n  // 4 columns\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: var(--va-date-picker-cell-gap);\r\n  // 7 days + gap\r\n  min-width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\r\n  width: 100%;\r\n\r\n  &__month-wrapper {\r\n    padding: 1px;\r\n    border-radius: 6px;\r\n    text-align: center;\r\n    user-select: none;\r\n    overflow: hidden;\r\n  }\r\n\r\n  &__month {\r\n    color: var(--va-secondary);\r\n    font-family: Source Sans Pro;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 12px;\r\n    height: var(--va-date-picker-cell-size);\r\n    line-height: var(--va-date-picker-cell-size);\r\n    position: relative;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-year-picker\"\r\n    ref=\"rootNode\"\r\n    v-bind=\"containerAttributes\"\r\n    @keydown.space.prevent\r\n  >\r\n    <va-date-picker-cell\r\n      v-for=\"(year, index) in years\"\r\n      :key=\"year\"\r\n      :in-range=\"isInRange(year)\"\r\n      :selected=\"isSelected(year)\"\r\n      :disabled=\"isYearDisabled(year)\"\r\n      :today=\"isToday(year)\"\r\n      :focused=\"focusedCellIndex === index\"\r\n      :highlight-today=\"highlightToday\"\r\n      @click=\"onClick(year); focusedCellIndex = index\"\r\n      @mouseenter=\"hoveredIndex = index\"\r\n      @mouseleave=\"hoveredIndex = -1\"\r\n    >\r\n      {{ year.getFullYear() }}\r\n    </va-date-picker-cell>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType, toRefs, onMounted, ref, computed, watch } from 'vue'\r\nimport { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerView } from '../../types/types'\r\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\r\nimport { createYearDate, isDatesYearEqual } from '../../utils/date-utils'\r\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\r\nimport { useDatePicker } from '../../hooks/use-picker'\r\n\r\nexport default defineComponent({\r\n  components: { VaDatePickerCell },\r\n\r\n  props: {\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue> },\r\n    allowedYears: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\r\n    highlightToday: { type: Boolean, default: true },\r\n    mode: { type: String as PropType<VaDatePickerMode>, default: 'auto' },\r\n    view: { type: Object as PropType<VaDatePickerView>, default: () => ({ type: 'year' }) },\r\n    startYear: { type: Number, default: () => 1970 },\r\n    endYear: { type: Number, default: () => new Date().getFullYear() + 50 },\r\n  },\r\n\r\n  emits: ['update:modelValue', 'hover:year', 'click:year'],\r\n\r\n  setup (props, { emit }) {\r\n    const { view } = toRefs(props)\r\n    const rootNode = ref<HTMLElement | null>(null)\r\n\r\n    const generateYearsArray = (start: number, end: number) => {\r\n      const yearsCount = end - start + 1\r\n      return Array.from(Array(yearsCount).keys())\r\n        .map((i) => createYearDate(start + i))\r\n    }\r\n\r\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear))\r\n\r\n    const scrollIntoYearIndex = (index: number) => {\r\n      if (!rootNode.value) { return }\r\n\r\n      const scrollHeight = rootNode.value.scrollHeight\r\n      const rootNodeHeight = rootNode.value.offsetHeight\r\n      const currentYearOffset = scrollHeight / years.value.length * index\r\n      const cellSize = scrollHeight / years.value.length\r\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop\r\n\r\n      if (relativeScrollPosition < 0) {\r\n        // First element in view\r\n        rootNode.value.scrollTo({ top: currentYearOffset })\r\n      } else if (relativeScrollPosition > rootNodeHeight) {\r\n        // Last element in view\r\n        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize })\r\n      }\r\n    }\r\n\r\n    const scrollIntoYearIndexCenter = (index: number) => {\r\n      if (!rootNode.value) { return }\r\n\r\n      const scrollHeight = rootNode.value.scrollHeight\r\n      const rootNodeHeight = rootNode.value.offsetHeight\r\n      const currentYearOffset = scrollHeight / years.value.length * index\r\n\r\n      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 })\r\n    }\r\n\r\n    onMounted(() => {\r\n      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year)\r\n\r\n      scrollIntoYearIndexCenter(currentYearIndex)\r\n    })\r\n\r\n    const {\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n    } = useDatePicker('year', years, props, emit)\r\n\r\n    const isYearDisabled = (year: Date) => props.allowedYears === undefined ? false : !props.allowedYears(year)\r\n\r\n    const {\r\n      focusedCellIndex, containerAttributes,\r\n    } = useGridKeyboardNavigation({\r\n      rowSize: 1,\r\n      start: 0,\r\n      end: years.value.length,\r\n      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),\r\n      onSelected: (selectedIndex) => onClick(years.value[selectedIndex]),\r\n    })\r\n\r\n    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index))\r\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\r\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\r\n\r\n    return {\r\n      hoveredIndex,\r\n      years,\r\n      rootNode,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n      isYearDisabled,\r\n      focusedCellIndex,\r\n      containerAttributes,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-year-picker {\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: auto;\r\n  grid-gap: var(--va-date-picker-cell-gap);\r\n  max-height: 100%;\r\n  position: relative;\r\n\r\n  .va-year-picker-cell {\r\n    width: 100%;\r\n    height: 30px;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-year-picker\"\r\n    ref=\"rootNode\"\r\n    v-bind=\"containerAttributes\"\r\n    @keydown.space.prevent\r\n  >\r\n    <va-date-picker-cell\r\n      v-for=\"(year, index) in years\"\r\n      :key=\"year\"\r\n      :in-range=\"isInRange(year)\"\r\n      :selected=\"isSelected(year)\"\r\n      :disabled=\"isYearDisabled(year)\"\r\n      :today=\"isToday(year)\"\r\n      :focused=\"focusedCellIndex === index\"\r\n      :highlight-today=\"highlightToday\"\r\n      @click=\"onClick(year); focusedCellIndex = index\"\r\n      @mouseenter=\"hoveredIndex = index\"\r\n      @mouseleave=\"hoveredIndex = -1\"\r\n    >\r\n      {{ year.getFullYear() }}\r\n    </va-date-picker-cell>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType, toRefs, onMounted, ref, computed, watch } from 'vue'\r\nimport { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerView } from '../../types/types'\r\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\r\nimport { createYearDate, isDatesYearEqual } from '../../utils/date-utils'\r\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\r\nimport { useDatePicker } from '../../hooks/use-picker'\r\n\r\nexport default defineComponent({\r\n  components: { VaDatePickerCell },\r\n\r\n  props: {\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue> },\r\n    allowedYears: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\r\n    highlightToday: { type: Boolean, default: true },\r\n    mode: { type: String as PropType<VaDatePickerMode>, default: 'auto' },\r\n    view: { type: Object as PropType<VaDatePickerView>, default: () => ({ type: 'year' }) },\r\n    startYear: { type: Number, default: () => 1970 },\r\n    endYear: { type: Number, default: () => new Date().getFullYear() + 50 },\r\n  },\r\n\r\n  emits: ['update:modelValue', 'hover:year', 'click:year'],\r\n\r\n  setup (props, { emit }) {\r\n    const { view } = toRefs(props)\r\n    const rootNode = ref<HTMLElement | null>(null)\r\n\r\n    const generateYearsArray = (start: number, end: number) => {\r\n      const yearsCount = end - start + 1\r\n      return Array.from(Array(yearsCount).keys())\r\n        .map((i) => createYearDate(start + i))\r\n    }\r\n\r\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear))\r\n\r\n    const scrollIntoYearIndex = (index: number) => {\r\n      if (!rootNode.value) { return }\r\n\r\n      const scrollHeight = rootNode.value.scrollHeight\r\n      const rootNodeHeight = rootNode.value.offsetHeight\r\n      const currentYearOffset = scrollHeight / years.value.length * index\r\n      const cellSize = scrollHeight / years.value.length\r\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop\r\n\r\n      if (relativeScrollPosition < 0) {\r\n        // First element in view\r\n        rootNode.value.scrollTo({ top: currentYearOffset })\r\n      } else if (relativeScrollPosition > rootNodeHeight) {\r\n        // Last element in view\r\n        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize })\r\n      }\r\n    }\r\n\r\n    const scrollIntoYearIndexCenter = (index: number) => {\r\n      if (!rootNode.value) { return }\r\n\r\n      const scrollHeight = rootNode.value.scrollHeight\r\n      const rootNodeHeight = rootNode.value.offsetHeight\r\n      const currentYearOffset = scrollHeight / years.value.length * index\r\n\r\n      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 })\r\n    }\r\n\r\n    onMounted(() => {\r\n      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year)\r\n\r\n      scrollIntoYearIndexCenter(currentYearIndex)\r\n    })\r\n\r\n    const {\r\n      hoveredIndex,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n    } = useDatePicker('year', years, props, emit)\r\n\r\n    const isYearDisabled = (year: Date) => props.allowedYears === undefined ? false : !props.allowedYears(year)\r\n\r\n    const {\r\n      focusedCellIndex, containerAttributes,\r\n    } = useGridKeyboardNavigation({\r\n      rowSize: 1,\r\n      start: 0,\r\n      end: years.value.length,\r\n      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),\r\n      onSelected: (selectedIndex) => onClick(years.value[selectedIndex]),\r\n    })\r\n\r\n    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index))\r\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\r\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\r\n\r\n    return {\r\n      hoveredIndex,\r\n      years,\r\n      rootNode,\r\n      onClick,\r\n      isToday,\r\n      isSelected,\r\n      isInRange,\r\n      isYearDisabled,\r\n      focusedCellIndex,\r\n      containerAttributes,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.va-year-picker {\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: auto;\r\n  grid-gap: var(--va-date-picker-cell-gap);\r\n  max-height: 100%;\r\n  position: relative;\r\n\r\n  .va-year-picker-cell {\r\n    width: 100%;\r\n    height: 30px;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-date-picker\" :class=\"{ 'va-date-picker__without-week-days': hideWeekDays }\" :style=\"colorsStyle\">\r\n    <va-date-picker-header\r\n      v-bind=\"headerProps\"\r\n      v-model:view=\"syncView\"\r\n    >\r\n      <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n        <slot :name=\"name\" v-bind=\"bind\" />\r\n      </template>\r\n    </va-date-picker-header>\r\n\r\n    <div class=\"va-date-picker__picker-wrapper\">\r\n      <va-day-picker\r\n        v-if=\"syncView.type === 'day'\"\r\n        v-bind=\"dayPickerProps\"\r\n        v-model=\"valueComputed\"\r\n        ref=\"currentPicker\"\r\n        :view=\"syncView\"\r\n        @hover:day=\"(value) => $emit('hover:day', value)\"\r\n        @click:day=\"(value) => $emit('click:day', value)\"\r\n      >\r\n        <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n          <slot :name=\"name\" v-bind=\"bind\" />\r\n        </template>\r\n      </va-day-picker>\r\n\r\n      <va-month-picker\r\n        v-if=\"syncView.type === 'month'\"\r\n        v-bind=\"monthPickerProps\"\r\n        ref=\"currentPicker\"\r\n        :view=\"syncView\"\r\n        :model-value=\"valueComputed\"\r\n        @update:model-value=\"onMonthModelValueUpdate\"\r\n        @hover:month=\"(value) => $emit('hover:month', value)\"\r\n        @click:month=\"onMonthClick\"\r\n      >\r\n        <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n          <slot :name=\"name\" v-bind=\"bind\" />\r\n        </template>\r\n      </va-month-picker>\r\n\r\n      <va-year-picker\r\n        v-if=\"syncView.type === 'year'\"\r\n        v-bind=\"yearPickerProps\"\r\n        ref=\"currentPicker\"\r\n        :view=\"syncView\"\r\n        :model-value=\"valueComputed\"\r\n        @hover:year=\"(value) => $emit('hover:year', value)\"\r\n        @update:model-value=\"onYearModelValueUpdate\"\r\n        @click:year=\"onYearClick\"\r\n      >\r\n        <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n          <slot :name=\"name\" v-bind=\"bind\" />\r\n        </template>\r\n      </va-year-picker>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { ComponentOptions, defineComponent, nextTick, PropType, ref, watch } from 'vue'\r\nimport { useStateful, statefulComponentOptions } from '../../mixins/StatefulMixin/cStatefulMixin'\r\nimport { useColors } from '../../services/color-config/color-config'\r\n\r\nimport { VaDatePickerModelValue, VaDatePickerType, VaDatePickerView } from './types/types'\r\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from './utils/child-props'\r\nimport { useView } from './hooks/view'\r\n\r\nimport VaDayPicker from './components/VaDayPicker/VaDayPicker.vue'\r\nimport VaDatePickerHeader from './components/VaDatePickerHeader/VaDatePickerHeader.vue'\r\nimport VaMonthPicker from './components/VaMonthPicker/VaMonthPicker.vue'\r\nimport VaYearPicker from './components/VaYearPicker/VaYearPicker.vue'\r\n\r\nconst DEFAULT_MONTH_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst DEFAULT_WEEKDAY_NAMES = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA']\r\n\r\nexport default defineComponent({\r\n  name: 'VaDatePicker',\r\n\r\n  components: { VaDayPicker, VaDatePickerHeader, VaMonthPicker, VaYearPicker },\r\n\r\n  props: {\r\n    ...statefulComponentOptions.props,\r\n    ...extractComponentProps(VaDayPicker),\r\n    ...extractComponentProps(VaMonthPicker),\r\n    ...extractComponentProps(VaYearPicker),\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue | undefined> },\r\n    monthNames: { type: Array as PropType<string[]>, required: false, default: DEFAULT_MONTH_NAMES },\r\n    weekdayNames: { type: Array as PropType<string[]>, required: false, default: DEFAULT_WEEKDAY_NAMES },\r\n    view: { type: Object as PropType<VaDatePickerView> },\r\n    type: { type: String as PropType<VaDatePickerType>, default: 'day' },\r\n\r\n    // Colors\r\n    color: { type: String, default: undefined },\r\n    weekendsColor: { type: String, default: undefined },\r\n  },\r\n\r\n  emits: [\r\n    ...statefulComponentOptions.emits,\r\n    ...extractComponentEmits(VaDatePickerHeader),\r\n    ...extractComponentEmits(VaYearPicker),\r\n    ...extractComponentEmits(VaDayPicker),\r\n    ...extractComponentEmits(VaMonthPicker),\r\n  ],\r\n\r\n  setup (props, { emit }) {\r\n    const { valueComputed } = useStateful(props, emit, undefined)\r\n\r\n    const { syncView } = useView(props, emit, { type: props.type })\r\n\r\n    const onMonthClick = (date: Date) => {\r\n      emit('click:month', date)\r\n      const year = date.getFullYear()\r\n      const month = date.getMonth()\r\n      if (props.type !== 'month') {\r\n        syncView.value = { type: 'day', year, month }\r\n      }\r\n    }\r\n\r\n    const onMonthModelValueUpdate = (modelValue: VaDatePickerModelValue) => {\r\n      // Do not update model value if we just want to change view\r\n      if (props.type === 'month') { valueComputed.value = modelValue }\r\n    }\r\n\r\n    const onYearClick = (date : Date) => {\r\n      emit('click:year', date)\r\n\r\n      const year = date.getFullYear()\r\n\r\n      if (props.type !== 'year') {\r\n        syncView.value = { type: 'month', year, month: syncView.value.month }\r\n      }\r\n    }\r\n\r\n    const onYearModelValueUpdate = (modelValue: VaDatePickerModelValue) => {\r\n      // Do not update model value if we just want to change view\r\n      if (props.type === 'year') { valueComputed.value = modelValue }\r\n    }\r\n\r\n    const { colorsToCSSVariable } = useColors()\r\n\r\n    const colorsStyle = colorsToCSSVariable({\r\n      color: props.color,\r\n      'weekends-color': props.weekendsColor,\r\n    }, 'va-date-picker')\r\n\r\n    const currentPicker = ref<ComponentOptions | null>(null)\r\n\r\n    watch(syncView, (newValue, prevValue) => {\r\n      // Don't focus new picker if user does not change type\r\n      if (newValue.type === prevValue.type) { return }\r\n\r\n      nextTick(() => {\r\n        if (currentPicker.value) { currentPicker.value.$el.focus() }\r\n      })\r\n    })\r\n\r\n    return {\r\n      dayPickerProps: filterComponentProps(props, extractComponentProps(VaDayPicker)),\r\n      headerProps: filterComponentProps(props, extractComponentProps(VaDatePickerHeader)),\r\n      monthPickerProps: filterComponentProps(props, extractComponentProps(VaMonthPicker)),\r\n      yearPickerProps: filterComponentProps(props, extractComponentProps(VaYearPicker)),\r\n\r\n      syncView,\r\n\r\n      valueComputed,\r\n      onMonthClick,\r\n      onMonthModelValueUpdate,\r\n\r\n      onYearClick,\r\n      onYearModelValueUpdate,\r\n\r\n      colorsStyle,\r\n      currentPicker,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import './_variables.scss';\r\n\r\n.va-date-picker {\r\n  --va-date-picker-content-height: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\r\n\r\n  width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\r\n\r\n  &__picker-wrapper {\r\n    height: var(--va-date-picker-content-height);\r\n  }\r\n\r\n  &__without-week-days {\r\n    --va-date-picker-content-height: calc(var(--va-date-picker-cell-size) * 6 + var(--va-date-picker-cell-gap) * 6);\r\n  }\r\n\r\n  &_mobile {\r\n    .va-day-picker,\r\n    .va-month-picker,\r\n    .va-year-picker {\r\n      height: 100%;\r\n    }\r\n  }\r\n}\r\n\r\n.va-date-picker-header {\r\n  padding-bottom: 0.25rem;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-date-picker\" :class=\"{ 'va-date-picker__without-week-days': hideWeekDays }\" :style=\"colorsStyle\">\r\n    <va-date-picker-header\r\n      v-bind=\"headerProps\"\r\n      v-model:view=\"syncView\"\r\n    >\r\n      <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n        <slot :name=\"name\" v-bind=\"bind\" />\r\n      </template>\r\n    </va-date-picker-header>\r\n\r\n    <div class=\"va-date-picker__picker-wrapper\">\r\n      <va-day-picker\r\n        v-if=\"syncView.type === 'day'\"\r\n        v-bind=\"dayPickerProps\"\r\n        v-model=\"valueComputed\"\r\n        ref=\"currentPicker\"\r\n        :view=\"syncView\"\r\n        @hover:day=\"(value) => $emit('hover:day', value)\"\r\n        @click:day=\"(value) => $emit('click:day', value)\"\r\n      >\r\n        <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n          <slot :name=\"name\" v-bind=\"bind\" />\r\n        </template>\r\n      </va-day-picker>\r\n\r\n      <va-month-picker\r\n        v-if=\"syncView.type === 'month'\"\r\n        v-bind=\"monthPickerProps\"\r\n        ref=\"currentPicker\"\r\n        :view=\"syncView\"\r\n        :model-value=\"valueComputed\"\r\n        @update:model-value=\"onMonthModelValueUpdate\"\r\n        @hover:month=\"(value) => $emit('hover:month', value)\"\r\n        @click:month=\"onMonthClick\"\r\n      >\r\n        <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n          <slot :name=\"name\" v-bind=\"bind\" />\r\n        </template>\r\n      </va-month-picker>\r\n\r\n      <va-year-picker\r\n        v-if=\"syncView.type === 'year'\"\r\n        v-bind=\"yearPickerProps\"\r\n        ref=\"currentPicker\"\r\n        :view=\"syncView\"\r\n        :model-value=\"valueComputed\"\r\n        @hover:year=\"(value) => $emit('hover:year', value)\"\r\n        @update:model-value=\"onYearModelValueUpdate\"\r\n        @click:year=\"onYearClick\"\r\n      >\r\n        <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\r\n          <slot :name=\"name\" v-bind=\"bind\" />\r\n        </template>\r\n      </va-year-picker>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { ComponentOptions, defineComponent, nextTick, PropType, ref, watch } from 'vue'\r\nimport { useStateful, statefulComponentOptions } from '../../mixins/StatefulMixin/cStatefulMixin'\r\nimport { useColors } from '../../services/color-config/color-config'\r\n\r\nimport { VaDatePickerModelValue, VaDatePickerType, VaDatePickerView } from './types/types'\r\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from './utils/child-props'\r\nimport { useView } from './hooks/view'\r\n\r\nimport VaDayPicker from './components/VaDayPicker/VaDayPicker.vue'\r\nimport VaDatePickerHeader from './components/VaDatePickerHeader/VaDatePickerHeader.vue'\r\nimport VaMonthPicker from './components/VaMonthPicker/VaMonthPicker.vue'\r\nimport VaYearPicker from './components/VaYearPicker/VaYearPicker.vue'\r\n\r\nconst DEFAULT_MONTH_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst DEFAULT_WEEKDAY_NAMES = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA']\r\n\r\nexport default defineComponent({\r\n  name: 'VaDatePicker',\r\n\r\n  components: { VaDayPicker, VaDatePickerHeader, VaMonthPicker, VaYearPicker },\r\n\r\n  props: {\r\n    ...statefulComponentOptions.props,\r\n    ...extractComponentProps(VaDayPicker),\r\n    ...extractComponentProps(VaMonthPicker),\r\n    ...extractComponentProps(VaYearPicker),\r\n    modelValue: { type: [Date, Array, Object] as PropType<VaDatePickerModelValue | undefined> },\r\n    monthNames: { type: Array as PropType<string[]>, required: false, default: DEFAULT_MONTH_NAMES },\r\n    weekdayNames: { type: Array as PropType<string[]>, required: false, default: DEFAULT_WEEKDAY_NAMES },\r\n    view: { type: Object as PropType<VaDatePickerView> },\r\n    type: { type: String as PropType<VaDatePickerType>, default: 'day' },\r\n\r\n    // Colors\r\n    color: { type: String, default: undefined },\r\n    weekendsColor: { type: String, default: undefined },\r\n  },\r\n\r\n  emits: [\r\n    ...statefulComponentOptions.emits,\r\n    ...extractComponentEmits(VaDatePickerHeader),\r\n    ...extractComponentEmits(VaYearPicker),\r\n    ...extractComponentEmits(VaDayPicker),\r\n    ...extractComponentEmits(VaMonthPicker),\r\n  ],\r\n\r\n  setup (props, { emit }) {\r\n    const { valueComputed } = useStateful(props, emit, undefined)\r\n\r\n    const { syncView } = useView(props, emit, { type: props.type })\r\n\r\n    const onMonthClick = (date: Date) => {\r\n      emit('click:month', date)\r\n      const year = date.getFullYear()\r\n      const month = date.getMonth()\r\n      if (props.type !== 'month') {\r\n        syncView.value = { type: 'day', year, month }\r\n      }\r\n    }\r\n\r\n    const onMonthModelValueUpdate = (modelValue: VaDatePickerModelValue) => {\r\n      // Do not update model value if we just want to change view\r\n      if (props.type === 'month') { valueComputed.value = modelValue }\r\n    }\r\n\r\n    const onYearClick = (date : Date) => {\r\n      emit('click:year', date)\r\n\r\n      const year = date.getFullYear()\r\n\r\n      if (props.type !== 'year') {\r\n        syncView.value = { type: 'month', year, month: syncView.value.month }\r\n      }\r\n    }\r\n\r\n    const onYearModelValueUpdate = (modelValue: VaDatePickerModelValue) => {\r\n      // Do not update model value if we just want to change view\r\n      if (props.type === 'year') { valueComputed.value = modelValue }\r\n    }\r\n\r\n    const { colorsToCSSVariable } = useColors()\r\n\r\n    const colorsStyle = colorsToCSSVariable({\r\n      color: props.color,\r\n      'weekends-color': props.weekendsColor,\r\n    }, 'va-date-picker')\r\n\r\n    const currentPicker = ref<ComponentOptions | null>(null)\r\n\r\n    watch(syncView, (newValue, prevValue) => {\r\n      // Don't focus new picker if user does not change type\r\n      if (newValue.type === prevValue.type) { return }\r\n\r\n      nextTick(() => {\r\n        if (currentPicker.value) { currentPicker.value.$el.focus() }\r\n      })\r\n    })\r\n\r\n    return {\r\n      dayPickerProps: filterComponentProps(props, extractComponentProps(VaDayPicker)),\r\n      headerProps: filterComponentProps(props, extractComponentProps(VaDatePickerHeader)),\r\n      monthPickerProps: filterComponentProps(props, extractComponentProps(VaMonthPicker)),\r\n      yearPickerProps: filterComponentProps(props, extractComponentProps(VaYearPicker)),\r\n\r\n      syncView,\r\n\r\n      valueComputed,\r\n      onMonthClick,\r\n      onMonthModelValueUpdate,\r\n\r\n      onYearClick,\r\n      onYearModelValueUpdate,\r\n\r\n      colorsStyle,\r\n      currentPicker,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import './_variables.scss';\r\n\r\n.va-date-picker {\r\n  --va-date-picker-content-height: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\r\n\r\n  width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\r\n\r\n  &__picker-wrapper {\r\n    height: var(--va-date-picker-content-height);\r\n  }\r\n\r\n  &__without-week-days {\r\n    --va-date-picker-content-height: calc(var(--va-date-picker-cell-size) * 6 + var(--va-date-picker-cell-gap) * 6);\r\n  }\r\n\r\n  &_mobile {\r\n    .va-day-picker,\r\n    .va-month-picker,\r\n    .va-year-picker {\r\n      height: 100%;\r\n    }\r\n  }\r\n}\r\n\r\n.va-date-picker-header {\r\n  padding-bottom: 0.25rem;\r\n}\r\n</style>\r\n"],"names":["isRange","value","start","end","isSingleDate","Date","isDates","Array","isArray","throwIncorrectModelValueError","modelValue","mode","Error","JSON","stringify","sortRange","useDatePickerModelValue","props","emit","dateEqual","updateModelValue","date","modeInitialValue","isDatesIncludesDate","find","d","filter","sort","a","b","getTime","filterComponentProps","propsValues","childProps","computed","Object","keys","reduce","acc","propName","extractComponentProps","component","ignoreProps","includes","undefined","extractComponentEmits","emits","useView","defaultOverride","defaultView","type","year","getFullYear","month","getMonth","statefulView","ref","syncView","get","view","set","next","prev","getMonthDaysCount","getDate","getNumbersArray","length","from","map","k","useVaDatePickerCalendar","options","currentMonthStartWeekday","localizeWeekday","weekdayNumber","getDay","firstWeekday","getPreviousDates","prevMonthDaysCount","slice","prevAndCurrentDays","currentMonthEndIndex","calendarDates","days","daysRemaining","nextMonthDaysCount","nextMonthDays","currentMonthStartIndex","safeUnref","refOrRaw","isRef","unref","isUndefined","t","useGridKeyboardNavigation","rowSize","onSelected","onFocusIndex","focusedCellIndex","previouslyClicked","containerAttributes","onFocus","index","onKeydown","e","key","preventDefault","onBlur","onMousedown","tabindex","isDatesDayEqual","date1","date2","toDateString","isDatesMonthEqual","isDatesYearEqual","useDatePicker","dates","datesEqual","day","getDateEqualFunction","hoveredIndex","hoveredValue","onClick","isToday","today","isSelected","isInRange","selectedDate","defineComponent","name","otherMonth","Boolean","default","inRange","disabled","selected","weekend","hidden","focused","highlightWeekend","highlightToday","setup","_ctx","_mergeProps","class","VaDatePickerCellProps","VaDatePickerCell","components","monthNames","required","weekdayNames","String","hideWeekDays","showOtherMonths","allowedDays","Function","weekends","toRefs","VaDayPickerCellPropValues","weekdayNamesComputed","gridStartIndex","gridEndIndex","selectedValue","watch","isOtherMonth","isDateDisabled","isDateWeekend","weekday","_createVNode","_renderSlot","VaButton","color","changeView","switchView","icon","flat","size","allowedMonths","months","selectedIndex","isDisabled","monthIndex","allowedYears","startYear","Number","endYear","rootNode","generateYearsArray","yearsCount","i","setFullYear","createYearDate","years","onMounted","scrollHeight","rootNodeHeight","offsetHeight","currentYearOffset","scrollTo","top","scrollIntoYearIndexCenter","findIndex","cellSize","relativeScrollPosition","scrollTop","scrollIntoYearIndex","isYearDisabled","VaDayPicker","VaDatePickerHeader","VaMonthPicker","VaYearPicker","statefulComponentOptions","weekendsColor","valueComputed","useStateful","colorsToCSSVariable","useColors","colorsStyle","currentPicker","newValue","prevValue","nextTick","$el","focus","dayPickerProps","headerProps","monthPickerProps","yearPickerProps","onMonthClick","onMonthModelValueUpdate","onYearClick","onYearModelValueUpdate","style","_","bind"],"mappings":"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"}