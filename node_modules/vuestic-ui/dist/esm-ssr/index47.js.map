{"version":3,"file":"index47.js","sources":["../../src/components/va-tree-view/VaTreeRoot.vue","../../src/components/va-tree-view/VaTreeRoot.vue?vue&type=template&id=0e558b08&lang.js","../../src/components/va-tree-view/VaTreeNode/VaTreeNode.vue","../../src/components/va-tree-view/VaTreeNode/VaTreeNode.vue?vue&type=template&id=55056222&lang.js","../../src/components/va-tree-view/VaTreeNode/index.ts","../../src/components/va-tree-view/SquareWithIcon/SquareWithIcon.vue","../../src/components/va-tree-view/SquareWithIcon/SquareWithIcon.vue?vue&type=template&id=2cbaf102&lang.js","../../src/components/va-tree-view/SquareWithIcon/index.ts","../../src/components/va-tree-view/VaTreeCategory/VaTreeCategory.vue","../../src/components/va-tree-view/VaTreeCategory/VaTreeCategory.vue?vue&type=template&id=5e011da2&lang.js","../../src/components/va-tree-view/VaTreeCategory/index.ts","../../src/components/va-tree-view/index.ts"],"sourcesContent":["<template>\r\n  <div class=\"va-tree-root\">\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { provide, ref } from 'vue'\r\nimport { Options, setup, mixins } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport VaTreeCategory from './VaTreeCategory/VaTreeCategory.vue'\r\n\r\n@Options({\r\n  name: 'VaTreeRoot',\r\n})\r\n\r\nexport default class VaTreeRoot extends mixins(ColorMixin) {\r\n  setupContext = setup(() => {\r\n    const categories = ref<VaTreeCategory[]>([])\r\n\r\n    const onChildMounted = (category: VaTreeCategory) => {\r\n      categories.value.push(category)\r\n    }\r\n\r\n    const onChildUnmounted = (removableCategory: VaTreeCategory) => {\r\n      categories.value = categories.value.filter((category: VaTreeCategory) => category !== removableCategory)\r\n    }\r\n\r\n    const treeRoot = {\r\n      color: this.$props.color,\r\n      onChildMounted,\r\n      onChildUnmounted,\r\n    }\r\n\r\n    provide('treeRoot', treeRoot)\r\n\r\n    return {\r\n      categories,\r\n    }\r\n  })\r\n\r\n  collapse () {\r\n    this.$nextTick(() => {\r\n      this.setupContext.categories.forEach((child: VaTreeCategory) => {\r\n        child.collapse()\r\n      })\r\n    })\r\n  }\r\n\r\n  expand () {\r\n    this.$nextTick(() => {\r\n      this.setupContext.categories.forEach((child: VaTreeCategory) => {\r\n        child.expand()\r\n      })\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import 'variables';\r\n\r\n.va-tree-root {\r\n  padding: var(--va-tree-root-padding);\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-tree-root\">\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { provide, ref } from 'vue'\r\nimport { Options, setup, mixins } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\nimport VaTreeCategory from './VaTreeCategory/VaTreeCategory.vue'\r\n\r\n@Options({\r\n  name: 'VaTreeRoot',\r\n})\r\n\r\nexport default class VaTreeRoot extends mixins(ColorMixin) {\r\n  setupContext = setup(() => {\r\n    const categories = ref<VaTreeCategory[]>([])\r\n\r\n    const onChildMounted = (category: VaTreeCategory) => {\r\n      categories.value.push(category)\r\n    }\r\n\r\n    const onChildUnmounted = (removableCategory: VaTreeCategory) => {\r\n      categories.value = categories.value.filter((category: VaTreeCategory) => category !== removableCategory)\r\n    }\r\n\r\n    const treeRoot = {\r\n      color: this.$props.color,\r\n      onChildMounted,\r\n      onChildUnmounted,\r\n    }\r\n\r\n    provide('treeRoot', treeRoot)\r\n\r\n    return {\r\n      categories,\r\n    }\r\n  })\r\n\r\n  collapse () {\r\n    this.$nextTick(() => {\r\n      this.setupContext.categories.forEach((child: VaTreeCategory) => {\r\n        child.collapse()\r\n      })\r\n    })\r\n  }\r\n\r\n  expand () {\r\n    this.$nextTick(() => {\r\n      this.setupContext.categories.forEach((child: VaTreeCategory) => {\r\n        child.expand()\r\n      })\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import 'variables';\r\n\r\n.va-tree-root {\r\n  padding: var(--va-tree-root-padding);\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-tree-node\"\r\n    :class=\"{ 'va-tree-node--highlighted': $props.highlighted }\"\r\n  >\r\n    <div\r\n      class=\"va-tree-node__checkbox\"\r\n      v-if=\"$slots.checkbox\"\r\n    >\r\n      <slot name=\"checkbox\" />\r\n    </div>\r\n    <div\r\n      class=\"va-tree-node__icon\"\r\n      v-if=\"$props.icon\"\r\n    >\r\n      <va-icon\r\n        :name=\"$props.icon\"\r\n        :color=\"theme.getColor('info')\"\r\n        :size=\"24\"\r\n      />\r\n    </div>\r\n    <div class=\"va-tree-node__label\">\r\n      <slot />\r\n    </div>\r\n    <div\r\n      class=\"va-tree-node__icon-right\"\r\n      v-if=\"$props.iconRight\"\r\n      :size=\"24\"\r\n    >\r\n      <va-icon\r\n        :name=\"$props.iconRight\"\r\n        :color=\"theme.getColor('info')\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { inject } from 'vue'\r\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport VaIcon from '../../va-icon'\r\n\r\nclass TreeNodeProps {\r\n  highlighted = prop<boolean>(Boolean)\r\n  icon = prop<string>({ type: String, default: '' })\r\n  iconRight = prop<string>({ type: String, default: '' })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n}\r\n\r\nconst TreeNodePropsMixin = Vue.with(TreeNodeProps)\r\n\r\n@Options({\r\n  name: 'VaTreeNode',\r\n  components: { VaIcon },\r\n})\r\nexport default class VaTreeNode extends mixins(\r\n  ColorMixin,\r\n  TreeNodePropsMixin,\r\n) {\r\n  setupContext = setup(() => {\r\n    const treeCategory = inject('treeCategory', {\r\n      onChildMounted: (value: any) => undefined,\r\n      onChildUnmounted: (value: any) => undefined,\r\n    })\r\n\r\n    return {\r\n      treeCategory,\r\n    }\r\n  })\r\n\r\n  mounted () {\r\n    if (this.setupContext.treeCategory) {\r\n      this.setupContext.treeCategory.onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  beforeUnmount () {\r\n    if (this.setupContext.treeCategory) {\r\n      this.setupContext.treeCategory.onChildUnmounted(this)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables.scss';\r\n\r\n.va-tree-node {\r\n  display: var(--va-tree-node-display);\r\n  align-items: var(--va-tree-node-align-items);\r\n\r\n  .form-group {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  &__icon {\r\n    margin-right: var(--va-tree-node-icon-margin-right);\r\n  }\r\n\r\n  &__icon-right {\r\n    margin-left: var(--va-tree-node-icon-margin-right);\r\n  }\r\n\r\n  &__label {\r\n    flex-grow: var(--va-tree-node-label-flex-grow);\r\n    word-wrap: var(--va-tree-node-label-word-wrap);\r\n    overflow: var(--va-tree-node-label-overflow);\r\n  }\r\n\r\n  &--highlighted #{&}__label {\r\n    background-color: var(--va-tree-node-label-highlighted-bg);\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-tree-node\"\r\n    :class=\"{ 'va-tree-node--highlighted': $props.highlighted }\"\r\n  >\r\n    <div\r\n      class=\"va-tree-node__checkbox\"\r\n      v-if=\"$slots.checkbox\"\r\n    >\r\n      <slot name=\"checkbox\" />\r\n    </div>\r\n    <div\r\n      class=\"va-tree-node__icon\"\r\n      v-if=\"$props.icon\"\r\n    >\r\n      <va-icon\r\n        :name=\"$props.icon\"\r\n        :color=\"theme.getColor('info')\"\r\n        :size=\"24\"\r\n      />\r\n    </div>\r\n    <div class=\"va-tree-node__label\">\r\n      <slot />\r\n    </div>\r\n    <div\r\n      class=\"va-tree-node__icon-right\"\r\n      v-if=\"$props.iconRight\"\r\n      :size=\"24\"\r\n    >\r\n      <va-icon\r\n        :name=\"$props.iconRight\"\r\n        :color=\"theme.getColor('info')\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { inject } from 'vue'\r\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport VaIcon from '../../va-icon'\r\n\r\nclass TreeNodeProps {\r\n  highlighted = prop<boolean>(Boolean)\r\n  icon = prop<string>({ type: String, default: '' })\r\n  iconRight = prop<string>({ type: String, default: '' })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n}\r\n\r\nconst TreeNodePropsMixin = Vue.with(TreeNodeProps)\r\n\r\n@Options({\r\n  name: 'VaTreeNode',\r\n  components: { VaIcon },\r\n})\r\nexport default class VaTreeNode extends mixins(\r\n  ColorMixin,\r\n  TreeNodePropsMixin,\r\n) {\r\n  setupContext = setup(() => {\r\n    const treeCategory = inject('treeCategory', {\r\n      onChildMounted: (value: any) => undefined,\r\n      onChildUnmounted: (value: any) => undefined,\r\n    })\r\n\r\n    return {\r\n      treeCategory,\r\n    }\r\n  })\r\n\r\n  mounted () {\r\n    if (this.setupContext.treeCategory) {\r\n      this.setupContext.treeCategory.onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  beforeUnmount () {\r\n    if (this.setupContext.treeCategory) {\r\n      this.setupContext.treeCategory.onChildUnmounted(this)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables.scss';\r\n\r\n.va-tree-node {\r\n  display: var(--va-tree-node-display);\r\n  align-items: var(--va-tree-node-align-items);\r\n\r\n  .form-group {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  &__icon {\r\n    margin-right: var(--va-tree-node-icon-margin-right);\r\n  }\r\n\r\n  &__icon-right {\r\n    margin-left: var(--va-tree-node-icon-margin-right);\r\n  }\r\n\r\n  &__label {\r\n    flex-grow: var(--va-tree-node-label-flex-grow);\r\n    word-wrap: var(--va-tree-node-label-word-wrap);\r\n    overflow: var(--va-tree-node-label-overflow);\r\n  }\r\n\r\n  &--highlighted #{&}__label {\r\n    background-color: var(--va-tree-node-label-highlighted-bg);\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaTreeNode from './VaTreeNode.vue'\r\n\r\nexport default withConfigTransport(VaTreeNode as any)\r\n","<template>\r\n  <div\r\n    class=\"square-with-icon\"\r\n    :style=\"{ backgroundColor: colorComputed }\"\r\n  >\r\n    <va-icon :name=\"$props.icon\" />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, Vue, prop, mixins } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport VaIcon from '../../va-icon'\r\n\r\nclass SquareWithIconProps {\r\n  icon = prop<string>({ default: '', type: String, required: true })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n}\r\n\r\nconst SquareWithIconPropsMixin = Vue.with(SquareWithIconProps)\r\n\r\n@Options({\r\n  name: 'SquareWithIcon',\r\n  components: { VaIcon },\r\n})\r\nexport default class SquareWithIcon extends mixins(\r\n  ColorMixin,\r\n  SquareWithIconPropsMixin,\r\n) {\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.square-with-icon {\r\n  display: var(--square-with-icon-display);\r\n  justify-content: var(--square-with-icon-justify-content);\r\n  align-items: var(--square-with-icon-align-items);\r\n  color: var(--square-with-icon-color);\r\n  background-color: var(--square-with-icon-background-color);\r\n  border-radius: var(--square-with-icon-border-radius);\r\n  width: var(--square-with-icon-width);\r\n  height: var(--square-with-icon-height);\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"square-with-icon\"\r\n    :style=\"{ backgroundColor: colorComputed }\"\r\n  >\r\n    <va-icon :name=\"$props.icon\" />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, Vue, prop, mixins } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport VaIcon from '../../va-icon'\r\n\r\nclass SquareWithIconProps {\r\n  icon = prop<string>({ default: '', type: String, required: true })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n}\r\n\r\nconst SquareWithIconPropsMixin = Vue.with(SquareWithIconProps)\r\n\r\n@Options({\r\n  name: 'SquareWithIcon',\r\n  components: { VaIcon },\r\n})\r\nexport default class SquareWithIcon extends mixins(\r\n  ColorMixin,\r\n  SquareWithIconPropsMixin,\r\n) {\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.square-with-icon {\r\n  display: var(--square-with-icon-display);\r\n  justify-content: var(--square-with-icon-justify-content);\r\n  align-items: var(--square-with-icon-align-items);\r\n  color: var(--square-with-icon-color);\r\n  background-color: var(--square-with-icon-background-color);\r\n  border-radius: var(--square-with-icon-border-radius);\r\n  width: var(--square-with-icon-width);\r\n  height: var(--square-with-icon-height);\r\n}\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport SquareWithIcon from './SquareWithIcon.vue'\r\n\r\nexport default withConfigTransport(SquareWithIcon as any)\r\n","<template>\r\n  <div class=\"va-tree-category\">\r\n    <div\r\n      class=\"va-tree-category__header\"\r\n      @click=\"toggle\"\r\n    >\r\n      <div class=\"va-tree-category__header-switcher\">\r\n        <square-with-icon\r\n          :icon=\"isOpenCached ? 'remove' : 'add'\"\r\n          :color=\"setupContext.treeRoot.color || colorComputed\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"va-tree-category__header-checkbox\"\r\n        v-if=\"$slots.checkbox\"\r\n      >\r\n        <slot name=\"checkbox\" />\r\n      </div>\r\n      <div\r\n        class=\"va-tree-category__header-icon\"\r\n        v-if=\"$props.icon\"\r\n      >\r\n        <va-icon\r\n          :name=\"$props.icon\"\r\n          :color=\"theme.getColor('info')\"\r\n        />\r\n      </div>\r\n      <div class=\"va-tree-category__header-label\">\r\n        {{ $props.label }}\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      class=\"va-tree-category__list-container\"\r\n      v-if=\"isOpenCached\"\r\n    >\r\n      <div class=\"va-tree-category__list-internal-container\">\r\n        <slot />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { provide, inject, watch, ComponentPublicInstance, ref } from 'vue'\r\nimport { Options, Vue, mixins, prop, setup } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport SquareWithIcon from '../SquareWithIcon'\r\nimport VaIcon from '../../va-icon'\r\nimport VaTreeNode from '../VaTreeNode/VaTreeNode.vue'\r\n\r\nclass TreeCategoryProps {\r\n  label = prop<string | number>({ default: '', type: [String, Number] })\r\n  isOpen = prop<boolean>(Boolean)\r\n  icon = prop<string>({ default: '', type: String })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n}\r\n\r\nconst TreeCategoryPropsMixin = Vue.with(TreeCategoryProps)\r\n\r\n@Options({\r\n  name: 'VaTreeCategory',\r\n  components: { VaIcon, SquareWithIcon },\r\n})\r\nexport default class VaTreeCategory extends mixins(\r\n  ColorMixin,\r\n  TreeCategoryPropsMixin,\r\n) {\r\n  isOpenCached: boolean | undefined = false\r\n\r\n  setupContext = setup(() => {\r\n    const nodes = ref<(VaTreeCategory | VaTreeNode)[]>([])\r\n\r\n    const onChildMounted = (node: VaTreeCategory | VaTreeNode) => {\r\n      nodes.value.push(node)\r\n    }\r\n\r\n    const onChildUnmounted = (removableNode: VaTreeCategory | VaTreeNode) => {\r\n      nodes.value = nodes.value.filter((node: VaTreeCategory | VaTreeNode) => node !== removableNode)\r\n    }\r\n\r\n    const treeCategory = {\r\n      onChildMounted,\r\n      onChildUnmounted,\r\n    }\r\n\r\n    provide('treeCategory', treeCategory)\r\n\r\n    const treeRoot = inject('treeRoot', {\r\n      onChildMounted: (value: any) => undefined,\r\n      onChildUnmounted: (value: any) => undefined,\r\n    })\r\n\r\n    return {\r\n      treeCategory,\r\n      treeRoot,\r\n      nodes,\r\n    }\r\n  })\r\n\r\n  created () {\r\n    watch(\r\n      () => this.$props.isOpen,\r\n      (isOpen) => {\r\n        this.isOpenCached = isOpen\r\n      },\r\n      { immediate: true })\r\n  }\r\n\r\n  collapse () {\r\n    this.isOpenCached = false\r\n    this.$nextTick(() => {\r\n      this.setupContext.nodes.forEach((child: ComponentPublicInstance) => {\r\n        if (child.$options.name === 'va-tree-category') {\r\n          (child as VaTreeCategory).collapse()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  expand () {\r\n    this.isOpenCached = true\r\n    this.$nextTick(() => {\r\n      this.setupContext.nodes.forEach((child: VaTreeCategory | VaTreeNode) => {\r\n        if (child instanceof VaTreeCategory) {\r\n          child.expand()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  toggle (e: MouseEvent) {\r\n    if (!(e.target as HTMLElement).classList.contains('va-checkbox__input')) {\r\n      this.isOpenCached = !this.isOpenCached\r\n    }\r\n  }\r\n\r\n  mounted () {\r\n    if (this.setupContext.treeRoot) {\r\n      this.setupContext.treeRoot.onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  beforeUnmount () {\r\n    if (this.setupContext.treeRoot) {\r\n      this.setupContext.treeRoot.onChildUnmounted(this)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-tree-category {\r\n  &__header {\r\n    cursor: var(--va-tree-category-header-cursor);\r\n    display: var(--va-tree-category-header-display);\r\n    align-items: var(--va-tree-category-header-align-items);\r\n  }\r\n\r\n  &__header-switcher {\r\n    margin-right: 0.5rem;\r\n  }\r\n\r\n  &__header-checkbox {\r\n    margin-right: var(--va-tree-category-header-checkbox-margin-right);\r\n    height: var(--va-tree-category-header-checkbox-height);\r\n    width: var(--va-tree-category-header-checkbox-width);\r\n    display: var(--va-tree-category-header-checkbox-display);\r\n    align-items: var(--va-tree-category-header-checkbox-align-items);\r\n    justify-content: var(--va-tree-category-header-checkbox-justify-content);\r\n\r\n    .va-checkbox__square {\r\n      width: 1.5rem;\r\n      height: 1.5rem;\r\n      flex: 0 0 1.5rem;\r\n    }\r\n  }\r\n\r\n  &__header-icon {\r\n    color: var(--va-tree-category-header-icon-color);\r\n    margin-right: var(--va-tree-category-header-icon-margin-right);\r\n    font-size: var(--va-tree-category-header-icon-font-size);\r\n    line-height: var(--va-tree-category-header-icon-line-height);\r\n  }\r\n\r\n  &__header-label {\r\n    word-wrap: var(--va-tree-category-header-label-word-wrap);\r\n    overflow: var(--va-tree-category-header-label-overflow);\r\n  }\r\n\r\n  &__list-container {\r\n    margin-top: var(--va-tree-category-list-container-margin-top);\r\n    padding-left: var(--va-tree-category-list-container-padding-left);\r\n  }\r\n\r\n  &__list-internal-container {\r\n    background-image: linear-gradient(#adb3b9 33%, rgba(255, 255, 255, 0) 0%);\r\n    background-position: left;\r\n    background-size: 1px 3px;\r\n    background-repeat: repeat-y;\r\n    padding-left: 1.1875rem;\r\n  }\r\n\r\n  & + .va-tree-category,\r\n  .va-tree-node + .va-tree-node,\r\n  .va-tree-category + .va-tree-node,\r\n  .va-tree-node + .va-tree-category {\r\n    margin-top: 0.75rem;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-tree-category\">\r\n    <div\r\n      class=\"va-tree-category__header\"\r\n      @click=\"toggle\"\r\n    >\r\n      <div class=\"va-tree-category__header-switcher\">\r\n        <square-with-icon\r\n          :icon=\"isOpenCached ? 'remove' : 'add'\"\r\n          :color=\"setupContext.treeRoot.color || colorComputed\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"va-tree-category__header-checkbox\"\r\n        v-if=\"$slots.checkbox\"\r\n      >\r\n        <slot name=\"checkbox\" />\r\n      </div>\r\n      <div\r\n        class=\"va-tree-category__header-icon\"\r\n        v-if=\"$props.icon\"\r\n      >\r\n        <va-icon\r\n          :name=\"$props.icon\"\r\n          :color=\"theme.getColor('info')\"\r\n        />\r\n      </div>\r\n      <div class=\"va-tree-category__header-label\">\r\n        {{ $props.label }}\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      class=\"va-tree-category__list-container\"\r\n      v-if=\"isOpenCached\"\r\n    >\r\n      <div class=\"va-tree-category__list-internal-container\">\r\n        <slot />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { provide, inject, watch, ComponentPublicInstance, ref } from 'vue'\r\nimport { Options, Vue, mixins, prop, setup } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport SquareWithIcon from '../SquareWithIcon'\r\nimport VaIcon from '../../va-icon'\r\nimport VaTreeNode from '../VaTreeNode/VaTreeNode.vue'\r\n\r\nclass TreeCategoryProps {\r\n  label = prop<string | number>({ default: '', type: [String, Number] })\r\n  isOpen = prop<boolean>(Boolean)\r\n  icon = prop<string>({ default: '', type: String })\r\n  color = prop<string>({ type: String, default: 'primary' })\r\n}\r\n\r\nconst TreeCategoryPropsMixin = Vue.with(TreeCategoryProps)\r\n\r\n@Options({\r\n  name: 'VaTreeCategory',\r\n  components: { VaIcon, SquareWithIcon },\r\n})\r\nexport default class VaTreeCategory extends mixins(\r\n  ColorMixin,\r\n  TreeCategoryPropsMixin,\r\n) {\r\n  isOpenCached: boolean | undefined = false\r\n\r\n  setupContext = setup(() => {\r\n    const nodes = ref<(VaTreeCategory | VaTreeNode)[]>([])\r\n\r\n    const onChildMounted = (node: VaTreeCategory | VaTreeNode) => {\r\n      nodes.value.push(node)\r\n    }\r\n\r\n    const onChildUnmounted = (removableNode: VaTreeCategory | VaTreeNode) => {\r\n      nodes.value = nodes.value.filter((node: VaTreeCategory | VaTreeNode) => node !== removableNode)\r\n    }\r\n\r\n    const treeCategory = {\r\n      onChildMounted,\r\n      onChildUnmounted,\r\n    }\r\n\r\n    provide('treeCategory', treeCategory)\r\n\r\n    const treeRoot = inject('treeRoot', {\r\n      onChildMounted: (value: any) => undefined,\r\n      onChildUnmounted: (value: any) => undefined,\r\n    })\r\n\r\n    return {\r\n      treeCategory,\r\n      treeRoot,\r\n      nodes,\r\n    }\r\n  })\r\n\r\n  created () {\r\n    watch(\r\n      () => this.$props.isOpen,\r\n      (isOpen) => {\r\n        this.isOpenCached = isOpen\r\n      },\r\n      { immediate: true })\r\n  }\r\n\r\n  collapse () {\r\n    this.isOpenCached = false\r\n    this.$nextTick(() => {\r\n      this.setupContext.nodes.forEach((child: ComponentPublicInstance) => {\r\n        if (child.$options.name === 'va-tree-category') {\r\n          (child as VaTreeCategory).collapse()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  expand () {\r\n    this.isOpenCached = true\r\n    this.$nextTick(() => {\r\n      this.setupContext.nodes.forEach((child: VaTreeCategory | VaTreeNode) => {\r\n        if (child instanceof VaTreeCategory) {\r\n          child.expand()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  toggle (e: MouseEvent) {\r\n    if (!(e.target as HTMLElement).classList.contains('va-checkbox__input')) {\r\n      this.isOpenCached = !this.isOpenCached\r\n    }\r\n  }\r\n\r\n  mounted () {\r\n    if (this.setupContext.treeRoot) {\r\n      this.setupContext.treeRoot.onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  beforeUnmount () {\r\n    if (this.setupContext.treeRoot) {\r\n      this.setupContext.treeRoot.onChildUnmounted(this)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-tree-category {\r\n  &__header {\r\n    cursor: var(--va-tree-category-header-cursor);\r\n    display: var(--va-tree-category-header-display);\r\n    align-items: var(--va-tree-category-header-align-items);\r\n  }\r\n\r\n  &__header-switcher {\r\n    margin-right: 0.5rem;\r\n  }\r\n\r\n  &__header-checkbox {\r\n    margin-right: var(--va-tree-category-header-checkbox-margin-right);\r\n    height: var(--va-tree-category-header-checkbox-height);\r\n    width: var(--va-tree-category-header-checkbox-width);\r\n    display: var(--va-tree-category-header-checkbox-display);\r\n    align-items: var(--va-tree-category-header-checkbox-align-items);\r\n    justify-content: var(--va-tree-category-header-checkbox-justify-content);\r\n\r\n    .va-checkbox__square {\r\n      width: 1.5rem;\r\n      height: 1.5rem;\r\n      flex: 0 0 1.5rem;\r\n    }\r\n  }\r\n\r\n  &__header-icon {\r\n    color: var(--va-tree-category-header-icon-color);\r\n    margin-right: var(--va-tree-category-header-icon-margin-right);\r\n    font-size: var(--va-tree-category-header-icon-font-size);\r\n    line-height: var(--va-tree-category-header-icon-line-height);\r\n  }\r\n\r\n  &__header-label {\r\n    word-wrap: var(--va-tree-category-header-label-word-wrap);\r\n    overflow: var(--va-tree-category-header-label-overflow);\r\n  }\r\n\r\n  &__list-container {\r\n    margin-top: var(--va-tree-category-list-container-margin-top);\r\n    padding-left: var(--va-tree-category-list-container-padding-left);\r\n  }\r\n\r\n  &__list-internal-container {\r\n    background-image: linear-gradient(#adb3b9 33%, rgba(255, 255, 255, 0) 0%);\r\n    background-position: left;\r\n    background-size: 1px 3px;\r\n    background-repeat: repeat-y;\r\n    padding-left: 1.1875rem;\r\n  }\r\n\r\n  & + .va-tree-category,\r\n  .va-tree-node + .va-tree-node,\r\n  .va-tree-category + .va-tree-node,\r\n  .va-tree-node + .va-tree-category {\r\n    margin-top: 0.75rem;\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaTreeCategory from './VaTreeCategory.vue'\r\n\r\nexport default withConfigTransport(VaTreeCategory as any)\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaTreeRoot from './VaTreeRoot.vue'\r\n\r\nexport { default as VaTreeNode } from './VaTreeNode'\r\nexport { default as VaTreeCategory } from './VaTreeCategory'\r\n\r\nexport default withConfigTransport(VaTreeRoot as any)\r\n"],"names":["VaTreeRoot","mixins","ColorMixin","constructor","this","setup","categories","ref","treeRoot","color","$props","onChildMounted","category","value","push","onChildUnmounted","removableCategory","filter","provide","collapse","$nextTick","setupContext","forEach","child","expand","Options","name","_mergeProps","class","TreeNodePropsMixin","Vue","with","TreeNodeProps","prop","Boolean","type","String","default","VaTreeNode","treeCategory","inject","mounted","beforeUnmount","components","VaIcon","_ctx","highlighted","checkbox","icon","getColor","size","iconRight","withConfigTransport","SquareWithIconPropsMixin","SquareWithIconProps","required","SquareWithIcon","style","TreeCategoryPropsMixin","TreeCategoryProps","Number","VaTreeCategory","nodes","node","removableNode","created","watch","isOpen","isOpenCached","immediate","$options","VaTreeCategory_1","toggle","e","target","classList","contains","label"],"mappings":"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"}