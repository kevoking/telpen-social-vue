{"version":3,"file":"index4.js","sources":["../../src/mixins/ScrollMixin/ScrollMixin.ts","../../src/components/va-app-bar/VaAppBar.vue","../../src/components/va-app-bar/VaAppBar.vue?vue&type=template&id=07072507&lang.js","../../src/components/va-app-bar/index.ts"],"sourcesContent":["import { onMounted, onBeforeUnmount, ref } from 'vue'\r\n\r\nfunction getTargetElement (target: Element | string | null) {\r\n  if (!target) {\r\n    throw new Error('Cant find target')\r\n  }\r\n\r\n  if (typeof target === 'string') {\r\n    const targetElement = document.querySelector(target)\r\n    if (targetElement) {\r\n      return targetElement\r\n    }\r\n  }\r\n\r\n  return target as Element\r\n}\r\n\r\nexport function setupScroll (target: Element | string, onScrollCallback: (e?: any) => unknown) {\r\n  const root = ref(null)\r\n  let targetElement: Element | null\r\n\r\n  onMounted(() => {\r\n    targetElement = getTargetElement(target || root.value)\r\n    if (targetElement) {\r\n      targetElement.addEventListener('scroll', onScrollCallback)\r\n    }\r\n  })\r\n\r\n  onBeforeUnmount(() => {\r\n    if (targetElement) {\r\n      targetElement.removeEventListener('scroll', onScrollCallback)\r\n    }\r\n  })\r\n\r\n  return root\r\n}\r\n","<template>\r\n  <header :class=\"computedClass\" :style=\"computedStyle\" ref=\"scrollRoot\">\r\n    <slot />\r\n  </header>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\r\nimport { setupScroll } from '../../mixins/ScrollMixin/ScrollMixin'\r\nimport {\r\n  getGradientBackground,\r\n  getBoxShadowColor,\r\n} from '../../services/color-config/color-functions'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\n\r\nclass VaAppBarProps {\r\n  gradient = prop<boolean>({ type: Boolean, default: false })\r\n  bottom = prop<boolean>({ type: Boolean, default: false })\r\n  target = prop<string | Element>({ type: [Object, String], default: '' })\r\n  hideOnScroll = prop<boolean>({ type: Boolean, default: false })\r\n  shadowOnScroll = prop<boolean>({ type: Boolean, default: false })\r\n  shadowColor = prop<string>({ type: String, default: '' })\r\n  color = prop<string>({ type: String, default: undefined })\r\n}\r\n\r\nconst CardPropsMixin = Vue.with(VaAppBarProps)\r\n\r\n@Options({ name: 'VaAppBar' })\r\nexport default class VaAppBar extends mixins(ColorMixin, CardPropsMixin) {\r\n  isHidden = false\r\n  doShowShadow = false\r\n\r\n  scrollRoot = setup(() => {\r\n    let prevScrollPosition = 0\r\n    return setupScroll(this.target, (e: any) => {\r\n      if (prevScrollPosition < e.target.scrollTop) {\r\n        // Scroll down\r\n        this.isHidden = !!this.hideOnScroll\r\n        this.doShowShadow = !!this.shadowOnScroll\r\n      } else {\r\n        // Scroll up\r\n        this.isHidden = false\r\n        this.doShowShadow = false\r\n      }\r\n      prevScrollPosition = e.target.scrollTop\r\n    })\r\n  })\r\n\r\n  get colorComputed () {\r\n    return this.theme.getColor(this.color, 'primary')\r\n  }\r\n\r\n  get shadowColorComputed () {\r\n    return this.theme.getColor(this.shadowColor, this.colorComputed)\r\n  }\r\n\r\n  get computedShadow () {\r\n    if (!this.doShowShadow) {\r\n      return ''\r\n    }\r\n\r\n    const shadow = getBoxShadowColor(this.shadowColor ? this.shadowColorComputed : this.colorComputed)\r\n\r\n    return `0px 0px 12px 2px ${shadow}`\r\n  }\r\n\r\n  get transformComputed () {\r\n    if (!this.isHidden) {\r\n      return ''\r\n    }\r\n\r\n    return this.bottom ? 'translateY(100%)' : 'translateY(-100%)'\r\n  }\r\n\r\n  get computedStyle () {\r\n    return {\r\n      background: this.gradient ? getGradientBackground(this.colorComputed) : this.colorComputed,\r\n      'box-shadow': this.computedShadow,\r\n      transform: this.transformComputed,\r\n    }\r\n  }\r\n\r\n  get computedClass () {\r\n    return {\r\n      'va-app-bar': true,\r\n      'va-app-bar--bottom': this.bottom,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"variables\";\r\n\r\n.va-app-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  position: var(--va-app-bar-position);\r\n  transition: all 0.5s ease;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: var(--va-app-bar-height);\r\n  min-height: var(--va-app-bar-height);\r\n  min-width: 100%;\r\n\r\n  &--bottom {\r\n    top: 100%;\r\n    transform: translateY(-100%);\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <header :class=\"computedClass\" :style=\"computedStyle\" ref=\"scrollRoot\">\r\n    <slot />\r\n  </header>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { mixins, Options, prop, setup, Vue } from 'vue-class-component'\r\nimport { setupScroll } from '../../mixins/ScrollMixin/ScrollMixin'\r\nimport {\r\n  getGradientBackground,\r\n  getBoxShadowColor,\r\n} from '../../services/color-config/color-functions'\r\nimport ColorMixin from '../../services/color-config/ColorMixin'\r\n\r\nclass VaAppBarProps {\r\n  gradient = prop<boolean>({ type: Boolean, default: false })\r\n  bottom = prop<boolean>({ type: Boolean, default: false })\r\n  target = prop<string | Element>({ type: [Object, String], default: '' })\r\n  hideOnScroll = prop<boolean>({ type: Boolean, default: false })\r\n  shadowOnScroll = prop<boolean>({ type: Boolean, default: false })\r\n  shadowColor = prop<string>({ type: String, default: '' })\r\n  color = prop<string>({ type: String, default: undefined })\r\n}\r\n\r\nconst CardPropsMixin = Vue.with(VaAppBarProps)\r\n\r\n@Options({ name: 'VaAppBar' })\r\nexport default class VaAppBar extends mixins(ColorMixin, CardPropsMixin) {\r\n  isHidden = false\r\n  doShowShadow = false\r\n\r\n  scrollRoot = setup(() => {\r\n    let prevScrollPosition = 0\r\n    return setupScroll(this.target, (e: any) => {\r\n      if (prevScrollPosition < e.target.scrollTop) {\r\n        // Scroll down\r\n        this.isHidden = !!this.hideOnScroll\r\n        this.doShowShadow = !!this.shadowOnScroll\r\n      } else {\r\n        // Scroll up\r\n        this.isHidden = false\r\n        this.doShowShadow = false\r\n      }\r\n      prevScrollPosition = e.target.scrollTop\r\n    })\r\n  })\r\n\r\n  get colorComputed () {\r\n    return this.theme.getColor(this.color, 'primary')\r\n  }\r\n\r\n  get shadowColorComputed () {\r\n    return this.theme.getColor(this.shadowColor, this.colorComputed)\r\n  }\r\n\r\n  get computedShadow () {\r\n    if (!this.doShowShadow) {\r\n      return ''\r\n    }\r\n\r\n    const shadow = getBoxShadowColor(this.shadowColor ? this.shadowColorComputed : this.colorComputed)\r\n\r\n    return `0px 0px 12px 2px ${shadow}`\r\n  }\r\n\r\n  get transformComputed () {\r\n    if (!this.isHidden) {\r\n      return ''\r\n    }\r\n\r\n    return this.bottom ? 'translateY(100%)' : 'translateY(-100%)'\r\n  }\r\n\r\n  get computedStyle () {\r\n    return {\r\n      background: this.gradient ? getGradientBackground(this.colorComputed) : this.colorComputed,\r\n      'box-shadow': this.computedShadow,\r\n      transform: this.transformComputed,\r\n    }\r\n  }\r\n\r\n  get computedClass () {\r\n    return {\r\n      'va-app-bar': true,\r\n      'va-app-bar--bottom': this.bottom,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"variables\";\r\n\r\n.va-app-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  position: var(--va-app-bar-position);\r\n  transition: all 0.5s ease;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: var(--va-app-bar-height);\r\n  min-height: var(--va-app-bar-height);\r\n  min-width: 100%;\r\n\r\n  &--bottom {\r\n    top: 100%;\r\n    transform: translateY(-100%);\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaAppBar from './VaAppBar.vue'\r\n\r\nexport default withConfigTransport(VaAppBar)\r\n"],"names":["setupScroll","target","onScrollCallback","root","ref","targetElement","onMounted","getTargetElement","Error","document","querySelector","value","addEventListener","onBeforeUnmount","removeEventListener","CardPropsMixin","Vue","with","VaAppBarProps","constructor","this","prop","type","Boolean","default","Object","String","undefined","VaAppBar","mixins","ColorMixin","setup","prevScrollPosition","e","scrollTop","isHidden","hideOnScroll","doShowShadow","shadowOnScroll","colorComputed","theme","getColor","color","shadowColorComputed","shadowColor","computedShadow","getBoxShadowColor","transformComputed","bottom","computedStyle","background","gradient","getGradientBackground","transform","computedClass","Options","name","_mergeProps","class","_ctx","style","withConfigTransport"],"mappings":"0fAiBgBA,YAAaC,EAA0BC,GACrD,MAAMC,EAAOC,EAAI,MACjB,IAAIC,EAeJ,OAbAC,GAAU,KACRD,EApBJ,SAASE,iBAAkBN,GACzB,IAAKA,EACH,MAAM,IAAIO,MAAM,oBAGlB,GAAsB,iBAAXP,EAAqB,CAC9B,MAAMI,EAAgBI,SAASC,cAAcT,GAC7C,GAAII,EACF,OAAOA,EAIX,OAAOJ,EAQWM,CAAiBN,GAAUE,EAAKQ,OAC5CN,GACFA,EAAcO,iBAAiB,SAAUV,MAI7CW,GAAgB,KACVR,GACFA,EAAcS,oBAAoB,SAAUZ,MAIzCC,ECTT,MAAMY,EAAiBC,EAAIC,KAV3B,MAAMC,cAANC,cACEC,cAAWC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IACnDJ,YAASC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IACjDJ,YAASC,EAAuB,CAAEC,KAAM,CAACG,OAAQC,QAASF,QAAS,KACnEJ,kBAAeC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IACvDJ,oBAAiBC,EAAc,CAAEC,KAAMC,QAASC,SAAS,IACzDJ,iBAAcC,EAAa,CAAEC,KAAMI,OAAQF,QAAS,KACpDJ,WAAQC,EAAa,CAAEC,KAAMI,OAAQF,aAASG,OAMhD,IAAqBC,EAArB,MAAqBA,iBAAiBC,EAAOC,EAAYf,IAAzDI,kCACEC,eAAW,EACXA,mBAAe,EAEfA,gBAAaW,GAAM,KACjB,IAAIC,EAAqB,EACzB,OAAOhC,YAAYoB,KAAKnB,QAASgC,IAC3BD,EAAqBC,EAAEhC,OAAOiC,WAEhCd,KAAKe,WAAaf,KAAKgB,aACvBhB,KAAKiB,eAAiBjB,KAAKkB,iBAG3BlB,KAAKe,UAAW,EAChBf,KAAKiB,cAAe,GAEtBL,EAAqBC,EAAEhC,OAAOiC,gBAIlCK,oBACE,OAAOnB,KAAKoB,MAAMC,SAASrB,KAAKsB,MAAO,WAGzCC,0BACE,OAAOvB,KAAKoB,MAAMC,SAASrB,KAAKwB,YAAaxB,KAAKmB,eAGpDM,qBACE,IAAKzB,KAAKiB,aACR,MAAO,GAKT,MAAO,oBAFQS,EAAkB1B,KAAKwB,YAAcxB,KAAKuB,oBAAsBvB,KAAKmB,iBAKtFQ,wBACE,OAAK3B,KAAKe,SAIHf,KAAK4B,OAAS,mBAAqB,oBAHjC,GAMXC,oBACE,MAAO,CACLC,WAAY9B,KAAK+B,SAAWC,EAAsBhC,KAAKmB,eAAiBnB,KAAKmB,cAC7E,aAAcnB,KAAKyB,eACnBQ,UAAWjC,KAAK2B,mBAIpBO,oBACE,MAAO,CACL,cAAc,EACd,qBAAsBlC,KAAK4B,UAzDZpB,KADpB2B,EAAQ,CAAEC,KAAM,cACI5B,SAAAA,gZC3BnB6B,GAASC,MAAOC,gBAAgBC,MAAOD,gBAAevD,IAAI,0HCE5D,MAAeyD,EAAoBjC"}