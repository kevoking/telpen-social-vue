{"version":3,"file":"index55.js","sources":["../../src/mixins/FormComponent/FormComponentMixin.ts","../../src/components/va-input/VaMessageList/VaMessageList.vue","../../src/components/va-input/VaMessageList/VaMessageList.vue?vue&type=template&id=bc0ba164&lang.js","../../src/components/va-input/VaMessageList/index.ts","../../src/components/va-input/VaInputWrapper/VaInputWrapper.vue","../../src/components/va-input/VaInputWrapper/VaInputWrapper.vue?vue&type=template&id=487d7fd8&lang.js","../../src/components/va-input/VaInputWrapper/index.ts"],"sourcesContent":["import { isString, isFunction, flatten } from 'lodash-es'\r\nimport { inject } from 'vue'\r\nimport { mixins, Options, prop, Vue, setup } from 'vue-class-component'\r\n\r\nimport { FormProvider, FormServiceKey } from '../../components/va-form/consts'\r\n\r\nconst prepareValidations = (messages: string | any[] = [], callArguments = null) => {\r\n  if (isString(messages)) {\r\n    messages = [messages]\r\n  }\r\n  return messages\r\n    .map((message: any) => isFunction(message) ? message(callArguments) : message)\r\n}\r\n\r\nclass Props {\r\n  rules = prop<any[]>({ type: Array, default: () => [] })\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  readonly = prop<boolean>({ type: Boolean, default: false })\r\n  success = prop<boolean>({ type: Boolean, default: false })\r\n  messages = prop<any[]>({ type: Array, default: () => [] })\r\n  error = prop<boolean>({ type: Boolean, default: false })\r\n  errorMessages = prop<any[] | string>({ type: [Array, String] })\r\n  errorCount = prop<string | number>({ type: Number, default: 1 })\r\n  id = prop<string | number>({\r\n    type: [String, Number],\r\n    default: undefined,\r\n  })\r\n\r\n  name = prop<string | number>({\r\n    type: [String, Number],\r\n    default: undefined,\r\n  })\r\n\r\n  modelValue = prop({\r\n    validator: () => {\r\n      throw new Error('ValidateMixin: `modelValue` prop should be defined in component.')\r\n    },\r\n  })\r\n}\r\n\r\nconst PropsMixin = Vue.with(Props)\r\n\r\n@Options({})\r\nexport class FormComponentMixin extends mixins(\r\n  PropsMixin,\r\n) {\r\n  hadFocus = false\r\n  isFocused = false\r\n  internalErrorMessages: any[] = []\r\n  internalError = false\r\n  isFormComponent = true\r\n\r\n  // beforeMount () {\r\n  //   console.log('im here', )\r\n  //   // That's just a flag for form to figure out whether component is form component.\r\n  //   this.isFormComponent = true\r\n  // }\r\n\r\n  // @Watch('rules', { deep: true })\r\n  // onRulesChanged (newVal: any, oldVal: any) {\r\n  //   // We want this check, because rules are passed as function,\r\n  //   // and, therefore, are recalculated on pretty much every change.\r\n  //   if (deepEqual(newVal, oldVal)) {\r\n  //     return\r\n  //   }\r\n  //   this.validate()\r\n  // }\r\n\r\n  // @Watch('isFocused')\r\n  // onIsFocusedChanged (isFocused: boolean) {\r\n  //   if (isFocused) {\r\n  //     this.hadFocus = true\r\n  //   }\r\n  // }\r\n\r\n  formProvider = setup(() => {\r\n    const formProvider: FormProvider | undefined = inject(FormServiceKey, undefined)\r\n\r\n    return {\r\n      ...formProvider,\r\n    }\r\n  })\r\n\r\n  mounted () {\r\n    if (Object.keys(this.formProvider).length) {\r\n      (this.formProvider as FormProvider).onChildMounted(this)\r\n    }\r\n  }\r\n\r\n  unmounted () {\r\n    if (Object.keys(this.formProvider).length) {\r\n      (this.formProvider as FormProvider).onChildUnmounted(this)\r\n    }\r\n  }\r\n\r\n  /** @public */\r\n  validate (): any {\r\n    this.computedError = false\r\n    this.computedErrorMessages = []\r\n\r\n    if (this.rules && this.rules.length > 0) {\r\n      prepareValidations(flatten(this.rules), this.modelValue as any)\r\n        .forEach((validateResult: any) => {\r\n          if (isString(validateResult)) {\r\n            this.computedErrorMessages.push(validateResult)\r\n            this.computedError = true\r\n          } else if (validateResult === false) {\r\n            this.computedError = true\r\n          }\r\n        })\r\n    }\r\n\r\n    return !this.computedError\r\n  }\r\n\r\n  /** @public */\r\n  focus (): void {\r\n    throw new Error('focus method should be implemented in component')\r\n  }\r\n\r\n  /** @public */\r\n  reset (): void {\r\n    throw new Error('reset method should be implemented in component')\r\n  }\r\n\r\n  resetValidation (): void {\r\n    this.computedErrorMessages = []\r\n    this.computedError = false\r\n  }\r\n\r\n  hasError (): any {\r\n    return this.computedError\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  ValidateMixin_onBlur (): void {\r\n    this.isFocused = false\r\n    this.computedError = false\r\n    this.validate()\r\n  }\r\n\r\n  get shouldValidateOnBlur () {\r\n    // We want for inputs to validate on blur only after they've been interacted with.\r\n    return this.hadFocus\r\n  }\r\n\r\n  get computedError () {\r\n    return this.error || this.internalError\r\n  }\r\n\r\n  set computedError (errorMessage) {\r\n    this.internalError = errorMessage\r\n  }\r\n\r\n  get computedErrorMessages () {\r\n    return this.errorMessages ? prepareValidations(this.errorMessages) : this.internalErrorMessages\r\n  }\r\n\r\n  set computedErrorMessages (errorMessages) {\r\n    this.internalErrorMessages = errorMessages\r\n  }\r\n}\r\n","<template>\r\n  <div\r\n    v-if=\"messages.length\"\r\n    class=\"va-message-list\"\r\n    :style=\"computedStyle\"\r\n  >\r\n    <div\r\n      v-for=\"(message, index) in messages\"\r\n      :key=\"index\"\r\n      class=\"va-message-list__message\"\r\n    >\r\n      {{ message }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\n\r\nclass MessagesListProps {\r\n  value = prop<string | number | Record<string, unknown> | any[]>({ type: [String, Number, Object, Array], default: '' })\r\n  limit = prop<number>({ type: Number, default: 1 })\r\n  color = prop<string>({ type: String, default: 'gray' })\r\n}\r\n\r\nconst MessagesListPropsMixin = Vue.with(MessagesListProps)\r\n\r\n@Options({\r\n  name: 'VaMessageList',\r\n})\r\nexport default class VaMessageList extends mixins(\r\n  ColorMixin,\r\n  MessagesListPropsMixin,\r\n) {\r\n  get messages () {\r\n    if (!this.value) { return [] }\r\n    if (!Array.isArray(this.value)) { return [this.value] }\r\n\r\n    return this.value.slice(0, this.limit)\r\n  }\r\n\r\n  get computedStyle () {\r\n    return { color: this.colorComputed }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n\r\n.va-message-list {\r\n  &__message {\r\n    vertical-align: middle;\r\n    font-size: $font-size-mini;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    v-if=\"messages.length\"\r\n    class=\"va-message-list\"\r\n    :style=\"computedStyle\"\r\n  >\r\n    <div\r\n      v-for=\"(message, index) in messages\"\r\n      :key=\"index\"\r\n      class=\"va-message-list__message\"\r\n    >\r\n      {{ message }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\n\r\nclass MessagesListProps {\r\n  value = prop<string | number | Record<string, unknown> | any[]>({ type: [String, Number, Object, Array], default: '' })\r\n  limit = prop<number>({ type: Number, default: 1 })\r\n  color = prop<string>({ type: String, default: 'gray' })\r\n}\r\n\r\nconst MessagesListPropsMixin = Vue.with(MessagesListProps)\r\n\r\n@Options({\r\n  name: 'VaMessageList',\r\n})\r\nexport default class VaMessageList extends mixins(\r\n  ColorMixin,\r\n  MessagesListPropsMixin,\r\n) {\r\n  get messages () {\r\n    if (!this.value) { return [] }\r\n    if (!Array.isArray(this.value)) { return [this.value] }\r\n\r\n    return this.value.slice(0, this.limit)\r\n  }\r\n\r\n  get computedStyle () {\r\n    return { color: this.colorComputed }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n\r\n.va-message-list {\r\n  &__message {\r\n    vertical-align: middle;\r\n    font-size: $font-size-mini;\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaMessageList from './VaMessageList.vue'\r\n\r\nexport default withConfigTransport(VaMessageList)\r\n","<template>\r\n  <div class=\"va-input-wrapper\">\r\n    <div\r\n      v-if=\"$slots.prepend\"\r\n      class=\"va-input-wrapper__prepend-inner\"\r\n      @click=\"$emit('click:prepend')\"\r\n    >\r\n      <slot name=\"prepend\" />\r\n    </div>\r\n\r\n    <div class=\"va-input-wrapper__content\">\r\n      <slot />\r\n\r\n      <div class=\"va-input-wrapper__message-list-wrapper\">\r\n        <va-message-list\r\n          :color=\"messagesColor\"\r\n          :value=\"messagesComputed\"\r\n          :limit=\"errorLimit\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"$slots.append\"\r\n      class=\"va-input-wrapper__append-inner\"\r\n      @click=\"$emit('click:append')\"\r\n    >\r\n      <slot name=\"append\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, Vue, prop } from 'vue-class-component'\r\n\r\nimport VaMessageList from '../VaMessageList'\r\n\r\nclass Props {\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  error = prop<boolean>({ type: Boolean, default: false })\r\n  success = prop<boolean>({ type: Boolean, default: false })\r\n  messages = prop<any[]>({ type: Array, default: () => [] })\r\n  errorMessages = prop<any[]>({ type: Array, default: () => [] })\r\n  errorCount = prop<number>({ type: Number, default: 1 })\r\n}\r\n\r\n@Options({\r\n  name: 'VaInputWrapper',\r\n  components: { VaMessageList },\r\n})\r\nexport default class VaInputWrapper extends Vue.with(Props) {\r\n  get messagesComputed () {\r\n    return this.error ? this.errorMessages : this.messages\r\n  }\r\n\r\n  get messagesColor () {\r\n    if (this.error) {\r\n      return 'danger'\r\n    }\r\n\r\n    if (this.success) {\r\n      return 'success'\r\n    }\r\n  }\r\n\r\n  get errorLimit () {\r\n    return this.error ? this.errorCount : 99\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n@import '../../../styles/resources/resources';\r\n\r\n.va-input-wrapper {\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  text-align: left;\r\n\r\n  &__content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  &__prepend-inner,\r\n  &__append-inner {\r\n    display: inline-flex;\r\n    align-items: center;\r\n  }\r\n\r\n  &__prepend-inner {\r\n    margin-right: 0.5rem;\r\n  }\r\n\r\n  &__append-inner {\r\n    margin-left: 0.5rem;\r\n  }\r\n\r\n  &__message-list-wrapper {\r\n    padding: 0 0.5rem;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"va-input-wrapper\">\r\n    <div\r\n      v-if=\"$slots.prepend\"\r\n      class=\"va-input-wrapper__prepend-inner\"\r\n      @click=\"$emit('click:prepend')\"\r\n    >\r\n      <slot name=\"prepend\" />\r\n    </div>\r\n\r\n    <div class=\"va-input-wrapper__content\">\r\n      <slot />\r\n\r\n      <div class=\"va-input-wrapper__message-list-wrapper\">\r\n        <va-message-list\r\n          :color=\"messagesColor\"\r\n          :value=\"messagesComputed\"\r\n          :limit=\"errorLimit\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"$slots.append\"\r\n      class=\"va-input-wrapper__append-inner\"\r\n      @click=\"$emit('click:append')\"\r\n    >\r\n      <slot name=\"append\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Options, Vue, prop } from 'vue-class-component'\r\n\r\nimport VaMessageList from '../VaMessageList'\r\n\r\nclass Props {\r\n  disabled = prop<boolean>({ type: Boolean, default: false })\r\n  error = prop<boolean>({ type: Boolean, default: false })\r\n  success = prop<boolean>({ type: Boolean, default: false })\r\n  messages = prop<any[]>({ type: Array, default: () => [] })\r\n  errorMessages = prop<any[]>({ type: Array, default: () => [] })\r\n  errorCount = prop<number>({ type: Number, default: 1 })\r\n}\r\n\r\n@Options({\r\n  name: 'VaInputWrapper',\r\n  components: { VaMessageList },\r\n})\r\nexport default class VaInputWrapper extends Vue.with(Props) {\r\n  get messagesComputed () {\r\n    return this.error ? this.errorMessages : this.messages\r\n  }\r\n\r\n  get messagesColor () {\r\n    if (this.error) {\r\n      return 'danger'\r\n    }\r\n\r\n    if (this.success) {\r\n      return 'success'\r\n    }\r\n  }\r\n\r\n  get errorLimit () {\r\n    return this.error ? this.errorCount : 99\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n@import '../../../styles/resources/resources';\r\n\r\n.va-input-wrapper {\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  text-align: left;\r\n\r\n  &__content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  &__prepend-inner,\r\n  &__append-inner {\r\n    display: inline-flex;\r\n    align-items: center;\r\n  }\r\n\r\n  &__prepend-inner {\r\n    margin-right: 0.5rem;\r\n  }\r\n\r\n  &__append-inner {\r\n    margin-left: 0.5rem;\r\n  }\r\n\r\n  &__message-list-wrapper {\r\n    padding: 0 0.5rem;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaInputWrapper from './VaInputWrapper.vue'\r\n\r\nexport default withConfigTransport(VaInputWrapper)\r\n"],"names":["prepareValidations","messages","callArguments","isString","map","message","isFunction","PropsMixin","Vue","with","Props","constructor","this","prop","type","Array","default","Boolean","String","Number","undefined","validator","Error","FormComponentMixin","mixins","setup","inject","FormServiceKey","mounted","Object","keys","formProvider","length","onChildMounted","unmounted","onChildUnmounted","validate","computedError","computedErrorMessages","rules","flatten","modelValue","forEach","validateResult","push","focus","reset","resetValidation","hasError","ValidateMixin_onBlur","isFocused","shouldValidateOnBlur","hadFocus","error","internalError","errorMessage","errorMessages","internalErrorMessages","Options","MessagesListPropsMixin","MessagesListProps","VaMessageList","ColorMixin","value","isArray","slice","limit","computedStyle","color","colorComputed","name","_ctx","_mergeProps","class","style","index","withConfigTransport","VaInputWrapper","messagesComputed","messagesColor","success","errorLimit","errorCount","components","prepend","append"],"mappings":"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"}