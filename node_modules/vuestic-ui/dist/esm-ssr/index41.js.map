{"version":3,"file":"index41.js","sources":["../../src/composables/useSelectableList.ts","../../../../node_modules/lodash/_root.js","../../../../node_modules/lodash/_freeGlobal.js","../../../../node_modules/lodash/_Symbol.js","../../../../node_modules/lodash/_getRawTag.js","../../../../node_modules/lodash/_objectToString.js","../../../../node_modules/lodash/_baseGetTag.js","../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/isObjectLike.js","../../../../node_modules/lodash/isString.js","../../../../node_modules/lodash/isFunction.js","../../../../node_modules/lodash/isObject.js","../../../../node_modules/lodash/_arrayPush.js","../../../../node_modules/lodash/_baseIsArguments.js","../../../../node_modules/lodash/isArguments.js","../../../../node_modules/lodash/_isFlattenable.js","../../../../node_modules/lodash/_baseFlatten.js","../../../../node_modules/lodash/flatten.js","../../src/composables/useFormComponent.ts","../../src/composables/useLoading.ts","../../src/composables/useMaxSelections.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue?vue&type=template&id=59030744&lang.js","../../src/components/va-select/VaSelectOptionList/index.ts","../../src/components/va-select/VaSelect.vue","../../src/composables/useColor.ts","../../src/components/va-select/VaSelect.vue?vue&type=template&id=ef3afb70&lang.js","../../src/components/va-select/index.ts"],"sourcesContent":["// It's another implementation of SelectableListMixin functionality but for Composition API usage\r\n\r\nimport { getProp } from '../services/utils'\r\nimport { PropType } from 'vue'\r\n\r\ntype StringOrFunction = string | Function\r\n\r\nexport const useSelectableListProps = {\r\n  options: { type: Array as PropType<any[]>, default: () => [] },\r\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\r\n  valueBy: { type: [String, Function] as PropType<StringOrFunction> },\r\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\r\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\r\n}\r\n\r\nexport function useSelectableList (props: any) {\r\n  const isSelectableListComponent = true\r\n\r\n  const getValue = (option: any) => {\r\n    if (!props.valueBy) { return option }\r\n\r\n    return typeof option === 'string'\r\n      ? option\r\n      : getProp(option, props.valueBy)\r\n  }\r\n\r\n  const getOptionByValue = (value: any) => {\r\n    if (!props.valueBy) { return value }\r\n\r\n    return props.options.find((option: any) => value === getValue(option)) || value\r\n  }\r\n\r\n  const getText = (option: any) => {\r\n    return typeof option === 'string'\r\n      ? option\r\n      : getProp(option, props.textBy)\r\n  }\r\n\r\n  const getDisabled = (option: any) => {\r\n    return typeof option !== 'string' && getProp(option, props.disabledBy)\r\n  }\r\n\r\n  const getTrackBy = (option: any) => {\r\n    return typeof option === 'string'\r\n      ? option\r\n      : getProp(option, props.trackBy)\r\n  }\r\n\r\n  return {\r\n    isSelectableListComponent,\r\n    getValue,\r\n    getOptionByValue,\r\n    getText,\r\n    getDisabled,\r\n    getTrackBy,\r\n  }\r\n}\r\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var baseFlatten = require('./_baseFlatten');\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n","import isString from 'lodash/isString'\r\nimport isFunction from 'lodash/isFunction'\r\nimport flatten from 'lodash/flatten'\r\nimport { computed, inject, onMounted, onUnmounted, PropType, ref } from 'vue'\r\nimport { FormProvider, FormServiceKey } from '../components/va-form/consts'\r\n\r\n/**\r\n * You could add these props to any component by destructuring them inside props option.\r\n * @example\r\n * props: { ...useFormComponentProps, componentsOwnProp, etc. }\r\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\r\n */\r\nexport const useFormComponentProps = {\r\n  rules: { type: Array as PropType<any[]>, default: () => [] },\r\n  disabled: { type: Boolean as PropType<boolean>, default: false },\r\n  readonly: { type: Boolean as PropType<boolean>, default: false },\r\n  success: { type: Boolean as PropType<boolean>, default: false },\r\n  messages: { type: Array as PropType<any[]>, default: () => [] },\r\n  error: { type: Boolean as PropType<boolean>, default: false },\r\n  errorMessages: { type: [Array, String] as PropType<any[] | string> },\r\n  errorCount: { type: Number as PropType<string | number>, default: 1 },\r\n  id: { type: [String, Number] as PropType<string | number>, default: undefined },\r\n  name: { type: [String, Number] as PropType<string | number>, default: undefined },\r\n\r\n  modelValue: {\r\n    default: undefined,\r\n    validator: () => {\r\n      throw new Error('ValidateMixin: `modelValue` prop should be defined in component.')\r\n    },\r\n  },\r\n}\r\n\r\nconst prepareValidations = (messages: string | any[] = [], callArguments = null) => {\r\n  if (isString(messages)) {\r\n    messages = [messages]\r\n  }\r\n  return messages\r\n    .map((message: any) => isFunction(message) ? message(callArguments) : message)\r\n}\r\n\r\nexport function useFormComponent (props: Record<string, any>, context: any) {\r\n  const hadFocus = ref(false)\r\n  const isFocused = ref(false)\r\n  const internalErrorMessages = ref([] as any[])\r\n  const internalError = ref(false)\r\n  const isFormComponent = ref(true)\r\n  const formProvider: FormProvider | undefined = inject(FormServiceKey, undefined)\r\n\r\n  onMounted(() => {\r\n    if (formProvider?.onChildMounted) {\r\n      formProvider.onChildMounted(context)\r\n    }\r\n  })\r\n\r\n  onUnmounted(() => {\r\n    if (formProvider?.onChildUnmounted) {\r\n      formProvider.onChildUnmounted(context)\r\n    }\r\n  })\r\n\r\n  /** @public */\r\n  const validate = () => {\r\n    computedError.value = false\r\n    computedErrorMessages.value = []\r\n\r\n    if (props.rules && props.rules.length > 0) {\r\n      prepareValidations(flatten(props.rules), props.modelValue as any)\r\n        .forEach((validateResult: any) => {\r\n          if (isString(validateResult)) {\r\n            computedErrorMessages.value.push(validateResult)\r\n            computedError.value = true\r\n          } else if (validateResult === false) {\r\n            computedError.value = true\r\n          }\r\n        })\r\n    }\r\n\r\n    return !computedError.value\r\n  }\r\n\r\n  /** @public */\r\n  const focus = (): void => {\r\n    throw new Error('focus method should be implemented in the component')\r\n  }\r\n\r\n  /** @public */\r\n  const reset = (): void => {\r\n    throw new Error('reset method should be implemented in the component')\r\n  }\r\n\r\n  const resetValidation = (): void => {\r\n    computedErrorMessages.value = []\r\n    computedError.value = false\r\n  }\r\n\r\n  const hasError = (): any => {\r\n    return computedError.value\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  const ValidateMixin_onBlur = (): void => {\r\n    isFocused.value = false\r\n    computedError.value = false\r\n    validate()\r\n  }\r\n\r\n  const shouldValidateOnBlur = computed(() => {\r\n    // We want for inputs to validate on blur only after they've been interacted with.\r\n    return hadFocus.value\r\n  })\r\n\r\n  const computedError = computed({\r\n    get () {\r\n      return props.error || internalError.value\r\n    },\r\n    set (errorMessage: boolean) {\r\n      internalError.value = errorMessage\r\n    },\r\n  })\r\n\r\n  const computedErrorMessages = computed({\r\n    get () {\r\n      return props.errorMessages ? prepareValidations(props.errorMessages) : internalErrorMessages.value\r\n    },\r\n    set (errorMessages: any[]) {\r\n      internalErrorMessages.value = errorMessages\r\n    },\r\n  })\r\n\r\n  return {\r\n    isFocused,\r\n    isFormComponent,\r\n    formProvider,\r\n    validate,\r\n    ValidateMixin_onBlur,\r\n    shouldValidateOnBlur,\r\n    focus,\r\n    reset,\r\n    resetValidation,\r\n    hasError,\r\n    computedError,\r\n    computedErrorMessages,\r\n  }\r\n}\r\n","import { PropType } from 'vue'\r\n\r\n/**\r\n * You could add these props to any component by destructuring them inside props option.\r\n * @example\r\n * props: { ...useLoadingProps, componentsOwnProp, etc. }\r\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\r\n */\r\nexport const useLoadingProps = {\r\n  loading: { type: Boolean as PropType<boolean>, default: false },\r\n}\r\n\r\nexport const useLoading = () => {\r\n  const hasLoading = true\r\n\r\n  return {\r\n    hasLoading,\r\n  }\r\n}\r\n","import { PropType, Ref } from 'vue'\r\n\r\n/**\r\n * You could add these props to any component by destructuring them inside props option.\r\n * @example\r\n * props: { ...useMaxSelectionsProps, componentsOwnProp, etc. }\r\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\r\n */\r\nexport const useMaxSelectionsProps = {\r\n  maxSelections: {\r\n    type: Number as PropType<number>,\r\n    default: undefined,\r\n  },\r\n}\r\n\r\nexport function useMaxSelections (selections: Ref<any[]>, maxSelections: Ref<number | undefined>, emit: (event: 'update:modelValue', ...args: any[]) => void) {\r\n  const exceedsMaxSelections = (): boolean => {\r\n    if (maxSelections.value === undefined) { return false }\r\n    return selections.value.length >= maxSelections.value\r\n  }\r\n\r\n  const addOption = (optionToAdd: any): void => {\r\n    const newSelectedOptions = [...selections.value, optionToAdd]\r\n    emit('update:modelValue', newSelectedOptions)\r\n  }\r\n\r\n  return {\r\n    exceedsMaxSelections,\r\n    addOption,\r\n  }\r\n}\r\n","<template>\r\n  <div\r\n    class=\"va-select-option-list\"\r\n    ref=\"el\"\r\n    :tabindex=\"tabindex\"\r\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\r\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\r\n    @keydown.down.stop.prevent=\"hoverNextOption\"\r\n    @keydown.right.stop.prevent=\"hoverNextOption\"\r\n  >\r\n    <template v-if=\"filteredOptions.length\">\r\n      <div\r\n        v-for=\"option in filteredOptions\"\r\n        :key=\"$props.getTrackBy(option)\"\r\n        :ref=\"setItemRef($props.getTrackBy(option))\"\r\n        :class=\"getOptionClass(option)\"\r\n        :style=\"getOptionStyle(option)\"\r\n        @click.stop=\"selectOption(option)\"\r\n        @mouseover=\"updateHoveredOption(option)\"\r\n      >\r\n        <va-icon\r\n          v-if=\"option.icon\"\r\n          size=\"small\"\r\n          class=\"va-select-option-list__option--icon\"\r\n          :name=\"option.icon\"\r\n        />\r\n        <span>{{ getText(option) }}</span>\r\n        <va-icon\r\n          v-show=\"$props.getSelectedState(option)\"\r\n          class=\"va-select-option-list__option--selected-icon\"\r\n          size=\"small\"\r\n          name=\"done\"\r\n          :color=\"colorComputed\"\r\n        />\r\n      </div>\r\n    </template>\r\n    <div\r\n      v-else\r\n      class=\"va-select-option-list no-options\"\r\n    >\r\n      {{ noOptionsText }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { watch } from 'vue'\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nimport { getHoverColor } from '../../../services/color-config/color-functions'\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport VaIcon from '../../va-icon/'\r\n\r\nclass SelectOptionListProps {\r\n  options = prop<any[]>({ type: Array, default: () => [] })\r\n  noOptionsText = prop<string>({\r\n    type: String,\r\n    default: 'Items not found',\r\n  })\r\n\r\n  getSelectedState = prop<Function>({\r\n    type: Function,\r\n    default: () => false,\r\n  })\r\n\r\n  getText = prop<Function>({\r\n    type: Function,\r\n  })\r\n\r\n  getTrackBy = prop<Function>({\r\n    type: Function,\r\n  })\r\n\r\n  multiple = prop<boolean>({ type: Boolean, default: false })\r\n  search = prop<string>({ type: String, default: '' })\r\n\r\n  hoveredOption = prop<string | object>({\r\n    type: [String, Object],\r\n    default: null,\r\n  })\r\n\r\n  tabindex = prop<number>({ type: Number, default: 0 })\r\n}\r\n\r\nconst SelectOptionListPropsMixin = Vue.with(SelectOptionListProps)\r\n\r\n@Options({\r\n  name: 'VaSelectOptionList',\r\n  components: { VaIcon },\r\n  emits: [\r\n    'select-option',\r\n    'update:hoveredOption',\r\n    'no-previous-option-to-hover',\r\n  ],\r\n})\r\nexport default class VaSelectOptionList extends mixins(\r\n  ColorMixin,\r\n  SelectOptionListPropsMixin,\r\n) {\r\n  itemRefs: Record<number, any> = {}\r\n\r\n  created () {\r\n    watch(() => this.$props.hoveredOption, (newOption: any) => {\r\n      if (newOption) {\r\n        this.scrollToOption(newOption)\r\n      }\r\n    })\r\n  }\r\n\r\n  beforeUpdate () {\r\n    this.itemRefs = {}\r\n  }\r\n\r\n  setItemRef (option: number) {\r\n    return (el: any) => {\r\n      if (el) {\r\n        this.itemRefs[option] = el\r\n      }\r\n    }\r\n  }\r\n\r\n  get hoveredOptionComputed () {\r\n    return this.hoveredOption || null\r\n  }\r\n\r\n  set hoveredOptionComputed (value: any) {\r\n    this.$emit('update:hoveredOption', value)\r\n  }\r\n\r\n  get filteredOptions () {\r\n    if (!this.$props.search) {\r\n      return this.$props.options as []\r\n    }\r\n\r\n    return (this.$props.options as []).filter((option: string) => {\r\n      const optionText = (this.$props.getText as Function)(option).toUpperCase()\r\n      const search = (this.$props.search as string).toUpperCase()\r\n      return optionText.includes(search)\r\n    })\r\n  }\r\n\r\n  selectOption (option: any): void {\r\n    this.$emit('select-option', option)\r\n  }\r\n\r\n  getOptionClass (option: any) {\r\n    return {\r\n      'va-select-option-list__option': true,\r\n      'va-select-option-list__option--selected': (this.$props.getSelectedState as Function)(option),\r\n    }\r\n  }\r\n\r\n  getOptionStyle (option: any) {\r\n    return {\r\n      color: (this.$props.getSelectedState as Function)(option) ? this.colorComputed : 'inherit',\r\n      backgroundColor: this.isHovered(option) ? getHoverColor(this.colorComputed) : 'transparent',\r\n    }\r\n  }\r\n\r\n  isHovered (option: any) {\r\n    if (!this.hoveredOptionComputed) { return false }\r\n    if (typeof option === 'string') { return option === this.hoveredOptionComputed }\r\n    if (!this.getTrackBy) { return false }\r\n\r\n    return this.getTrackBy(this.hoveredOptionComputed) === this.getTrackBy(option)\r\n  }\r\n\r\n  updateHoveredOption (option: string[] | string): void {\r\n    if (option) {\r\n      this.hoveredOptionComputed = option\r\n    } else {\r\n      this.hoveredOptionComputed = null\r\n    }\r\n  }\r\n\r\n  public hoverPreviousOption () {\r\n    if (!this.hoveredOptionComputed) {\r\n      // Hover last option from list\r\n      this.filteredOptions.length && this.updateHoveredOption(this.filteredOptions[this.filteredOptions.length - 1])\r\n    } else {\r\n      const hoveredOptionIndex: any =\r\n        this.filteredOptions.findIndex((option: any) =>\r\n          (this.$props.getText as Function)(option) === (this.$props.getText as Function)(this.hoveredOptionComputed))\r\n      if (this.filteredOptions[hoveredOptionIndex - 1]) {\r\n        this.hoveredOptionComputed = this.filteredOptions[hoveredOptionIndex - 1]\r\n      } else {\r\n        this.$emit('no-previous-option-to-hover')\r\n      }\r\n    }\r\n  }\r\n\r\n  public hoverNextOption () {\r\n    if (!this.hoveredOptionComputed) {\r\n      // Hover first option from list\r\n      this.filteredOptions.length && this.updateHoveredOption(this.filteredOptions[0])\r\n    } else {\r\n      const hoveredOptionIndex: any =\r\n        this.filteredOptions.findIndex((option: any) =>\r\n          (this.$props.getText as Function)(option) === (this.$props.getText as Function)(this.hoveredOptionComputed))\r\n      if (this.filteredOptions[hoveredOptionIndex + 1]) {\r\n        this.hoveredOptionComputed = this.filteredOptions[hoveredOptionIndex + 1]\r\n      }\r\n    }\r\n  }\r\n\r\n  public hoverFirstOption () {\r\n    if (this.filteredOptions.length > 0) {\r\n      this.updateHoveredOption(this.filteredOptions[0])\r\n    }\r\n  }\r\n\r\n  scrollToOption (option: any) {\r\n    const optionElement: HTMLElement = this.itemRefs[(this.$props.getTrackBy as Function)(option)]\r\n    if (!optionElement) { return }\r\n\r\n    // Scroll list to hinted option position\r\n    optionElement.scrollIntoView({\r\n      behavior: 'auto',\r\n      block: 'nearest',\r\n      inline: 'nearest',\r\n    })\r\n  }\r\n\r\n  public focus () {\r\n    if (this.$refs.el) {\r\n      (this.$refs as any).el.focus()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-select-option-list {\r\n  display: var(--va-select-option-list-display);\r\n  flex-direction: var(--va-select-option-list-flex-direction);\r\n  width: var(--va-select-option-list-width);\r\n  list-style: var(--va-select-option-list-list-style);\r\n  max-height: 200px;\r\n\r\n  &__option {\r\n    cursor: var(--va-select-option-list-option-cursor);\r\n    display: var(--va-select-option-list-option-display);\r\n    align-items: var(--va-select-option-list-option-align-items);\r\n    padding: var(--va-select-option-list-option-padding);\r\n    min-height: var(--va-select-option-list-option-min-height);\r\n    word-break: var(--va-select-option-list-option-word-break);\r\n\r\n    &--icon {\r\n      margin-right: var(--va-select-option-list-icon-margin-right);\r\n    }\r\n\r\n    &--selected-icon {\r\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\r\n      font-size: var(--va-select-option-list-selected-icon-font-size);\r\n    }\r\n  }\r\n\r\n  &.no-options {\r\n    padding: 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"va-select-option-list\"\r\n    ref=\"el\"\r\n    :tabindex=\"tabindex\"\r\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\r\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\r\n    @keydown.down.stop.prevent=\"hoverNextOption\"\r\n    @keydown.right.stop.prevent=\"hoverNextOption\"\r\n  >\r\n    <template v-if=\"filteredOptions.length\">\r\n      <div\r\n        v-for=\"option in filteredOptions\"\r\n        :key=\"$props.getTrackBy(option)\"\r\n        :ref=\"setItemRef($props.getTrackBy(option))\"\r\n        :class=\"getOptionClass(option)\"\r\n        :style=\"getOptionStyle(option)\"\r\n        @click.stop=\"selectOption(option)\"\r\n        @mouseover=\"updateHoveredOption(option)\"\r\n      >\r\n        <va-icon\r\n          v-if=\"option.icon\"\r\n          size=\"small\"\r\n          class=\"va-select-option-list__option--icon\"\r\n          :name=\"option.icon\"\r\n        />\r\n        <span>{{ getText(option) }}</span>\r\n        <va-icon\r\n          v-show=\"$props.getSelectedState(option)\"\r\n          class=\"va-select-option-list__option--selected-icon\"\r\n          size=\"small\"\r\n          name=\"done\"\r\n          :color=\"colorComputed\"\r\n        />\r\n      </div>\r\n    </template>\r\n    <div\r\n      v-else\r\n      class=\"va-select-option-list no-options\"\r\n    >\r\n      {{ noOptionsText }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { watch } from 'vue'\r\nimport { Options, prop, Vue, mixins } from 'vue-class-component'\r\n\r\nimport { getHoverColor } from '../../../services/color-config/color-functions'\r\nimport ColorMixin from '../../../services/color-config/ColorMixin'\r\nimport VaIcon from '../../va-icon/'\r\n\r\nclass SelectOptionListProps {\r\n  options = prop<any[]>({ type: Array, default: () => [] })\r\n  noOptionsText = prop<string>({\r\n    type: String,\r\n    default: 'Items not found',\r\n  })\r\n\r\n  getSelectedState = prop<Function>({\r\n    type: Function,\r\n    default: () => false,\r\n  })\r\n\r\n  getText = prop<Function>({\r\n    type: Function,\r\n  })\r\n\r\n  getTrackBy = prop<Function>({\r\n    type: Function,\r\n  })\r\n\r\n  multiple = prop<boolean>({ type: Boolean, default: false })\r\n  search = prop<string>({ type: String, default: '' })\r\n\r\n  hoveredOption = prop<string | object>({\r\n    type: [String, Object],\r\n    default: null,\r\n  })\r\n\r\n  tabindex = prop<number>({ type: Number, default: 0 })\r\n}\r\n\r\nconst SelectOptionListPropsMixin = Vue.with(SelectOptionListProps)\r\n\r\n@Options({\r\n  name: 'VaSelectOptionList',\r\n  components: { VaIcon },\r\n  emits: [\r\n    'select-option',\r\n    'update:hoveredOption',\r\n    'no-previous-option-to-hover',\r\n  ],\r\n})\r\nexport default class VaSelectOptionList extends mixins(\r\n  ColorMixin,\r\n  SelectOptionListPropsMixin,\r\n) {\r\n  itemRefs: Record<number, any> = {}\r\n\r\n  created () {\r\n    watch(() => this.$props.hoveredOption, (newOption: any) => {\r\n      if (newOption) {\r\n        this.scrollToOption(newOption)\r\n      }\r\n    })\r\n  }\r\n\r\n  beforeUpdate () {\r\n    this.itemRefs = {}\r\n  }\r\n\r\n  setItemRef (option: number) {\r\n    return (el: any) => {\r\n      if (el) {\r\n        this.itemRefs[option] = el\r\n      }\r\n    }\r\n  }\r\n\r\n  get hoveredOptionComputed () {\r\n    return this.hoveredOption || null\r\n  }\r\n\r\n  set hoveredOptionComputed (value: any) {\r\n    this.$emit('update:hoveredOption', value)\r\n  }\r\n\r\n  get filteredOptions () {\r\n    if (!this.$props.search) {\r\n      return this.$props.options as []\r\n    }\r\n\r\n    return (this.$props.options as []).filter((option: string) => {\r\n      const optionText = (this.$props.getText as Function)(option).toUpperCase()\r\n      const search = (this.$props.search as string).toUpperCase()\r\n      return optionText.includes(search)\r\n    })\r\n  }\r\n\r\n  selectOption (option: any): void {\r\n    this.$emit('select-option', option)\r\n  }\r\n\r\n  getOptionClass (option: any) {\r\n    return {\r\n      'va-select-option-list__option': true,\r\n      'va-select-option-list__option--selected': (this.$props.getSelectedState as Function)(option),\r\n    }\r\n  }\r\n\r\n  getOptionStyle (option: any) {\r\n    return {\r\n      color: (this.$props.getSelectedState as Function)(option) ? this.colorComputed : 'inherit',\r\n      backgroundColor: this.isHovered(option) ? getHoverColor(this.colorComputed) : 'transparent',\r\n    }\r\n  }\r\n\r\n  isHovered (option: any) {\r\n    if (!this.hoveredOptionComputed) { return false }\r\n    if (typeof option === 'string') { return option === this.hoveredOptionComputed }\r\n    if (!this.getTrackBy) { return false }\r\n\r\n    return this.getTrackBy(this.hoveredOptionComputed) === this.getTrackBy(option)\r\n  }\r\n\r\n  updateHoveredOption (option: string[] | string): void {\r\n    if (option) {\r\n      this.hoveredOptionComputed = option\r\n    } else {\r\n      this.hoveredOptionComputed = null\r\n    }\r\n  }\r\n\r\n  public hoverPreviousOption () {\r\n    if (!this.hoveredOptionComputed) {\r\n      // Hover last option from list\r\n      this.filteredOptions.length && this.updateHoveredOption(this.filteredOptions[this.filteredOptions.length - 1])\r\n    } else {\r\n      const hoveredOptionIndex: any =\r\n        this.filteredOptions.findIndex((option: any) =>\r\n          (this.$props.getText as Function)(option) === (this.$props.getText as Function)(this.hoveredOptionComputed))\r\n      if (this.filteredOptions[hoveredOptionIndex - 1]) {\r\n        this.hoveredOptionComputed = this.filteredOptions[hoveredOptionIndex - 1]\r\n      } else {\r\n        this.$emit('no-previous-option-to-hover')\r\n      }\r\n    }\r\n  }\r\n\r\n  public hoverNextOption () {\r\n    if (!this.hoveredOptionComputed) {\r\n      // Hover first option from list\r\n      this.filteredOptions.length && this.updateHoveredOption(this.filteredOptions[0])\r\n    } else {\r\n      const hoveredOptionIndex: any =\r\n        this.filteredOptions.findIndex((option: any) =>\r\n          (this.$props.getText as Function)(option) === (this.$props.getText as Function)(this.hoveredOptionComputed))\r\n      if (this.filteredOptions[hoveredOptionIndex + 1]) {\r\n        this.hoveredOptionComputed = this.filteredOptions[hoveredOptionIndex + 1]\r\n      }\r\n    }\r\n  }\r\n\r\n  public hoverFirstOption () {\r\n    if (this.filteredOptions.length > 0) {\r\n      this.updateHoveredOption(this.filteredOptions[0])\r\n    }\r\n  }\r\n\r\n  scrollToOption (option: any) {\r\n    const optionElement: HTMLElement = this.itemRefs[(this.$props.getTrackBy as Function)(option)]\r\n    if (!optionElement) { return }\r\n\r\n    // Scroll list to hinted option position\r\n    optionElement.scrollIntoView({\r\n      behavior: 'auto',\r\n      block: 'nearest',\r\n      inline: 'nearest',\r\n    })\r\n  }\r\n\r\n  public focus () {\r\n    if (this.$refs.el) {\r\n      (this.$refs as any).el.focus()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-select-option-list {\r\n  display: var(--va-select-option-list-display);\r\n  flex-direction: var(--va-select-option-list-flex-direction);\r\n  width: var(--va-select-option-list-width);\r\n  list-style: var(--va-select-option-list-list-style);\r\n  max-height: 200px;\r\n\r\n  &__option {\r\n    cursor: var(--va-select-option-list-option-cursor);\r\n    display: var(--va-select-option-list-option-display);\r\n    align-items: var(--va-select-option-list-option-align-items);\r\n    padding: var(--va-select-option-list-option-padding);\r\n    min-height: var(--va-select-option-list-option-min-height);\r\n    word-break: var(--va-select-option-list-option-word-break);\r\n\r\n    &--icon {\r\n      margin-right: var(--va-select-option-list-icon-margin-right);\r\n    }\r\n\r\n    &--selected-icon {\r\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\r\n      font-size: var(--va-select-option-list-selected-icon-font-size);\r\n    }\r\n  }\r\n\r\n  &.no-options {\r\n    padding: 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\r\nimport VaSelectOptionList from './VaSelectOptionList.vue'\r\n\r\nexport default withConfigTransport(VaSelectOptionList)\r\n","<template>\r\n  <va-input-wrapper\r\n    :success=\"$props.success\"\r\n    :messages=\"$props.messages\"\r\n    :error=\"$props.error\"\r\n    :error-messages=\"computedErrorMessages\"\r\n    :style=\"{ width: $props.width }\"\r\n  >\r\n    <va-dropdown\r\n      ref=\"dropdown\"\r\n      v-model=\"showDropdownContentComputed\"\r\n      :position=\"$props.position\"\r\n      :disabled=\"$props.disabled\"\r\n      :max-height=\"$props.maxHeight\"\r\n      :fixed=\"$props.fixed\"\r\n      :close-on-content-click=\"closeOnContentClick\"\r\n      trigger=\"none\"\r\n      class=\"va-select__dropdown\"\r\n      keep-anchor-width\r\n      boundary-body\r\n      :stateful=false\r\n    >\r\n      <template #anchor>\r\n        <div\r\n          class=\"va-select\"\r\n          ref=\"select\"\r\n          :tabindex=\"tabIndexComputed\"\r\n          @focus=\"focus\"\r\n          @blur=\"blur\"\r\n          @keydown.enter.stop.prevent=\"onSelectClick()\"\r\n          @keydown.space.stop.prevent=\"onSelectClick()\"\r\n          @click.prevent=\"onSelectClick()\"\r\n        >\r\n          <!-- We show messages outside of dropdown to draw dropdown content under the input -->\r\n          <va-input\r\n            :model-value=\"valueComputedString\"\r\n            :success=\"$props.success\"\r\n            :error=\"computedError\"\r\n            :clearable=\"showClearIcon\"\r\n            :clearableIcon=\"$props.clearableIcon\"\r\n            :color=\"$props.color\"\r\n            :label=\"$props.label\"\r\n            :placeholder=\"$props.placeholder\"\r\n            :loading=\"$props.loading\"\r\n            :disabled=\"$props.disabled\"\r\n            :outline=\"$props.outline\"\r\n            :bordered=\"$props.bordered\"\r\n            :focused=\"isFocusedComputed\"\r\n            :tabindex=\"-1\"\r\n            readonly\r\n            @cleared=\"reset\"\r\n          >\r\n            <template\r\n              v-if=\"$slots.prepend\"\r\n              #prepend\r\n            >\r\n              <slot name=\"prepend\" />\r\n            </template>\r\n\r\n            <template\r\n              v-if=\"$slots.append\"\r\n              #append\r\n            >\r\n              <slot name=\"append\" />\r\n            </template>\r\n\r\n            <template\r\n              v-if=\"$slots.prependInner\"\r\n              #prependInner\r\n            >\r\n              <slot name=\"prependInner\" />\r\n            </template>\r\n\r\n            <template #appendInner>\r\n              <div class=\"va-input__append\">\r\n                <slot\r\n                  v-if=\"$slots.appendInner\"\r\n                  name=\"appendInner\"\r\n                />\r\n                <va-icon\r\n                  :color=\"colorComputed\"\r\n                  :name=\"toggleIcon\"\r\n                />\r\n              </div>\r\n            </template>\r\n\r\n            <template v-if=\"$slots.content\" #content=\"{ value, focus }\">\r\n              <slot name=\"content\" v-bind=\"{ valueString: value, focus, value: valueComputed }\" />\r\n            </template>\r\n          </va-input>\r\n        </div>\r\n      </template>\r\n\r\n      <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\r\n      <va-dropdown-content\r\n        @keyup.enter.stop\r\n        @keydown.esc.prevent=\"hideAndFocus\"\r\n        @keydown.tab=\"hideDropdown\"\r\n      >\r\n        <va-input\r\n          v-if=\"showSearchInput\"\r\n          :id=\"$props.id\"\r\n          ref=\"searchBar\"\r\n          v-model=\"searchInput\"\r\n          class=\"va-select__input\"\r\n          placeholder=\"Search\"\r\n          removable\r\n          :name=\"$props.name\"\r\n          :tabindex=\"tabindex + 1\"\r\n          :bordered=\"true\"\r\n          @keydown.up.stop.prevent=\"hoverPreviousOption()\"\r\n          @keydown.left.stop.prevent=\"hoverPreviousOption()\"\r\n          @keydown.down.stop.prevent=\"hoverNextOption()\"\r\n          @keydown.right.stop.prevent=\"hoverNextOption()\"\r\n          @keydown.enter.prevent=\"selectOrAddOption()\"\r\n          @focus=\"hoveredOption = null\"\r\n        />\r\n        <div class=\"va-select__dropdown__content\">\r\n          <va-select-option-list\r\n            ref=\"optionList\"\r\n            v-model:hoveredOption=\"hoveredOption\"\r\n            :style=\"{ maxHeight: $props.maxHeight }\"\r\n            :options=\"filteredOptions\"\r\n            :selected-value=\"valueComputed\"\r\n            :get-selected-state=\"checkIsOptionSelected\"\r\n            :get-text=\"getText\"\r\n            :get-track-by=\"getTrackBy\"\r\n            :search=\"searchInput\"\r\n            :no-options-text=\"$props.noOptionsText\"\r\n            :color=\"$props.color\"\r\n            :tabindex=\"tabindex + 1\"\r\n            @select-option=\"selectOption\"\r\n            @no-previous-option-to-hover=\"focusSearchBar()\"\r\n            @keydown.enter.stop.prevent=\"selectHoveredOption()\"\r\n            @keydown.space.stop.prevent=\"selectHoveredOption()\"\r\n            @keydown=\"onHintedSearch\"\r\n          />\r\n        </div>\r\n      </va-dropdown-content>\r\n    </va-dropdown>\r\n  </va-input-wrapper>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType, ref, computed, watch, nextTick } from 'vue'\r\n\r\nimport { useSelectableList, useSelectableListProps } from '../../composables/useSelectableList'\r\nimport { useFormComponent, useFormComponentProps } from '../../composables/useFormComponent'\r\nimport { useLoadingProps } from '../../composables/useLoading'\r\nimport { useColor } from '../../composables/useColor'\r\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\r\n\r\nimport { warn } from '../../services/utils'\r\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\r\nimport VaIcon from '../va-icon'\r\nimport VaInput, { VaInputWrapper } from '../va-input'\r\n\r\nimport VaSelectOptionList from './VaSelectOptionList'\r\n\r\ntype DropdownIcon = {\r\n  open: string,\r\n  close: string\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaSelect',\r\n  components: {\r\n    VaSelectOptionList,\r\n    VaIcon,\r\n    VaDropdown,\r\n    VaDropdownContent,\r\n    VaInput,\r\n    VaInputWrapper,\r\n  },\r\n  emits: ['update-search', 'update:modelValue', 'clear'],\r\n  props: {\r\n    ...useSelectableListProps,\r\n    ...useFormComponentProps,\r\n    ...useLoadingProps,\r\n    ...useMaxSelectionsProps,\r\n\r\n    modelValue: {\r\n      type: [String, Number, Object, Array] as PropType<string | number | Record<string, any> | any[]>,\r\n      default: '',\r\n    },\r\n\r\n    // Dropdown position\r\n    position: {\r\n      type: String as PropType<string>,\r\n      default: 'bottom',\r\n      validator: (position: string) => ['top', 'bottom'].includes(position),\r\n    },\r\n\r\n    allowCreate: {\r\n      type: [Boolean, String] as PropType<boolean | string>,\r\n      default: false,\r\n      validator: (mode: string | boolean) => {\r\n        return [true, false, 'unique'].includes(mode)\r\n      },\r\n    },\r\n\r\n    color: { type: String as PropType<string>, default: 'primary' },\r\n    multiple: { type: Boolean as PropType<boolean>, default: false },\r\n    searchable: { type: Boolean as PropType<boolean>, default: false },\r\n    disabled: { type: Boolean as PropType<boolean>, default: false },\r\n    readonly: { type: Boolean as PropType<boolean>, default: false }, // Probably unused prop! THIS WAS UNUSED! USE\r\n    separator: { type: String as PropType<string>, default: ', ' },\r\n    width: { type: String as PropType<string>, default: '100%' },\r\n    maxHeight: { type: String as PropType<string>, default: '128px' },\r\n    clearValue: { type: String as PropType<string>, default: '' },\r\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\r\n    fixed: { type: Boolean as PropType<boolean>, default: true },\r\n    clearable: { type: Boolean as PropType<boolean>, default: false },\r\n    clearableIcon: { type: String as PropType<string>, default: 'highlight_off' },\r\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\r\n    tabindex: { type: Number as PropType<number>, default: 0 },\r\n    dropdownIcon: {\r\n      type: [String, Object] as PropType<string | DropdownIcon>,\r\n      default: (): DropdownIcon => ({\r\n        open: 'expand_more',\r\n        close: 'expand_less',\r\n      }),\r\n      validator: (value: any) => {\r\n        if (typeof value === 'string') { return true }\r\n\r\n        const isOpenIconString = typeof value.open === 'string'\r\n        const isCloseIconString = typeof value.close === 'string'\r\n\r\n        return isOpenIconString && isCloseIconString\r\n      },\r\n    },\r\n\r\n    // Input style\r\n    outline: { type: Boolean as PropType<boolean>, default: false },\r\n    bordered: { type: Boolean as PropType<boolean>, default: false },\r\n    label: { type: String as PropType<string>, default: '' },\r\n    placeholder: { type: String as PropType<string>, default: '' },\r\n  },\r\n\r\n  setup (props, context) {\r\n    // DOM element or component instance will be assigned to these refs after initial render (template refs and reactive refs are unified in Composition API)\r\n    const select = ref(null as any)\r\n    const optionList = ref(null as any)\r\n    const searchBar = ref(null as any)\r\n\r\n    const { getOptionByValue, getValue, getText, getTrackBy } = useSelectableList(props)\r\n    const { validate, isFocused, computedErrorMessages, computedError } = useFormComponent(props, context)\r\n    const { colorComputed } = useColor(props)\r\n\r\n    const searchInput = ref('')\r\n    const showSearchInput = computed(() => {\r\n      return props.searchable || props.allowCreate\r\n    })\r\n\r\n    watch(() => searchInput.value, (value) => {\r\n      context.emit('update-search', value)\r\n      hoveredOption.value = null\r\n    })\r\n\r\n    // Select value\r\n\r\n    const valueComputed = computed({\r\n      get () {\r\n        const value = getOptionByValue(props.modelValue)\r\n\r\n        if (props.multiple) {\r\n          if (!value) {\r\n            return []\r\n          }\r\n\r\n          if (!Array.isArray(value)) {\r\n            return [value]\r\n          }\r\n\r\n          return value\r\n        }\r\n\r\n        if (Array.isArray(value)) {\r\n          warn('Model value should be a string for a single Select.')\r\n\r\n          if (value.length) {\r\n            return value[value.length - 1]\r\n          }\r\n        }\r\n\r\n        return value\r\n      },\r\n\r\n      set (value: any) {\r\n        context.emit('update:modelValue', getValue(value))\r\n      },\r\n    })\r\n\r\n    const valueComputedString = computed((): string => {\r\n      if (!valueComputed.value) { return props.clearValue }\r\n      if (typeof valueComputed.value === 'string') { return valueComputed.value }\r\n      if (Array.isArray(valueComputed.value)) {\r\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\r\n      }\r\n\r\n      return getText(valueComputed.value)\r\n    })\r\n\r\n    // Icons\r\n\r\n    const showClearIcon = computed((): boolean => {\r\n      if (!props.clearable) { return false }\r\n      if (props.disabled) { return false }\r\n      if (props.multiple) { return !!valueComputed.value.length }\r\n\r\n      return valueComputed.value !== props.clearValue\r\n    })\r\n\r\n    const toggleIcon = computed((): string => {\r\n      if (!props.dropdownIcon) { return '' }\r\n\r\n      if (typeof props.dropdownIcon === 'string') {\r\n        return props.dropdownIcon\r\n      }\r\n\r\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\r\n    })\r\n\r\n    // Options\r\n\r\n    const filteredOptions = computed((): any[] => {\r\n      if (!props.options) { return [] }\r\n\r\n      if (props.hideSelected) {\r\n        return (props.options).filter((option) => !checkIsOptionSelected(option))\r\n      }\r\n\r\n      return props.options\r\n    })\r\n\r\n    const checkIsOptionSelected = (option: any): boolean => {\r\n      if (!valueComputed.value) { return false }\r\n\r\n      if (Array.isArray(valueComputed.value)) {\r\n        return !!valueComputed.value.find((valueItem: any) => compareOptions(valueItem, option))\r\n      }\r\n\r\n      return compareOptions(valueComputed.value, option)\r\n    }\r\n\r\n    const compareOptions = (one: any, two: any) => {\r\n      // identity check works nice for strings and exact matches.\r\n      if (one === two) {\r\n        return true\r\n      }\r\n      if (typeof one === 'string' && typeof two === 'string') {\r\n        return one === two\r\n      }\r\n      if (one === null || two === null) {\r\n        return false\r\n      }\r\n      if (typeof one === 'object' && typeof two === 'object') {\r\n        return getTrackBy(one) === getTrackBy(two)\r\n      }\r\n\r\n      return false\r\n    }\r\n\r\n    const selectedOption = computed(() => {\r\n      if (props.multiple) { return null }\r\n      if (!valueComputed.value) { return null }\r\n      if (!props.options) { return null }\r\n\r\n      return props.options.find((option: any) => compareOptions(option, valueComputed.value))\r\n    })\r\n\r\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), context.emit)\r\n\r\n    const selectOption = (option: any): void => {\r\n      if (hoveredOption.value === null) {\r\n        hideAndFocus()\r\n        return\r\n      }\r\n\r\n      if (showSearchInput.value) {\r\n        searchInput.value = ''\r\n      }\r\n\r\n      if (props.multiple) {\r\n        const isSelected = checkIsOptionSelected(option)\r\n\r\n        if (isSelected) {\r\n          // Unselect\r\n          valueComputed.value = valueComputed.value.filter((optionSelected: any) => !compareOptions(option, optionSelected))\r\n        } else {\r\n          if (exceedsMaxSelections()) { return }\r\n          addOption(option)\r\n        }\r\n      } else {\r\n        valueComputed.value = typeof option === 'string' ? option : { ...option }\r\n        hideAndFocus()\r\n      }\r\n    }\r\n\r\n    const selectOrAddOption = () => {\r\n      if (hoveredOption.value !== null) {\r\n        selectHoveredOption()\r\n        return\r\n      }\r\n\r\n      if (allowCreateCheck()) {\r\n        addNewOption()\r\n      }\r\n    }\r\n\r\n    const allowCreateCheck = (): boolean => {\r\n      return !!(props.allowCreate && searchInput.value !== '')\r\n    }\r\n\r\n    const addNewOption = (): void => {\r\n      if (props.multiple) {\r\n        if (exceedsMaxSelections()) { return }\r\n\r\n        const hasAddedOption: boolean = valueComputed.value.some((value: any) => value === searchInput.value)\r\n\r\n        // Do not change valueComputed if option already exist and allow create is `unique`\r\n        if (!(props.allowCreate === 'unique' && hasAddedOption)) {\r\n          valueComputed.value = [...valueComputed.value, searchInput.value]\r\n        }\r\n      } else {\r\n        valueComputed.value = searchInput.value\r\n      }\r\n\r\n      searchInput.value = ''\r\n    }\r\n\r\n    // Hovered options\r\n\r\n    const hoveredOption = ref(null as any)\r\n\r\n    const selectHoveredOption = () => {\r\n      if (!showDropdownContent.value) {\r\n        // We can not select options if they are hidden\r\n        showDropdown()\r\n        return\r\n      }\r\n\r\n      selectOption(hoveredOption.value)\r\n    }\r\n\r\n    const hoverPreviousOption = () => {\r\n      optionList.value?.hoverPreviousOption()\r\n    }\r\n\r\n    const hoverNextOption = () => {\r\n      optionList.value?.hoverNextOption()\r\n    }\r\n\r\n    // Dropdown content\r\n\r\n    const showDropdownContent = ref(false)\r\n\r\n    const showDropdownContentComputed = computed({\r\n      get: () => {\r\n        return showDropdownContent.value\r\n      },\r\n      set: (show: boolean) => {\r\n        show\r\n          ? showDropdown()\r\n          : hideDropdown()\r\n      },\r\n    })\r\n\r\n    const closeOnContentClick = computed(() => {\r\n      return !(props.multiple || props.searchable || props.allowCreate)\r\n    })\r\n\r\n    const showDropdown = () => {\r\n      showDropdownContent.value = true\r\n      scrollToSelected()\r\n      focusSearchOrOptions()\r\n    }\r\n\r\n    const hideDropdown = () => {\r\n      showDropdownContent.value = false\r\n      validate()\r\n    }\r\n\r\n    const toggleDropdown = () => {\r\n      if (showDropdownContent.value) {\r\n        hideAndFocus()\r\n      } else {\r\n        showDropdown()\r\n      }\r\n    }\r\n\r\n    // Focus and keyboard navigation\r\n\r\n    const isFocusedComputed = computed(() => {\r\n      // If we show dropdown content that means select is focused\r\n      return isFocused.value || showDropdownContent.value\r\n    })\r\n\r\n    const onSelectClick = () => {\r\n      if (props.disabled) {\r\n        return\r\n      }\r\n\r\n      toggleDropdown()\r\n    }\r\n\r\n    const focusSelect = () => {\r\n      select.value?.focus()\r\n    }\r\n\r\n    const hideAndFocus = (): void => {\r\n      hideDropdown()\r\n      focusSelect()\r\n    }\r\n\r\n    const focusSearchBar = () => {\r\n      searchBar.value?.focus()\r\n    }\r\n\r\n    const focusOptionList = () => {\r\n      optionList.value?.focus()\r\n    }\r\n\r\n    const focusSearchOrOptions = () => {\r\n      nextTick(() => {\r\n        if (showSearchInput.value) {\r\n          focusSearchBar()\r\n        } else { focusOptionList() }\r\n      })\r\n    }\r\n\r\n    /** @public */\r\n    const focus = (): void => {\r\n      if (props.disabled) {\r\n        return\r\n      }\r\n      isFocused.value = true\r\n    }\r\n\r\n    /** @public */\r\n    const blur = (): void => {\r\n      isFocused.value = false\r\n      validate()\r\n    }\r\n\r\n    /** @public */\r\n    const reset = (): void => {\r\n      if (props.multiple) {\r\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\r\n      } else {\r\n        valueComputed.value = props.clearValue\r\n      }\r\n\r\n      searchInput.value = ''\r\n      context.emit('clear')\r\n    }\r\n\r\n    const tabIndexComputed = computed(() => {\r\n      return props.disabled ? -1 : props.tabindex\r\n    })\r\n\r\n    const scrollToSelected = (): void => {\r\n      const selected = valueComputed.value\r\n      const nothingSelected = !selected.length && typeof selected !== 'object'\r\n\r\n      if (nothingSelected) {\r\n        return\r\n      }\r\n\r\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\r\n      hoveredOption.value = scrollTo\r\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\r\n    }\r\n\r\n    // Hinted search\r\n\r\n    let hintedSearchQuery = ''\r\n    let hintedSearchQueryTimeoutIndex!: any\r\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\r\n\r\n    // Hinted search - hover option if you typing it's value on select without search-bar\r\n    const onHintedSearch = (event: KeyboardEvent) => {\r\n      if (navigationKeys.some(key => key === event.key)) {\r\n        return\r\n      }\r\n\r\n      const isLetter: boolean = event.key.length === 1\r\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\r\n\r\n      clearTimeout(hintedSearchQueryTimeoutIndex)\r\n\r\n      if (isDeleteKey) {\r\n        // Remove last letter from query\r\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\r\n      } else if (isLetter) {\r\n        // Add every new letter to the query\r\n        hintedSearchQuery += event.key\r\n      }\r\n\r\n      if (showSearchInput.value) {\r\n        searchInput.value = hintedSearchQuery\r\n        return\r\n      }\r\n\r\n      // Search for an option that matches the query\r\n      if (hintedSearchQuery) {\r\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\r\n        if (appropriateOption) {\r\n          hoveredOption.value = appropriateOption\r\n        }\r\n      }\r\n\r\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\r\n    }\r\n\r\n    return {\r\n      select,\r\n      optionList,\r\n      focusOptionList,\r\n      focus,\r\n      blur,\r\n      reset,\r\n      onSelectClick,\r\n      hideAndFocus,\r\n      searchBar,\r\n      focusSearchBar,\r\n      searchInput,\r\n      showSearchInput,\r\n      hoveredOption,\r\n      tabIndexComputed,\r\n      valueComputed,\r\n      valueComputedString,\r\n      showClearIcon,\r\n      toggleIcon,\r\n      showDropdownContent,\r\n      computedErrorMessages,\r\n      computedError,\r\n      filteredOptions,\r\n      checkIsOptionSelected,\r\n      closeOnContentClick,\r\n      selectOption,\r\n      selectOrAddOption,\r\n      selectHoveredOption,\r\n      hoverPreviousOption,\r\n      hoverNextOption,\r\n      showDropdownContentComputed,\r\n      showDropdown,\r\n      hideDropdown,\r\n      toggleDropdown,\r\n      isFocusedComputed,\r\n      colorComputed,\r\n      onHintedSearch,\r\n      getText,\r\n      getTrackBy,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-select {\r\n  cursor: var(--va-select-cursor);\r\n\r\n  .va-input {\r\n    cursor: var(--va-select-cursor);\r\n  }\r\n\r\n  .va-input__append {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n  }\r\n\r\n  &__dropdown {\r\n    .va-dropdown__anchor {\r\n      display: block;\r\n    }\r\n\r\n    .va-dropdown__content {\r\n      overflow: hidden;\r\n      border-bottom-right-radius: var(--va-select-dropdown-border-radius);\r\n      border-bottom-left-radius: var(--va-select-dropdown-border-radius);\r\n      border-top-right-radius: 0;\r\n      border-top-left-radius: 0;\r\n      box-shadow: var(--va-select-box-shadow);\r\n      padding: 0;\r\n    }\r\n\r\n    .va-select__dropdown__content {\r\n      background: var(--va-select-dropdown-background);\r\n      overflow-y: auto;\r\n\r\n      @include va-scroll(var(--va-select-scroll-color));\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import { PropType, computed } from 'vue'\r\nimport { getColor } from '../services/color-config/color-config'\r\n\r\n/**\r\n * You could add these props to any component by destructuring them inside props option.\r\n * @example\r\n * props: { ...useColorProps, componentsOwnProp, etc. }\r\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\r\n */\r\nexport const useColorProps = {\r\n  color: {\r\n    type: String as PropType<string>,\r\n    default: '',\r\n  },\r\n}\r\n\r\nexport function useColor (props: any) {\r\n  const hasColorTheme = true\r\n  const theme = { getColor }\r\n\r\n  const colorComputed = computed(() => {\r\n    return theme.getColor(props.color)\r\n  })\r\n\r\n  const computeColor = (prop: string, defaultColor?: string) => {\r\n    return theme.getColor(prop, defaultColor)\r\n  }\r\n\r\n  return {\r\n    hasColorTheme,\r\n    theme,\r\n    colorComputed,\r\n    computeColor,\r\n  }\r\n}\r\n","<template>\r\n  <va-input-wrapper\r\n    :success=\"$props.success\"\r\n    :messages=\"$props.messages\"\r\n    :error=\"$props.error\"\r\n    :error-messages=\"computedErrorMessages\"\r\n    :style=\"{ width: $props.width }\"\r\n  >\r\n    <va-dropdown\r\n      ref=\"dropdown\"\r\n      v-model=\"showDropdownContentComputed\"\r\n      :position=\"$props.position\"\r\n      :disabled=\"$props.disabled\"\r\n      :max-height=\"$props.maxHeight\"\r\n      :fixed=\"$props.fixed\"\r\n      :close-on-content-click=\"closeOnContentClick\"\r\n      trigger=\"none\"\r\n      class=\"va-select__dropdown\"\r\n      keep-anchor-width\r\n      boundary-body\r\n      :stateful=false\r\n    >\r\n      <template #anchor>\r\n        <div\r\n          class=\"va-select\"\r\n          ref=\"select\"\r\n          :tabindex=\"tabIndexComputed\"\r\n          @focus=\"focus\"\r\n          @blur=\"blur\"\r\n          @keydown.enter.stop.prevent=\"onSelectClick()\"\r\n          @keydown.space.stop.prevent=\"onSelectClick()\"\r\n          @click.prevent=\"onSelectClick()\"\r\n        >\r\n          <!-- We show messages outside of dropdown to draw dropdown content under the input -->\r\n          <va-input\r\n            :model-value=\"valueComputedString\"\r\n            :success=\"$props.success\"\r\n            :error=\"computedError\"\r\n            :clearable=\"showClearIcon\"\r\n            :clearableIcon=\"$props.clearableIcon\"\r\n            :color=\"$props.color\"\r\n            :label=\"$props.label\"\r\n            :placeholder=\"$props.placeholder\"\r\n            :loading=\"$props.loading\"\r\n            :disabled=\"$props.disabled\"\r\n            :outline=\"$props.outline\"\r\n            :bordered=\"$props.bordered\"\r\n            :focused=\"isFocusedComputed\"\r\n            :tabindex=\"-1\"\r\n            readonly\r\n            @cleared=\"reset\"\r\n          >\r\n            <template\r\n              v-if=\"$slots.prepend\"\r\n              #prepend\r\n            >\r\n              <slot name=\"prepend\" />\r\n            </template>\r\n\r\n            <template\r\n              v-if=\"$slots.append\"\r\n              #append\r\n            >\r\n              <slot name=\"append\" />\r\n            </template>\r\n\r\n            <template\r\n              v-if=\"$slots.prependInner\"\r\n              #prependInner\r\n            >\r\n              <slot name=\"prependInner\" />\r\n            </template>\r\n\r\n            <template #appendInner>\r\n              <div class=\"va-input__append\">\r\n                <slot\r\n                  v-if=\"$slots.appendInner\"\r\n                  name=\"appendInner\"\r\n                />\r\n                <va-icon\r\n                  :color=\"colorComputed\"\r\n                  :name=\"toggleIcon\"\r\n                />\r\n              </div>\r\n            </template>\r\n\r\n            <template v-if=\"$slots.content\" #content=\"{ value, focus }\">\r\n              <slot name=\"content\" v-bind=\"{ valueString: value, focus, value: valueComputed }\" />\r\n            </template>\r\n          </va-input>\r\n        </div>\r\n      </template>\r\n\r\n      <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\r\n      <va-dropdown-content\r\n        @keyup.enter.stop\r\n        @keydown.esc.prevent=\"hideAndFocus\"\r\n        @keydown.tab=\"hideDropdown\"\r\n      >\r\n        <va-input\r\n          v-if=\"showSearchInput\"\r\n          :id=\"$props.id\"\r\n          ref=\"searchBar\"\r\n          v-model=\"searchInput\"\r\n          class=\"va-select__input\"\r\n          placeholder=\"Search\"\r\n          removable\r\n          :name=\"$props.name\"\r\n          :tabindex=\"tabindex + 1\"\r\n          :bordered=\"true\"\r\n          @keydown.up.stop.prevent=\"hoverPreviousOption()\"\r\n          @keydown.left.stop.prevent=\"hoverPreviousOption()\"\r\n          @keydown.down.stop.prevent=\"hoverNextOption()\"\r\n          @keydown.right.stop.prevent=\"hoverNextOption()\"\r\n          @keydown.enter.prevent=\"selectOrAddOption()\"\r\n          @focus=\"hoveredOption = null\"\r\n        />\r\n        <div class=\"va-select__dropdown__content\">\r\n          <va-select-option-list\r\n            ref=\"optionList\"\r\n            v-model:hoveredOption=\"hoveredOption\"\r\n            :style=\"{ maxHeight: $props.maxHeight }\"\r\n            :options=\"filteredOptions\"\r\n            :selected-value=\"valueComputed\"\r\n            :get-selected-state=\"checkIsOptionSelected\"\r\n            :get-text=\"getText\"\r\n            :get-track-by=\"getTrackBy\"\r\n            :search=\"searchInput\"\r\n            :no-options-text=\"$props.noOptionsText\"\r\n            :color=\"$props.color\"\r\n            :tabindex=\"tabindex + 1\"\r\n            @select-option=\"selectOption\"\r\n            @no-previous-option-to-hover=\"focusSearchBar()\"\r\n            @keydown.enter.stop.prevent=\"selectHoveredOption()\"\r\n            @keydown.space.stop.prevent=\"selectHoveredOption()\"\r\n            @keydown=\"onHintedSearch\"\r\n          />\r\n        </div>\r\n      </va-dropdown-content>\r\n    </va-dropdown>\r\n  </va-input-wrapper>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType, ref, computed, watch, nextTick } from 'vue'\r\n\r\nimport { useSelectableList, useSelectableListProps } from '../../composables/useSelectableList'\r\nimport { useFormComponent, useFormComponentProps } from '../../composables/useFormComponent'\r\nimport { useLoadingProps } from '../../composables/useLoading'\r\nimport { useColor } from '../../composables/useColor'\r\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\r\n\r\nimport { warn } from '../../services/utils'\r\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\r\nimport VaIcon from '../va-icon'\r\nimport VaInput, { VaInputWrapper } from '../va-input'\r\n\r\nimport VaSelectOptionList from './VaSelectOptionList'\r\n\r\ntype DropdownIcon = {\r\n  open: string,\r\n  close: string\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'VaSelect',\r\n  components: {\r\n    VaSelectOptionList,\r\n    VaIcon,\r\n    VaDropdown,\r\n    VaDropdownContent,\r\n    VaInput,\r\n    VaInputWrapper,\r\n  },\r\n  emits: ['update-search', 'update:modelValue', 'clear'],\r\n  props: {\r\n    ...useSelectableListProps,\r\n    ...useFormComponentProps,\r\n    ...useLoadingProps,\r\n    ...useMaxSelectionsProps,\r\n\r\n    modelValue: {\r\n      type: [String, Number, Object, Array] as PropType<string | number | Record<string, any> | any[]>,\r\n      default: '',\r\n    },\r\n\r\n    // Dropdown position\r\n    position: {\r\n      type: String as PropType<string>,\r\n      default: 'bottom',\r\n      validator: (position: string) => ['top', 'bottom'].includes(position),\r\n    },\r\n\r\n    allowCreate: {\r\n      type: [Boolean, String] as PropType<boolean | string>,\r\n      default: false,\r\n      validator: (mode: string | boolean) => {\r\n        return [true, false, 'unique'].includes(mode)\r\n      },\r\n    },\r\n\r\n    color: { type: String as PropType<string>, default: 'primary' },\r\n    multiple: { type: Boolean as PropType<boolean>, default: false },\r\n    searchable: { type: Boolean as PropType<boolean>, default: false },\r\n    disabled: { type: Boolean as PropType<boolean>, default: false },\r\n    readonly: { type: Boolean as PropType<boolean>, default: false }, // Probably unused prop! THIS WAS UNUSED! USE\r\n    separator: { type: String as PropType<string>, default: ', ' },\r\n    width: { type: String as PropType<string>, default: '100%' },\r\n    maxHeight: { type: String as PropType<string>, default: '128px' },\r\n    clearValue: { type: String as PropType<string>, default: '' },\r\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\r\n    fixed: { type: Boolean as PropType<boolean>, default: true },\r\n    clearable: { type: Boolean as PropType<boolean>, default: false },\r\n    clearableIcon: { type: String as PropType<string>, default: 'highlight_off' },\r\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\r\n    tabindex: { type: Number as PropType<number>, default: 0 },\r\n    dropdownIcon: {\r\n      type: [String, Object] as PropType<string | DropdownIcon>,\r\n      default: (): DropdownIcon => ({\r\n        open: 'expand_more',\r\n        close: 'expand_less',\r\n      }),\r\n      validator: (value: any) => {\r\n        if (typeof value === 'string') { return true }\r\n\r\n        const isOpenIconString = typeof value.open === 'string'\r\n        const isCloseIconString = typeof value.close === 'string'\r\n\r\n        return isOpenIconString && isCloseIconString\r\n      },\r\n    },\r\n\r\n    // Input style\r\n    outline: { type: Boolean as PropType<boolean>, default: false },\r\n    bordered: { type: Boolean as PropType<boolean>, default: false },\r\n    label: { type: String as PropType<string>, default: '' },\r\n    placeholder: { type: String as PropType<string>, default: '' },\r\n  },\r\n\r\n  setup (props, context) {\r\n    // DOM element or component instance will be assigned to these refs after initial render (template refs and reactive refs are unified in Composition API)\r\n    const select = ref(null as any)\r\n    const optionList = ref(null as any)\r\n    const searchBar = ref(null as any)\r\n\r\n    const { getOptionByValue, getValue, getText, getTrackBy } = useSelectableList(props)\r\n    const { validate, isFocused, computedErrorMessages, computedError } = useFormComponent(props, context)\r\n    const { colorComputed } = useColor(props)\r\n\r\n    const searchInput = ref('')\r\n    const showSearchInput = computed(() => {\r\n      return props.searchable || props.allowCreate\r\n    })\r\n\r\n    watch(() => searchInput.value, (value) => {\r\n      context.emit('update-search', value)\r\n      hoveredOption.value = null\r\n    })\r\n\r\n    // Select value\r\n\r\n    const valueComputed = computed({\r\n      get () {\r\n        const value = getOptionByValue(props.modelValue)\r\n\r\n        if (props.multiple) {\r\n          if (!value) {\r\n            return []\r\n          }\r\n\r\n          if (!Array.isArray(value)) {\r\n            return [value]\r\n          }\r\n\r\n          return value\r\n        }\r\n\r\n        if (Array.isArray(value)) {\r\n          warn('Model value should be a string for a single Select.')\r\n\r\n          if (value.length) {\r\n            return value[value.length - 1]\r\n          }\r\n        }\r\n\r\n        return value\r\n      },\r\n\r\n      set (value: any) {\r\n        context.emit('update:modelValue', getValue(value))\r\n      },\r\n    })\r\n\r\n    const valueComputedString = computed((): string => {\r\n      if (!valueComputed.value) { return props.clearValue }\r\n      if (typeof valueComputed.value === 'string') { return valueComputed.value }\r\n      if (Array.isArray(valueComputed.value)) {\r\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\r\n      }\r\n\r\n      return getText(valueComputed.value)\r\n    })\r\n\r\n    // Icons\r\n\r\n    const showClearIcon = computed((): boolean => {\r\n      if (!props.clearable) { return false }\r\n      if (props.disabled) { return false }\r\n      if (props.multiple) { return !!valueComputed.value.length }\r\n\r\n      return valueComputed.value !== props.clearValue\r\n    })\r\n\r\n    const toggleIcon = computed((): string => {\r\n      if (!props.dropdownIcon) { return '' }\r\n\r\n      if (typeof props.dropdownIcon === 'string') {\r\n        return props.dropdownIcon\r\n      }\r\n\r\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\r\n    })\r\n\r\n    // Options\r\n\r\n    const filteredOptions = computed((): any[] => {\r\n      if (!props.options) { return [] }\r\n\r\n      if (props.hideSelected) {\r\n        return (props.options).filter((option) => !checkIsOptionSelected(option))\r\n      }\r\n\r\n      return props.options\r\n    })\r\n\r\n    const checkIsOptionSelected = (option: any): boolean => {\r\n      if (!valueComputed.value) { return false }\r\n\r\n      if (Array.isArray(valueComputed.value)) {\r\n        return !!valueComputed.value.find((valueItem: any) => compareOptions(valueItem, option))\r\n      }\r\n\r\n      return compareOptions(valueComputed.value, option)\r\n    }\r\n\r\n    const compareOptions = (one: any, two: any) => {\r\n      // identity check works nice for strings and exact matches.\r\n      if (one === two) {\r\n        return true\r\n      }\r\n      if (typeof one === 'string' && typeof two === 'string') {\r\n        return one === two\r\n      }\r\n      if (one === null || two === null) {\r\n        return false\r\n      }\r\n      if (typeof one === 'object' && typeof two === 'object') {\r\n        return getTrackBy(one) === getTrackBy(two)\r\n      }\r\n\r\n      return false\r\n    }\r\n\r\n    const selectedOption = computed(() => {\r\n      if (props.multiple) { return null }\r\n      if (!valueComputed.value) { return null }\r\n      if (!props.options) { return null }\r\n\r\n      return props.options.find((option: any) => compareOptions(option, valueComputed.value))\r\n    })\r\n\r\n    const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), context.emit)\r\n\r\n    const selectOption = (option: any): void => {\r\n      if (hoveredOption.value === null) {\r\n        hideAndFocus()\r\n        return\r\n      }\r\n\r\n      if (showSearchInput.value) {\r\n        searchInput.value = ''\r\n      }\r\n\r\n      if (props.multiple) {\r\n        const isSelected = checkIsOptionSelected(option)\r\n\r\n        if (isSelected) {\r\n          // Unselect\r\n          valueComputed.value = valueComputed.value.filter((optionSelected: any) => !compareOptions(option, optionSelected))\r\n        } else {\r\n          if (exceedsMaxSelections()) { return }\r\n          addOption(option)\r\n        }\r\n      } else {\r\n        valueComputed.value = typeof option === 'string' ? option : { ...option }\r\n        hideAndFocus()\r\n      }\r\n    }\r\n\r\n    const selectOrAddOption = () => {\r\n      if (hoveredOption.value !== null) {\r\n        selectHoveredOption()\r\n        return\r\n      }\r\n\r\n      if (allowCreateCheck()) {\r\n        addNewOption()\r\n      }\r\n    }\r\n\r\n    const allowCreateCheck = (): boolean => {\r\n      return !!(props.allowCreate && searchInput.value !== '')\r\n    }\r\n\r\n    const addNewOption = (): void => {\r\n      if (props.multiple) {\r\n        if (exceedsMaxSelections()) { return }\r\n\r\n        const hasAddedOption: boolean = valueComputed.value.some((value: any) => value === searchInput.value)\r\n\r\n        // Do not change valueComputed if option already exist and allow create is `unique`\r\n        if (!(props.allowCreate === 'unique' && hasAddedOption)) {\r\n          valueComputed.value = [...valueComputed.value, searchInput.value]\r\n        }\r\n      } else {\r\n        valueComputed.value = searchInput.value\r\n      }\r\n\r\n      searchInput.value = ''\r\n    }\r\n\r\n    // Hovered options\r\n\r\n    const hoveredOption = ref(null as any)\r\n\r\n    const selectHoveredOption = () => {\r\n      if (!showDropdownContent.value) {\r\n        // We can not select options if they are hidden\r\n        showDropdown()\r\n        return\r\n      }\r\n\r\n      selectOption(hoveredOption.value)\r\n    }\r\n\r\n    const hoverPreviousOption = () => {\r\n      optionList.value?.hoverPreviousOption()\r\n    }\r\n\r\n    const hoverNextOption = () => {\r\n      optionList.value?.hoverNextOption()\r\n    }\r\n\r\n    // Dropdown content\r\n\r\n    const showDropdownContent = ref(false)\r\n\r\n    const showDropdownContentComputed = computed({\r\n      get: () => {\r\n        return showDropdownContent.value\r\n      },\r\n      set: (show: boolean) => {\r\n        show\r\n          ? showDropdown()\r\n          : hideDropdown()\r\n      },\r\n    })\r\n\r\n    const closeOnContentClick = computed(() => {\r\n      return !(props.multiple || props.searchable || props.allowCreate)\r\n    })\r\n\r\n    const showDropdown = () => {\r\n      showDropdownContent.value = true\r\n      scrollToSelected()\r\n      focusSearchOrOptions()\r\n    }\r\n\r\n    const hideDropdown = () => {\r\n      showDropdownContent.value = false\r\n      validate()\r\n    }\r\n\r\n    const toggleDropdown = () => {\r\n      if (showDropdownContent.value) {\r\n        hideAndFocus()\r\n      } else {\r\n        showDropdown()\r\n      }\r\n    }\r\n\r\n    // Focus and keyboard navigation\r\n\r\n    const isFocusedComputed = computed(() => {\r\n      // If we show dropdown content that means select is focused\r\n      return isFocused.value || showDropdownContent.value\r\n    })\r\n\r\n    const onSelectClick = () => {\r\n      if (props.disabled) {\r\n        return\r\n      }\r\n\r\n      toggleDropdown()\r\n    }\r\n\r\n    const focusSelect = () => {\r\n      select.value?.focus()\r\n    }\r\n\r\n    const hideAndFocus = (): void => {\r\n      hideDropdown()\r\n      focusSelect()\r\n    }\r\n\r\n    const focusSearchBar = () => {\r\n      searchBar.value?.focus()\r\n    }\r\n\r\n    const focusOptionList = () => {\r\n      optionList.value?.focus()\r\n    }\r\n\r\n    const focusSearchOrOptions = () => {\r\n      nextTick(() => {\r\n        if (showSearchInput.value) {\r\n          focusSearchBar()\r\n        } else { focusOptionList() }\r\n      })\r\n    }\r\n\r\n    /** @public */\r\n    const focus = (): void => {\r\n      if (props.disabled) {\r\n        return\r\n      }\r\n      isFocused.value = true\r\n    }\r\n\r\n    /** @public */\r\n    const blur = (): void => {\r\n      isFocused.value = false\r\n      validate()\r\n    }\r\n\r\n    /** @public */\r\n    const reset = (): void => {\r\n      if (props.multiple) {\r\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\r\n      } else {\r\n        valueComputed.value = props.clearValue\r\n      }\r\n\r\n      searchInput.value = ''\r\n      context.emit('clear')\r\n    }\r\n\r\n    const tabIndexComputed = computed(() => {\r\n      return props.disabled ? -1 : props.tabindex\r\n    })\r\n\r\n    const scrollToSelected = (): void => {\r\n      const selected = valueComputed.value\r\n      const nothingSelected = !selected.length && typeof selected !== 'object'\r\n\r\n      if (nothingSelected) {\r\n        return\r\n      }\r\n\r\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\r\n      hoveredOption.value = scrollTo\r\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\r\n    }\r\n\r\n    // Hinted search\r\n\r\n    let hintedSearchQuery = ''\r\n    let hintedSearchQueryTimeoutIndex!: any\r\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\r\n\r\n    // Hinted search - hover option if you typing it's value on select without search-bar\r\n    const onHintedSearch = (event: KeyboardEvent) => {\r\n      if (navigationKeys.some(key => key === event.key)) {\r\n        return\r\n      }\r\n\r\n      const isLetter: boolean = event.key.length === 1\r\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\r\n\r\n      clearTimeout(hintedSearchQueryTimeoutIndex)\r\n\r\n      if (isDeleteKey) {\r\n        // Remove last letter from query\r\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\r\n      } else if (isLetter) {\r\n        // Add every new letter to the query\r\n        hintedSearchQuery += event.key\r\n      }\r\n\r\n      if (showSearchInput.value) {\r\n        searchInput.value = hintedSearchQuery\r\n        return\r\n      }\r\n\r\n      // Search for an option that matches the query\r\n      if (hintedSearchQuery) {\r\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\r\n        if (appropriateOption) {\r\n          hoveredOption.value = appropriateOption\r\n        }\r\n      }\r\n\r\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\r\n    }\r\n\r\n    return {\r\n      select,\r\n      optionList,\r\n      focusOptionList,\r\n      focus,\r\n      blur,\r\n      reset,\r\n      onSelectClick,\r\n      hideAndFocus,\r\n      searchBar,\r\n      focusSearchBar,\r\n      searchInput,\r\n      showSearchInput,\r\n      hoveredOption,\r\n      tabIndexComputed,\r\n      valueComputed,\r\n      valueComputedString,\r\n      showClearIcon,\r\n      toggleIcon,\r\n      showDropdownContent,\r\n      computedErrorMessages,\r\n      computedError,\r\n      filteredOptions,\r\n      checkIsOptionSelected,\r\n      closeOnContentClick,\r\n      selectOption,\r\n      selectOrAddOption,\r\n      selectHoveredOption,\r\n      hoverPreviousOption,\r\n      hoverNextOption,\r\n      showDropdownContentComputed,\r\n      showDropdown,\r\n      hideDropdown,\r\n      toggleDropdown,\r\n      isFocusedComputed,\r\n      colorComputed,\r\n      onHintedSearch,\r\n      getText,\r\n      getTrackBy,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../styles/resources/resources\";\r\n@import 'variables';\r\n\r\n.va-select {\r\n  cursor: var(--va-select-cursor);\r\n\r\n  .va-input {\r\n    cursor: var(--va-select-cursor);\r\n  }\r\n\r\n  .va-input__append {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n  }\r\n\r\n  &__dropdown {\r\n    .va-dropdown__anchor {\r\n      display: block;\r\n    }\r\n\r\n    .va-dropdown__content {\r\n      overflow: hidden;\r\n      border-bottom-right-radius: var(--va-select-dropdown-border-radius);\r\n      border-bottom-left-radius: var(--va-select-dropdown-border-radius);\r\n      border-top-right-radius: 0;\r\n      border-top-left-radius: 0;\r\n      box-shadow: var(--va-select-box-shadow);\r\n      padding: 0;\r\n    }\r\n\r\n    .va-select__dropdown__content {\r\n      background: var(--va-select-dropdown-background);\r\n      overflow-y: auto;\r\n\r\n      @include va-scroll(var(--va-select-scroll-color));\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\r\nimport VaSelect from './VaSelect.vue'\r\nimport VaSelectOptionListBase from './VaSelectOptionList/VaSelectOptionList.vue'\r\n\r\nexport const VaSelectOptionList = withConfigTransport(VaSelectOptionListBase)\r\n\r\nexport default withConfigTransport(VaSelect)\r\n"],"names":["useSelectableListProps","options","type","Array","default","textBy","String","Function","valueBy","trackBy","disabledBy","freeGlobal","global","Object","freeSelf","self","_Symbol","Symbol","require$$0","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","undefined","_getRawTag","getRawTag","value","isOwn","call","tag","unmasked","e","result","require$$1","objectToString","_baseGetTag","baseGetTag","isArray_1","isArray","isObjectLike_1","isObjectLike","require$$2","isString_1","isString","isObject","isFunction_1","isFunction","_arrayPush","arrayPush","array","values","index","length","offset","baseIsArguments","propertyIsEnumerable","isArguments","arguments","spreadableSymbol","isConcatSpreadable","isFlattenable","baseFlatten","depth","predicate","isStrict","flatten_1","flatten","useFormComponentProps","rules","disabled","Boolean","readonly","success","messages","error","errorMessages","errorCount","Number","id","name","modelValue","validator","Error","prepareValidations","callArguments","map","message","useLoadingProps","loading","useMaxSelectionsProps","maxSelections","SelectOptionListPropsMixin","Vue","with","SelectOptionListProps","constructor","this","prop","VaSelectOptionList","mixins","ColorMixin","created","watch","$props","hoveredOption","newOption","scrollToOption","beforeUpdate","itemRefs","setItemRef","option","el","hoveredOptionComputed","$emit","filteredOptions","search","filter","optionText","getText","toUpperCase","includes","selectOption","getOptionClass","getSelectedState","getOptionStyle","color","colorComputed","backgroundColor","isHovered","getHoverColor","getTrackBy","updateHoveredOption","hoverPreviousOption","hoveredOptionIndex","findIndex","hoverNextOption","hoverFirstOption","optionElement","scrollIntoView","behavior","block","inline","focus","$refs","Options","components","VaIcon","emits","_mergeProps","class","ref","tabindex","_ctx","icon","size","defineComponent","withConfigTransport","VaDropdown","VaDropdownContent","VaInput","VaInputWrapper","props","position","allowCreate","mode","multiple","searchable","separator","width","maxHeight","clearValue","noOptionsText","fixed","clearable","clearableIcon","hideSelected","dropdownIcon","open","close","isOpenIconString","isCloseIconString","outline","bordered","label","placeholder","setup","context","select","optionList","searchBar","getOptionByValue","getValue","useSelectableList","getProp","isSelectableListComponent","find","getDisabled","validate","isFocused","computedErrorMessages","computedError","useFormComponent","hadFocus","internalErrorMessages","internalError","isFormComponent","formProvider","inject","FormServiceKey","onMounted","onChildMounted","onUnmounted","onChildUnmounted","forEach","validateResult","push","shouldValidateOnBlur","computed","get","set","errorMessage","ValidateMixin_onBlur","reset","resetValidation","hasError","useColor","theme","getColor","hasColorTheme","computeColor","defaultColor","searchInput","showSearchInput","emit","valueComputed","warn","valueComputedString","join","showClearIcon","toggleIcon","showDropdownContent","checkIsOptionSelected","valueItem","compareOptions","one","two","exceedsMaxSelections","addOption","useMaxSelections","selections","optionToAdd","newSelectedOptions","optionSelected","hideAndFocus","allowCreateCheck","addNewOption","hasAddedOption","some","selectHoveredOption","showDropdown","showDropdownContentComputed","show","hideDropdown","closeOnContentClick","scrollToSelected","focusSearchOrOptions","toggleDropdown","isFocusedComputed","focusSearchBar","focusOptionList","nextTick","tabIndexComputed","selected","scrollTo","hintedSearchQueryTimeoutIndex","hintedSearchQuery","navigationKeys","blur","onSelectClick","selectOrAddOption","onHintedSearch","event","key","isLetter","isDeleteKey","clearTimeout","slice","appropriateOption","toLowerCase","startsWith","setTimeout","style","_createVNode","trigger","stateful","anchor","onFocus","onBlur","onKeydown","onClick","_createCommentVNode","focused","onCleared","appendInner","_renderSlot","onKeyup","_createBlock","removable","onSelectOption","onNoPreviousOptionToHover","VaSelectOptionListBase","VaSelect"],"mappings":"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"}