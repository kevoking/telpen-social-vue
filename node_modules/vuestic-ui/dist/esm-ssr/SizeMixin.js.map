{"version":3,"file":"SizeMixin.js","sources":["../../src/mixins/SizeMixin.ts"],"sourcesContent":["import { mixins, Vue, prop } from 'vue-class-component'\r\n\r\nexport const sizesConfig = {\r\n  defaultSize: 48,\r\n  sizes: {\r\n    small: 32,\r\n    medium: 48,\r\n    large: 64,\r\n  },\r\n}\r\n\r\nexport const fontSizesConfig = {\r\n  defaultSize: 1,\r\n  sizes: {\r\n    small: 0.75,\r\n    medium: 1,\r\n    large: 1.25,\r\n  },\r\n}\r\n\r\nclass SizeProps {\r\n  size = prop<string | number>({\r\n    type: [String, Number],\r\n    default: '',\r\n    validator: (size: string | number) => {\r\n      return typeof size === 'string' || typeof size === 'number'\r\n    },\r\n  })\r\n\r\n  sizesConfig = prop<Record<string, any>>({\r\n    type: Object,\r\n    default: () => sizesConfig,\r\n  })\r\n\r\n  fontSizesConfig = prop<Record<string, any>>({\r\n    type: Object,\r\n    default: () => fontSizesConfig,\r\n  })\r\n}\r\n\r\nexport class SizeMixin extends mixins(Vue.with(SizeProps)) {\r\n  fontRegex = /(?<fontSize>\\d+)(?<extension>px|rem)/i\r\n\r\n  get sizeComputed (): string {\r\n    const { defaultSize, sizes } = this.sizesConfig\r\n\r\n    if (!this.size) {\r\n      return `${defaultSize}px`\r\n    }\r\n\r\n    if (typeof this.size === 'string') {\r\n      return this.size in sizes ? `${sizes[this.size]}px` : this.size\r\n    }\r\n\r\n    return `${this.size}px`\r\n  }\r\n\r\n  get fontSizeComputed (): string {\r\n    return `${this.SizeMixin_fontSize}rem`\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  get SizeMixin_fontSize (): number {\r\n    const { defaultSize, sizes } = this.fontSizesConfig\r\n\r\n    const convertToRem = (px: number) => px / 16 - 0.5\r\n\r\n    if (!this.size) {\r\n      return defaultSize\r\n    }\r\n\r\n    if (typeof this.size === 'string') {\r\n      if (this.size in sizes) { return sizes[this.size] }\r\n\r\n      const fontSizeParsed = this.size.match(this.fontRegex)\r\n      if (!fontSizeParsed || !fontSizeParsed.groups) {\r\n        throw new Error('Size prop should be either valid string or number')\r\n      }\r\n\r\n      const { extension, fontSize } = fontSizeParsed.groups\r\n      return extension === 'rem' ? +fontSize : convertToRem(+fontSize)\r\n    }\r\n\r\n    return convertToRem(this.size)\r\n  }\r\n}\r\n"],"names":["sizesConfig","defaultSize","sizes","small","medium","large","fontSizesConfig","SizeProps","constructor","this","prop","type","String","Number","default","validator","size","Object","SizeMixin","mixins","Vue","with","sizeComputed","fontSizeComputed","SizeMixin_fontSize","convertToRem","px","fontSizeParsed","match","fontRegex","groups","Error","extension","fontSize"],"mappings":"uEAEO,MAAMA,EAAc,CACzBC,YAAa,GACbC,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,MAAO,KAIEC,EAAkB,CAC7BL,YAAa,EACbC,MAAO,CACLC,MAAO,IACPC,OAAQ,EACRC,MAAO,OAIX,MAAME,UAANC,cACEC,UAAOC,EAAsB,CAC3BC,KAAM,CAACC,OAAQC,QACfC,QAAS,GACTC,UAAYC,GACa,iBAATA,GAAqC,iBAATA,IAI9CP,iBAAcC,EAA0B,CACtCC,KAAMM,OACNH,QAAS,IAAMd,IAGjBS,qBAAkBC,EAA0B,CAC1CC,KAAMM,OACNH,QAAS,IAAMR,WAINY,kBAAkBC,EAAOC,EAAIC,KAAKd,aAA/CC,kCACEC,eAAY,wCAEZa,mBACE,MAAMrB,YAAEA,EAAWC,MAAEA,GAAUO,KAAKT,YAEpC,OAAKS,KAAKO,KAIe,iBAAdP,KAAKO,KACPP,KAAKO,QAAQd,EAAQ,GAAGA,EAAMO,KAAKO,UAAYP,KAAKO,KAGtD,GAAGP,KAAKO,SAPN,GAAGf,MAUdsB,uBACE,MAAO,GAAGd,KAAKe,wBAIjBA,yBACE,MAAMvB,YAAEA,EAAWC,MAAEA,GAAUO,KAAKH,gBAE9BmB,aAAgBC,GAAeA,EAAK,GAAK,GAE/C,IAAKjB,KAAKO,KACR,OAAOf,EAGT,GAAyB,iBAAdQ,KAAKO,KAAmB,CACjC,GAAIP,KAAKO,QAAQd,EAAS,OAAOA,EAAMO,KAAKO,MAE5C,MAAMW,EAAiBlB,KAAKO,KAAKY,MAAMnB,KAAKoB,WAC5C,IAAKF,IAAmBA,EAAeG,OACrC,MAAM,IAAIC,MAAM,qDAGlB,MAAMC,UAAEA,EAASC,SAAEA,GAAaN,EAAeG,OAC/C,MAAqB,QAAdE,GAAuBC,EAAWR,cAAcQ,GAGzD,OAAOR,aAAahB,KAAKO"}