import "./chunk-A5AMJUWA.js";

// node_modules/vue-otp-2/dist/vue-otp-2.esm.js
var ON_INPUT_COMPLETE_EVENT = "onComplete";
var ON_INPUT_CHANGE_EVENT = "onChange";
var script = {
  name: "VueOtp2",
  props: ["length", "joinCharacter"],
  data: function() {
    return {
      otpLength: this.length || 6,
      character: this.joinCharacter,
      otp: [],
      isComplete: false
    };
  },
  methods: {
    handleInput(e, i) {
      this.$nextTick(() => {
        this.isComplete = false;
        if (e.keyCode === 8) {
          this.otp = this.otp.map((item, idx) => {
            if (idx >= i) {
              item = null;
            }
            return item;
          });
          if (i > 0) {
            this.$refs["input" + (i - 1)][0].focus();
          }
        } else {
          this.otp = this.otp.map((item, idx) => {
            if (idx === i) {
              item = e.key;
            }
            return item;
          });
          if (i < this.otpLength - 1) {
            this.$refs["input" + (i + 1)][0].focus();
          } else {
            this.isComplete = true;
          }
        }
        const dataChange = {
          index: i,
          value: this.otp[i]
        };
        this.$emit(ON_INPUT_CHANGE_EVENT, dataChange);
      });
    },
    handleFocus(e, i) {
      e.target.select();
      if (!this.otp[i]) {
        const c = this.otp.filter((item) => item).length;
        this.$refs["input" + c][0].focus();
      }
    }
  },
  watch: {
    isComplete() {
      if (this.isComplete) {
        this.$emit(ON_INPUT_COMPLETE_EVENT, [...this.otp]);
        this.isComplete = false;
      }
    }
  }
};
function normalizeComponent(template, style, script2, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector2, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== "boolean") {
    createInjectorSSR = createInjector2;
    createInjector2 = shadowMode;
    shadowMode = false;
  }
  const options = typeof script2 === "function" ? script2.options : script2;
  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;
    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }
  if (scopeId) {
    options._scopeId = scopeId;
  }
  let hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (style) {
        style.call(this, createInjectorSSR(context));
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function(context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function(context) {
      style.call(this, createInjector2(context));
    };
  }
  if (hook) {
    if (options.functional) {
      const originalRender = options.render;
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return script2;
}
var isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
  return (id, style) => addStyle(id, style);
}
var HEAD;
var styles = {};
function addStyle(id, css) {
  const group = isOldIE ? css.media || "default" : id;
  const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
  if (!style.ids.has(id)) {
    style.ids.add(id);
    let code = css.source;
    if (css.map) {
      code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
      code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
    }
    if (!style.element) {
      style.element = document.createElement("style");
      style.element.type = "text/css";
      if (css.media)
        style.element.setAttribute("media", css.media);
      if (HEAD === void 0) {
        HEAD = document.head || document.getElementsByTagName("head")[0];
      }
      HEAD.appendChild(style.element);
    }
    if ("styleSheet" in style.element) {
      style.styles.push(code);
      style.element.styleSheet.cssText = style.styles.filter(Boolean).join("\n");
    } else {
      const index = style.ids.size - 1;
      const textNode = document.createTextNode(code);
      const nodes = style.element.childNodes;
      if (nodes[index])
        style.element.removeChild(nodes[index]);
      if (nodes.length)
        style.element.insertBefore(textNode, nodes[index]);
      else
        style.element.appendChild(textNode);
    }
  }
}
var __vue_script__ = script;
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    staticClass: "vue-otp-2"
  }, _vm._l(_vm.otpLength * 2 - 1, function(v, i) {
    return _c("div", {
      key: i / 2
    }, [i % 2 === 0 ? _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: _vm.otp[i / 2],
        expression: "otp[i/2]"
      }],
      ref: "input" + i / 2,
      refInFor: true,
      attrs: {
        "minlength": "1",
        "maxlength": "1"
      },
      domProps: {
        "value": _vm.otp[i / 2]
      },
      on: {
        "keyup": function($event) {
          return _vm.handleInput($event, i / 2);
        },
        "focus": function($event) {
          return _vm.handleFocus($event, i / 2);
        },
        "input": function($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(_vm.otp, i / 2, $event.target.value);
        }
      }
    }) : _vm._e(), _vm._v(" "), i % 2 !== 0 && true ? _c("span", [_vm._v(_vm._s(_vm.character))]) : _vm._e()]);
  }), 0);
};
var __vue_staticRenderFns__ = [];
var __vue_inject_styles__ = function(inject) {
  if (!inject)
    return;
  inject("data-v-6d8339e3_0", {
    source: ".vue-otp-2[data-v-6d8339e3]{display:flex;justify-content:space-between}.vue-otp-2 div[data-v-6d8339e3]{flex:1;display:flex;align-items:center;justify-content:center}.vue-otp-2 div input[data-v-6d8339e3]{max-width:30px;padding:10px 8px;font-size:20px;border-radius:3px;border:1px solid #cecece;text-align:center}.vue-otp-2 div span[data-v-6d8339e3]{display:block;flex:1;text-align:center}",
    map: void 0,
    media: void 0
  });
};
var __vue_scope_id__ = "data-v-6d8339e3";
var __vue_module_identifier__ = void 0;
var __vue_is_functional_template__ = false;
var __vue_component__ = normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, createInjector, void 0, void 0);
var install = function installVueOtp2(Vue) {
  if (install.installed)
    return;
  install.installed = true;
  Vue.component("VueOtp2", __vue_component__);
};
var plugin = {
  install
};
var GlobalVue = null;
if (typeof window !== "undefined") {
  GlobalVue = window.Vue;
} else if (typeof global !== "undefined") {
  GlobalVue = global.Vue;
}
if (GlobalVue) {
  GlobalVue.use(plugin);
}
__vue_component__.install = install;
var vue_otp_2_esm_default = __vue_component__;

// dep:vue-otp-2
var vue_otp_2_default = vue_otp_2_esm_default;
export {
  vue_otp_2_default as default
};
//# sourceMappingURL=vue-otp-2.js.map
